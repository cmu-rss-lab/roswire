actions:
- definition: 'int32 goal

    ---

    int32 result

    ---

    int32 feedback

    '
  feedback:
    definition: int32 feedback
    fields:
    - name: feedback
      type: int32
    name: TestFeedback
    package: actionlib
  goal:
    definition: int32 goal
    fields:
    - name: goal
      type: int32
    name: TestGoal
    package: actionlib
  name: Test
  package: actionlib
  result:
    definition: int32 result
    fields:
    - name: result
      type: int32
    name: TestResult
    package: actionlib
- definition: 'int32 TERMINATE_SUCCESS = 0

    int32 TERMINATE_ABORTED = 1

    int32 TERMINATE_REJECTED = 2

    int32 TERMINATE_LOSE = 3

    int32 TERMINATE_DROP = 4

    int32 TERMINATE_EXCEPTION = 5

    int32 terminate_status

    bool ignore_cancel  # If true, ignores requests to cancel

    string result_text

    int32 the_result    # Desired value for the_result in the Result

    bool is_simple_client

    duration delay_accept  # Delays accepting the goal by this amount of time

    duration delay_terminate  # Delays terminating for this amount of time

    duration pause_status  # Pauses the status messages for this amount of time

    ---

    int32 the_result

    bool is_simple_server

    ---

    '
  goal:
    constants:
    - name: TERMINATE_SUCCESS
      type: int32
      value: '0'
    - name: TERMINATE_ABORTED
      type: int32
      value: '1'
    - name: TERMINATE_REJECTED
      type: int32
      value: '2'
    - name: TERMINATE_LOSE
      type: int32
      value: '3'
    - name: TERMINATE_DROP
      type: int32
      value: '4'
    - name: TERMINATE_EXCEPTION
      type: int32
      value: '5'
    definition: 'int32 TERMINATE_SUCCESS = 0

      int32 TERMINATE_ABORTED = 1

      int32 TERMINATE_REJECTED = 2

      int32 TERMINATE_LOSE = 3

      int32 TERMINATE_DROP = 4

      int32 TERMINATE_EXCEPTION = 5

      int32 terminate_status

      bool ignore_cancel  # If true, ignores requests to cancel

      string result_text

      int32 the_result    # Desired value for the_result in the Result

      bool is_simple_client

      duration delay_accept  # Delays accepting the goal by this amount of time

      duration delay_terminate  # Delays terminating for this amount of time

      duration pause_status  # Pauses the status messages for this amount of time'
    fields:
    - name: terminate_status
      type: int32
    - name: ignore_cancel
      type: bool
    - name: result_text
      type: string
    - name: the_result
      type: int32
    - name: is_simple_client
      type: bool
    - name: delay_accept
      type: duration
    - name: delay_terminate
      type: duration
    - name: pause_status
      type: duration
    name: TestRequestGoal
    package: actionlib
  name: TestRequest
  package: actionlib
  result:
    definition: 'int32 the_result

      bool is_simple_server'
    fields:
    - name: the_result
      type: int32
    - name: is_simple_server
      type: bool
    name: TestRequestResult
    package: actionlib
- definition: '# Get the map as a nav_msgs/OccupancyGrid

    ---

    nav_msgs/OccupancyGrid map

    ---

    # no feedback'
  feedback:
    definition: '# no feedback'
    name: GetMapFeedback
    package: nav_msgs
  goal:
    definition: '# Get the map as a nav_msgs/OccupancyGrid'
    name: GetMapGoal
    package: nav_msgs
  name: GetMap
  package: nav_msgs
  result:
    definition: nav_msgs/OccupancyGrid map
    fields:
    - name: map
      type: nav_msgs/OccupancyGrid
    name: GetMapResult
    package: nav_msgs
- definition: 'int64 a

    int64 b

    ---

    int64 sum

    ---

    '
  goal:
    definition: 'int64 a

      int64 b'
    fields:
    - name: a
      type: int64
    - name: b
      type: int64
    name: TwoIntsGoal
    package: actionlib
  name: TwoInts
  package: actionlib
  result:
    definition: int64 sum
    fields:
    - name: sum
      type: int64
    name: TwoIntsResult
    package: actionlib
messages:
- definition: "# The multiarray declares a generic multi-dimensional array of a\n\
    # particular data type.  Dimensions are ordered from outer most\n# to inner most.\n\
    \nMultiArrayDimension[] dim # Array of dimension properties\nuint32 data_offset\
    \        # padding elements at front of data\n\n# Accessors should ALWAYS be written\
    \ in terms of dimension stride\n# and specified outer-most dimension first.\n\
    # \n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j\
    \ + k]\n#\n# A standard, 3-channel 640x480 image with interleaved color channels\n\
    # would be specified as:\n#\n# dim[0].label  = \"height\"\n# dim[0].size   = 480\n\
    # dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n\
    # dim[1].label  = \"width\"\n# dim[1].size   = 640\n# dim[1].stride = 3*640 =\
    \ 1920\n# dim[2].label  = \"channel\"\n# dim[2].size   = 3\n# dim[2].stride =\
    \ 3\n#\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
  fields:
  - name: dim
    type: std_msgs/MultiArrayDimension[]
  - name: data_offset
    type: uint32
  name: MultiArrayLayout
  package: std_msgs
- definition: "# This message contains an uncompressed image\n# (0, 0) is at top-left\
    \ corner of image\n#\n\nHeader header        # Header timestamp should be acquisition\
    \ time of image\n                     # Header frame_id should be optical frame\
    \ of camera\n                     # origin of frame should be optical center of\
    \ cameara\n                     # +x should point to the right in the image\n\
    \                     # +y should point down in the image\n                  \
    \   # +z should point into to plane of the image\n                     # If the\
    \ frame_id here and the frame_id of the CameraInfo\n                     # message\
    \ associated with the image conflict\n                     # the behavior is undefined\n\
    \nuint32 height         # image height, that is, number of rows\nuint32 width\
    \          # image width, that is, number of columns\n\n# The legal values for\
    \ encoding are in file src/image_encodings.cpp\n# If you want to standardize a\
    \ new string format, join\n# ros-users@lists.sourceforge.net and send an email\
    \ proposing a new encoding.\n\nstring encoding       # Encoding of pixels -- channel\
    \ meaning, ordering, size\n                      # taken from the list of strings\
    \ in include/sensor_msgs/image_encodings.h\n\nuint8 is_bigendian    # is this\
    \ data bigendian?\nuint32 step           # Full row length in bytes\nuint8[] data\
    \          # actual matrix data, size is (step * rows)\n"
  fields:
  - name: header
    type: std_msgs/Header
  - name: height
    type: uint32
  - name: width
    type: uint32
  - name: encoding
    type: string
  - name: is_bigendian
    type: uint8
  - name: step
    type: uint32
  - name: data
    type: uint8[]
  name: Image
  package: sensor_msgs
- definition: "# This message is a submessage of MultiEchoLaserScan and is not intended\n\
    # to be used separately.\n\nfloat32[] echoes  # Multiple values of ranges or intensities.\n\
    \                  # Each array represents data from the same angle increment."
  fields:
  - name: echoes
    type: float32[]
  name: LaserEcho
  package: sensor_msgs
- definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

    # Get the map as a nav_msgs/OccupancyGrid

    '
  name: GetMapGoal
  package: nav_msgs
- definition: 'string logger

    string level'
  fields:
  - name: logger
    type: string
  - name: level
    type: string
  name: SetLoggerLevelRequest
  package: roscpp
- definition: '# The stamp should store the time at which this goal was requested.

    # It is used by an action server when it tries to preempt all

    # goals that were requested before a certain time

    time stamp


    # The id provides a way to associate feedback and

    # result message with specific goal requests. The id

    # specified must be unique.

    string id


    '
  fields:
  - name: stamp
    type: time
  - name: id
    type: string
  name: GoalID
  package: actionlib_msgs
- definition: int32 feedback
  fields:
  - name: feedback
    type: int32
  name: TestFeedback
  package: actionlib
- definition: '# This expresses a position and orientation on a 2D manifold.


    float64 x

    float64 y

    float64 theta'
  fields:
  - name: x
    type: float64
  - name: y
    type: float64
  - name: theta
    type: float64
  name: Pose2D
  package: geometry_msgs
- definition: "# This represents a vector in free space. \n# It is only meant to represent\
    \ a direction. Therefore, it does not\n# make sense to apply a translation to\
    \ it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2\
    \ will only apply the\n# rotation). If you want your data to be translatable too,\
    \ use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64\
    \ z"
  fields:
  - name: x
    type: float64
  - name: y
    type: float64
  - name: z
    type: float64
  name: Vector3
  package: geometry_msgs
- constants:
  - name: ARROW
    type: uint8
    value: '0'
  - name: CUBE
    type: uint8
    value: '1'
  - name: SPHERE
    type: uint8
    value: '2'
  - name: CYLINDER
    type: uint8
    value: '3'
  - name: LINE_STRIP
    type: uint8
    value: '4'
  - name: LINE_LIST
    type: uint8
    value: '5'
  - name: CUBE_LIST
    type: uint8
    value: '6'
  - name: SPHERE_LIST
    type: uint8
    value: '7'
  - name: POINTS
    type: uint8
    value: '8'
  - name: TEXT_VIEW_FACING
    type: uint8
    value: '9'
  - name: MESH_RESOURCE
    type: uint8
    value: '10'
  - name: TRIANGLE_LIST
    type: uint8
    value: '11'
  - name: ADD
    type: uint8
    value: '0'
  - name: MODIFY
    type: uint8
    value: '0'
  - name: DELETE
    type: uint8
    value: '2'
  definition: "# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes\
    \ for more information on using this message with rviz\n\nuint8 ARROW=0\nuint8\
    \ CUBE=1\nuint8 SPHERE=2\nuint8 CYLINDER=3\nuint8 LINE_STRIP=4\nuint8 LINE_LIST=5\n\
    uint8 CUBE_LIST=6\nuint8 SPHERE_LIST=7\nuint8 POINTS=8\nuint8 TEXT_VIEW_FACING=9\n\
    uint8 MESH_RESOURCE=10\nuint8 TRIANGLE_LIST=11\n\nuint8 ADD=0\nuint8 MODIFY=0\n\
    uint8 DELETE=2\n#uint8 DELETEALL=3 # TODO: enable for ROS-J, disabled for now\
    \ but functionality is still there. Allows one to clear all markers in plugin\n\
    \nHeader header                        # header for time/frame information\nstring\
    \ ns                            # Namespace to place this object in... used in\
    \ conjunction with id to create a unique name for the object\nint32 id \t\t  \
    \                       # object ID useful in conjunction with the namespace for\
    \ manipulating and deleting the object later\nint32 type \t\t                \
    \       # Type of object\nint32 action \t                       # 0 add/modify\
    \ an object, 1 (deprecated), 2 deletes an object, 3 deletes all objects\ngeometry_msgs/Pose\
    \ pose                 # Pose of the object\ngeometry_msgs/Vector3 scale     \
    \        # Scale of the object 1,1,1 means default (usually 1 meter square)\n\
    std_msgs/ColorRGBA color             # Color [0.0-1.0]\nduration lifetime    \
    \                # How long the object should last before being automatically\
    \ deleted.  0 means forever\nbool frame_locked                    # If this marker\
    \ should be frame-locked, i.e. retransformed into its frame every timestep\n\n\
    #Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP,\
    \ ...)\ngeometry_msgs/Point[] points\n#Only used if the type specified has some\
    \ use for them (eg. POINTS, LINE_STRIP, ...)\n#number of colors must either be\
    \ 0 or equal to the number of points\n#NOTE: alpha is not yet used\nstd_msgs/ColorRGBA[]\
    \ colors\n\n# NOTE: only used for text markers\nstring text\n\n# NOTE: only used\
    \ for MESH_RESOURCE markers\nstring mesh_resource\nbool mesh_use_embedded_materials\n"
  fields:
  - name: header
    type: std_msgs/Header
  - name: ns
    type: string
  - name: id
    type: int32
  - name: type
    type: int32
  - name: action
    type: int32
  - name: pose
    type: geometry_msgs/Pose
  - name: scale
    type: geometry_msgs/Vector3
  - name: color
    type: std_msgs/ColorRGBA
  - name: lifetime
    type: duration
  - name: frame_locked
    type: bool
  - name: points
    type: geometry_msgs/Point[]
  - name: colors
    type: std_msgs/ColorRGBA[]
  - name: text
    type: string
  - name: mesh_resource
    type: string
  - name: mesh_use_embedded_materials
    type: bool
  name: Marker
  package: visualization_msgs
- definition: '# This represents an estimated accel with reference coordinate frame
    and timestamp.

    Header header

    AccelWithCovariance accel

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: accel
    type: geometry_msgs/AccelWithCovariance
  name: AccelWithCovarianceStamped
  package: geometry_msgs
- constants:
  - name: TERMINATE_SUCCESS
    type: int32
    value: '0'
  - name: TERMINATE_ABORTED
    type: int32
    value: '1'
  - name: TERMINATE_REJECTED
    type: int32
    value: '2'
  - name: TERMINATE_LOSE
    type: int32
    value: '3'
  - name: TERMINATE_DROP
    type: int32
    value: '4'
  - name: TERMINATE_EXCEPTION
    type: int32
    value: '5'
  definition: 'int32 TERMINATE_SUCCESS = 0

    int32 TERMINATE_ABORTED = 1

    int32 TERMINATE_REJECTED = 2

    int32 TERMINATE_LOSE = 3

    int32 TERMINATE_DROP = 4

    int32 TERMINATE_EXCEPTION = 5

    int32 terminate_status

    bool ignore_cancel  # If true, ignores requests to cancel

    string result_text

    int32 the_result    # Desired value for the_result in the Result

    bool is_simple_client

    duration delay_accept  # Delays accepting the goal by this amount of time

    duration delay_terminate  # Delays terminating for this amount of time

    duration pause_status  # Pauses the status messages for this amount of time'
  fields:
  - name: terminate_status
    type: int32
  - name: ignore_cancel
    type: bool
  - name: result_text
    type: string
  - name: the_result
    type: int32
  - name: is_simple_client
    type: bool
  - name: delay_accept
    type: duration
  - name: delay_terminate
    type: duration
  - name: pause_status
    type: duration
  name: TestRequestGoal
  package: actionlib
- definition: '# This expresses velocity in free space with uncertainty.


    Twist twist


    # Row-major representation of the 6x6 covariance matrix

    # The orientation parameters use a fixed-axis representation.

    # In order, the parameters are:

    # (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)

    float64[36] covariance

    '
  fields:
  - name: twist
    type: geometry_msgs/Twist
  - name: covariance
    type: float64[36]
  name: TwistWithCovariance
  package: geometry_msgs
- definition: '# A wrench with reference coordinate frame and timestamp

    Header header

    Wrench wrench

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: wrench
    type: geometry_msgs/Wrench
  name: WrenchStamped
  package: geometry_msgs
- definition: 'float32 x

    float32 y

    float32 theta'
  fields:
  - name: x
    type: float32
  - name: y
    type: float32
  - name: theta
    type: float32
  name: TeleportAbsoluteRequest
  package: turtlesim
- definition: 'int8 data

    '
  fields:
  - name: data
    type: int8
  name: Int8
  package: std_msgs
- definition: 'float32 r

    float32 g

    float32 b

    float32 a

    '
  fields:
  - name: r
    type: float32
  - name: g
    type: float32
  - name: b
    type: float32
  - name: a
    type: float32
  name: ColorRGBA
  package: std_msgs
- definition: '# Definition of a mesh


    # list of triangles; the index values refer to positions in vertices[]

    MeshTriangle[] triangles


    # the actual vertices that make up the mesh

    geometry_msgs/Point[] vertices

    '
  fields:
  - name: triangles
    type: shape_msgs/MeshTriangle[]
  - name: vertices
    type: geometry_msgs/Point[]
  name: Mesh
  package: shape_msgs
- constants:
  - name: CIRCLE
    type: uint8
    value: '0'
  - name: LINE_STRIP
    type: uint8
    value: '1'
  - name: LINE_LIST
    type: uint8
    value: '2'
  - name: POLYGON
    type: uint8
    value: '3'
  - name: POINTS
    type: uint8
    value: '4'
  - name: ADD
    type: uint8
    value: '0'
  - name: REMOVE
    type: uint8
    value: '1'
  definition: "uint8 CIRCLE=0\nuint8 LINE_STRIP=1\nuint8 LINE_LIST=2\nuint8 POLYGON=3\n\
    uint8 POINTS=4\n\nuint8 ADD=0\nuint8 REMOVE=1\n\nHeader header\nstring ns\t\t\
    # namespace, used with id to form a unique id\nint32 id          \t# unique id\
    \ within the namespace\nint32 type        \t# CIRCLE/LINE_STRIP/etc.\nint32 action\
    \      \t# ADD/REMOVE\ngeometry_msgs/Point position # 2D, in pixel-coords\nfloat32\
    \ scale\t \t# the diameter for a circle, etc.\nstd_msgs/ColorRGBA outline_color\n\
    uint8 filled\t\t# whether to fill in the shape with color\nstd_msgs/ColorRGBA\
    \ fill_color # color [0.0-1.0]\nduration lifetime       # How long the object\
    \ should last before being automatically deleted.  0 means forever\n\n\ngeometry_msgs/Point[]\
    \ points # used for LINE_STRIP/LINE_LIST/POINTS/etc., 2D in pixel coords\nstd_msgs/ColorRGBA[]\
    \ outline_colors # a color for each line, point, etc."
  fields:
  - name: header
    type: std_msgs/Header
  - name: ns
    type: string
  - name: id
    type: int32
  - name: type
    type: int32
  - name: action
    type: int32
  - name: position
    type: geometry_msgs/Point
  - name: scale
    type: float32
  - name: outline_color
    type: std_msgs/ColorRGBA
  - name: filled
    type: uint8
  - name: fill_color
    type: std_msgs/ColorRGBA
  - name: lifetime
    type: duration
  - name: points
    type: geometry_msgs/Point[]
  - name: outline_colors
    type: std_msgs/ColorRGBA[]
  name: ImageMarker
  package: visualization_msgs
- definition: '# Stores the statuses for goals that are currently being tracked

    # by an action server

    Header header

    GoalStatus[] status_list


    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: status_list
    type: actionlib_msgs/GoalStatus[]
  name: GoalStatusArray
  package: actionlib_msgs
- definition: '# This represents a Vector3 with reference coordinate frame and timestamp

    Header header

    Vector3 vector

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: vector
    type: geometry_msgs/Vector3
  name: Vector3Stamped
  package: geometry_msgs
- definition: int32 result
  fields:
  - name: result
    type: int32
  name: TestResult
  package: actionlib
- definition: 'string name

    string value

    '
  fields:
  - name: name
    type: string
  - name: value
    type: string
  name: StrParameter
  package: dynamic_reconfigure
- definition: "# Single scan from a multi-echo planar laser range-finder\n#\n# If\
    \ you have another ranging device with different behavior (e.g. a sonar\n# array),\
    \ please find or create a different message, since applications\n# will make fairly\
    \ laser-specific assumptions about this data\n\nHeader header            # timestamp\
    \ in the header is the acquisition time of \n                         # the first\
    \ ray in the scan.\n                         #\n                         # in\
    \ frame frame_id, angles are measured around \n                         # the\
    \ positive Z axis (counterclockwise, if Z is up)\n                         # with\
    \ zero angle being forward along the x axis\n                         \nfloat32\
    \ angle_min        # start angle of the scan [rad]\nfloat32 angle_max        #\
    \ end angle of the scan [rad]\nfloat32 angle_increment  # angular distance between\
    \ measurements [rad]\n\nfloat32 time_increment   # time between measurements [seconds]\
    \ - if your scanner\n                         # is moving, this will be used in\
    \ interpolating position\n                         # of 3d points\nfloat32 scan_time\
    \        # time between scans [seconds]\n\nfloat32 range_min        # minimum\
    \ range value [m]\nfloat32 range_max        # maximum range value [m]\n\nLaserEcho[]\
    \ ranges       # range data [m] (Note: NaNs, values < range_min or > range_max\
    \ should be discarded)\n                         # +Inf measurements are out of\
    \ range\n                         # -Inf measurements are too close to determine\
    \ exact distance.\nLaserEcho[] intensities  # intensity data [device-specific\
    \ units].  If your\n                         # device does not provide intensities,\
    \ please leave\n                         # the array empty."
  fields:
  - name: header
    type: std_msgs/Header
  - name: angle_min
    type: float32
  - name: angle_max
    type: float32
  - name: angle_increment
    type: float32
  - name: time_increment
    type: float32
  - name: scan_time
    type: float32
  - name: range_min
    type: float32
  - name: range_max
    type: float32
  - name: ranges
    type: sensor_msgs/LaserEcho[]
  - name: intensities
    type: sensor_msgs/LaserEcho[]
  name: MultiEchoLaserScan
  package: sensor_msgs
- definition: char data
  fields:
  - name: data
    type: char
  name: Char
  package: std_msgs
- constants:
  - name: ULTRASOUND
    type: uint8
    value: '0'
  - name: INFRARED
    type: uint8
    value: '1'
  definition: "# Single range reading from an active ranger that emits energy and\
    \ reports\n# one range reading that is valid along an arc at the distance measured.\
    \ \n# This message is  not appropriate for laser scanners. See the LaserScan\n\
    # message if you are working with a laser scanner.\n\n# This message also can\
    \ represent a fixed-distance (binary) ranger.  This\n# sensor will have min_range===max_range===distance\
    \ of detection.\n# These sensors follow REP 117 and will output -Inf if the object\
    \ is detected\n# and +Inf if the object is outside of the detection range.\n\n\
    Header header           # timestamp in the header is the time the ranger\n   \
    \                     # returned the distance reading\n\n# Radiation type enums\n\
    # If you want a value added to this list, send an email to the ros-users list\n\
    uint8 ULTRASOUND=0\nuint8 INFRARED=1\n\nuint8 radiation_type    # the type of\
    \ radiation used by the sensor\n                        # (sound, IR, etc) [enum]\n\
    \nfloat32 field_of_view   # the size of the arc that the distance reading is\n\
    \                        # valid for [rad]\n                        # the object\
    \ causing the range reading may have\n                        # been anywhere\
    \ within -field_of_view/2 and\n                        # field_of_view/2 at the\
    \ measured range. \n                        # 0 angle corresponds to the x-axis\
    \ of the sensor.\n\nfloat32 min_range       # minimum range value [m]\nfloat32\
    \ max_range       # maximum range value [m]\n                        # Fixed distance\
    \ rangers require min_range==max_range\n\nfloat32 range           # range data\
    \ [m]\n                        # (Note: values < range_min or > range_max\n  \
    \                      # should be discarded)\n                        # Fixed\
    \ distance rangers only output -Inf or +Inf.\n                        # -Inf represents\
    \ a detection within fixed distance.\n                        # (Detection too\
    \ close to the sensor to quantify)\n                        # +Inf represents\
    \ no detection within the fixed distance.\n                        # (Object out\
    \ of range)"
  fields:
  - name: header
    type: std_msgs/Header
  - name: radiation_type
    type: uint8
  - name: field_of_view
    type: float32
  - name: min_range
    type: float32
  - name: max_range
    type: float32
  - name: range
    type: float32
  name: Range
  package: sensor_msgs
- definition: '# Please look at the MultiArrayLayout message definition for

    # documentation on all multiarrays.


    MultiArrayLayout  layout        # specification of data layout

    uint16[]            data        # array of data


    '
  fields:
  - name: layout
    type: std_msgs/MultiArrayLayout
  - name: data
    type: uint16[]
  name: UInt16MultiArray
  package: std_msgs
- definition: 'Header header

    string id  # ID of the bond

    string instance_id  # Unique ID for an individual in a bond

    bool active


    # Including the timeouts for the bond makes it easier to debug mis-matches

    # between the two sides.

    float32 heartbeat_timeout

    float32 heartbeat_period'
  fields:
  - name: header
    type: std_msgs/Header
  - name: id
    type: string
  - name: instance_id
    type: string
  - name: active
    type: bool
  - name: heartbeat_timeout
    type: float32
  - name: heartbeat_period
    type: float32
  name: Status
  package: bond
- constants:
  - name: TYPE_LED
    type: uint8
    value: '0'
  - name: TYPE_RUMBLE
    type: uint8
    value: '1'
  - name: TYPE_BUZZER
    type: uint8
    value: '2'
  definition: '# Declare of the type of feedback

    uint8 TYPE_LED    = 0

    uint8 TYPE_RUMBLE = 1

    uint8 TYPE_BUZZER = 2


    uint8 type


    # This will hold an id number for each type of each feedback.

    # Example, the first led would be id=0, the second would be id=1

    uint8 id


    # Intensity of the feedback, from 0.0 to 1.0, inclusive.  If device is

    # actually binary, driver should treat 0<=x<0.5 as off, 0.5<=x<=1 as on.

    float32 intensity


    '
  fields:
  - name: type
    type: uint8
  - name: id
    type: uint8
  - name: intensity
    type: float32
  name: JoyFeedback
  package: sensor_msgs
- definition: '# This represents a Point with reference coordinate frame and timestamp

    Header header

    Point point

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: point
    type: geometry_msgs/Point
  name: PointStamped
  package: geometry_msgs
- definition: 'uint16 data

    '
  fields:
  - name: data
    type: uint16
  name: UInt16
  package: std_msgs
- definition: '# Please look at the MultiArrayLayout message definition for

    # documentation on all multiarrays.


    MultiArrayLayout  layout        # specification of data layout

    uint8[]           data          # array of data


    '
  fields:
  - name: layout
    type: std_msgs/MultiArrayLayout
  - name: data
    type: uint8[]
  name: UInt8MultiArray
  package: std_msgs
- definition: '# This expresses velocity in free space broken into its linear and
    angular parts.

    Vector3  linear

    Vector3  angular

    '
  fields:
  - name: linear
    type: geometry_msgs/Vector3
  - name: angular
    type: geometry_msgs/Vector3
  name: Twist
  package: geometry_msgs
- definition: string name
  fields:
  - name: name
    type: string
  name: NodeletUnloadRequest
  package: nodelet
- definition: ''
  name: Empty
  package: std_msgs
- definition: '# This represents a Polygon with reference coordinate frame and timestamp

    Header header

    Polygon polygon

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: polygon
    type: geometry_msgs/Polygon
  name: PolygonStamped
  package: geometry_msgs
- definition: 'Group[] groups

    Config max

    Config min

    Config dflt

    '
  fields:
  - name: groups
    type: dynamic_reconfigure/Group[]
  - name: max
    type: dynamic_reconfigure/Config
  - name: min
    type: dynamic_reconfigure/Config
  - name: dflt
    type: dynamic_reconfigure/Config
  name: ConfigDescription
  package: dynamic_reconfigure
- definition: '# Bad version of AddTwoInts for unit testing

    int64 a

    int32 b'
  fields:
  - name: a
    type: int64
  - name: b
    type: int32
  name: BadTwoIntsRequest
  package: rospy_tutorials
- definition: 'uint8 r

    uint8 g

    uint8 b

    '
  fields:
  - name: r
    type: uint8
  - name: g
    type: uint8
  - name: b
    type: uint8
  name: Color
  package: turtlesim
- definition: 'float32 linear

    float32 angular'
  fields:
  - name: linear
    type: float32
  - name: angular
    type: float32
  name: TeleportRelativeRequest
  package: turtlesim
- definition: int32 sum
  fields:
  - name: sum
    type: int32
  name: BadTwoIntsResponse
  package: rospy_tutorials
- definition: int64 sum
  fields:
  - name: sum
    type: int64
  name: TwoIntsResponse
  package: roscpp_tutorials
- definition: '# Please look at the MultiArrayLayout message definition for

    # documentation on all multiarrays.


    MultiArrayLayout  layout        # specification of data layout

    int16[]           data          # array of data


    '
  fields:
  - name: layout
    type: std_msgs/MultiArrayLayout
  - name: data
    type: int16[]
  name: Int16MultiArray
  package: std_msgs
- constants:
  - name: INT8
    type: uint8
    value: '1'
  - name: UINT8
    type: uint8
    value: '2'
  - name: INT16
    type: uint8
    value: '3'
  - name: UINT16
    type: uint8
    value: '4'
  - name: INT32
    type: uint8
    value: '5'
  - name: UINT32
    type: uint8
    value: '6'
  - name: FLOAT32
    type: uint8
    value: '7'
  - name: FLOAT64
    type: uint8
    value: '8'
  definition: '# This message holds the description of one point entry in the

    # PointCloud2 message format.

    uint8 INT8    = 1

    uint8 UINT8   = 2

    uint8 INT16   = 3

    uint8 UINT16  = 4

    uint8 INT32   = 5

    uint8 UINT32  = 6

    uint8 FLOAT32 = 7

    uint8 FLOAT64 = 8


    string name      # Name of field

    uint32 offset    # Offset from start of point struct

    uint8  datatype  # Datatype enumeration, see above

    uint32 count     # How many elements in the field

    '
  fields:
  - name: name
    type: string
  - name: offset
    type: uint32
  - name: datatype
    type: uint8
  - name: count
    type: uint32
  name: PointField
  package: sensor_msgs
- definition: '# A twist with reference coordinate frame and timestamp

    Header header

    Twist twist

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: twist
    type: geometry_msgs/Twist
  name: TwistStamped
  package: geometry_msgs
- definition: float32 data
  fields:
  - name: data
    type: float32
  name: Float32
  package: std_msgs
- definition: 'int64 a

    int64 b'
  fields:
  - name: a
    type: int64
  - name: b
    type: int64
  name: TwoIntsGoal
  package: actionlib
- definition: 'string name

    string level

    '
  fields:
  - name: name
    type: string
  - name: level
    type: string
  name: Logger
  package: roscpp
- definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


    TestActionGoal action_goal

    TestActionResult action_result

    TestActionFeedback action_feedback

    '
  fields:
  - name: action_goal
    type: actionlib/TestActionGoal
  - name: action_result
    type: actionlib/TestActionResult
  - name: action_feedback
    type: actionlib/TestActionFeedback
  name: TestAction
  package: actionlib
- definition: 'string name

    int32 value

    '
  fields:
  - name: name
    type: string
  - name: value
    type: int32
  name: IntParameter
  package: dynamic_reconfigure
- definition: '# Please look at the MultiArrayLayout message definition for

    # documentation on all multiarrays.


    MultiArrayLayout  layout        # specification of data layout

    byte[]            data          # array of data


    '
  fields:
  - name: layout
    type: std_msgs/MultiArrayLayout
  - name: data
    type: byte[]
  name: ByteMultiArray
  package: std_msgs
- definition: float64 data
  fields:
  - name: data
    type: float64
  name: Float64
  package: std_msgs
- definition: '# This represents force in free space, separated into

    # its linear and angular parts.

    Vector3  force

    Vector3  torque

    '
  fields:
  - name: force
    type: geometry_msgs/Vector3
  - name: torque
    type: geometry_msgs/Vector3
  name: Wrench
  package: geometry_msgs
- definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

    # no feedback

    '
  name: GetMapFeedback
  package: nav_msgs
- definition: "# Standard metadata for higher-level stamped data types.\n# This is\
    \ generally used to communicate timestamped data \n# in a particular coordinate\
    \ frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer\
    \ timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch\
    \ (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since\
    \ stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar\
    \ is provided by the client library\ntime stamp\n#Frame this data is associated\
    \ with\n# 0: no frame\n# 1: global frame\nstring frame_id\n"
  fields:
  - name: seq
    type: uint32
  - name: stamp
    type: time
  - name: frame_id
    type: string
  name: Header
  package: std_msgs
- definition: 'duration data

    '
  fields:
  - name: data
    type: duration
  name: Duration
  package: std_msgs
- definition: '# Definition of a triangle''s vertices

    uint32[3] vertex_indices

    '
  fields:
  - name: vertex_indices
    type: uint32[3]
  name: MeshTriangle
  package: shape_msgs
- definition: 'string key # what to label this value when viewing

    string value # a value to track over time

    '
  fields:
  - name: key
    type: string
  - name: value
    type: string
  name: KeyValue
  package: diagnostic_msgs
- definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


    TestRequestActionGoal action_goal

    TestRequestActionResult action_result

    TestRequestActionFeedback action_feedback

    '
  fields:
  - name: action_goal
    type: actionlib/TestRequestActionGoal
  - name: action_result
    type: actionlib/TestRequestActionResult
  - name: action_feedback
    type: actionlib/TestRequestActionFeedback
  name: TestRequestAction
  package: actionlib
- definition: '# A Pose with reference coordinate frame and timestamp

    Header header

    Pose pose

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: pose
    type: geometry_msgs/Pose
  name: PoseStamped
  package: geometry_msgs
- definition: '# Please look at the MultiArrayLayout message definition for

    # documentation on all multiarrays.


    MultiArrayLayout  layout        # specification of data layout

    int8[]            data          # array of data


    '
  fields:
  - name: layout
    type: std_msgs/MultiArrayLayout
  - name: data
    type: int8[]
  name: Int8MultiArray
  package: std_msgs
- definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


    Header header

    actionlib_msgs/GoalID goal_id

    TestGoal goal

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: goal_id
    type: actionlib_msgs/GoalID
  - name: goal
    type: actionlib/TestGoal
  name: TestActionGoal
  package: actionlib
- definition: 'string label   # label of given dimension

    uint32 size    # size of given dimension (in type units)

    uint32 stride  # stride of given dimension'
  fields:
  - name: label
    type: string
  - name: size
    type: uint32
  - name: stride
    type: uint32
  name: MultiArrayDimension
  package: std_msgs
- definition: 'time data

    '
  fields:
  - name: data
    type: time
  name: Time
  package: std_msgs
- definition: "# roslib/Clock is used for publishing simulated time in ROS. \n# This\
    \ message simply communicates the current time.\n# For more information, see http://www.ros.org/wiki/Clock\n\
    time clock\n"
  fields:
  - name: clock
    type: time
  name: Clock
  package: rosgraph_msgs
- constants:
  - name: PENDING
    type: uint8
    value: '0   # The goal has yet to be processed by the action server'
  - name: ACTIVE
    type: uint8
    value: '1   # The goal is currently being processed by the action server'
  - name: PREEMPTED
    type: uint8
    value: '2   # The goal received a cancel request after it started executing'
  - name: SUCCEEDED
    type: uint8
    value: '3   # The goal was achieved successfully by the action server (Terminal
      State)'
  - name: ABORTED
    type: uint8
    value: '4   # The goal was aborted during execution by the action server due'
  - name: REJECTED
    type: uint8
    value: '5   # The goal was rejected by the action server without being processed,'
  - name: PREEMPTING
    type: uint8
    value: '6   # The goal received a cancel request after it started executing'
  - name: RECALLING
    type: uint8
    value: '7   # The goal received a cancel request before it started executing,'
  - name: RECALLED
    type: uint8
    value: '8   # The goal received a cancel request before it started executing'
  - name: LOST
    type: uint8
    value: '9   # An action client can determine that a goal is LOST. This should
      not be'
  definition: "GoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal\
    \ has yet to be processed by the action server\nuint8 ACTIVE          = 1   #\
    \ The goal is currently being processed by the action server\nuint8 PREEMPTED\
    \       = 2   # The goal received a cancel request after it started executing\n\
    \                            #   and has since completed its execution (Terminal\
    \ State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by\
    \ the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was\
    \ aborted during execution by the action server due\n                        \
    \    #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The\
    \ goal was rejected by the action server without being processed,\n          \
    \                  #    because the goal was unattainable or invalid (Terminal\
    \ State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after\
    \ it started executing\n                            #    and has not yet completed\
    \ execution\nuint8 RECALLING       = 7   # The goal received a cancel request\
    \ before it started executing,\n                            #    but the action\
    \ server has not yet confirmed that the goal is canceled\nuint8 RECALLED     \
    \   = 8   # The goal received a cancel request before it started executing\n \
    \                           #    and was successfully cancelled (Terminal State)\n\
    uint8 LOST            = 9   # An action client can determine that a goal is LOST.\
    \ This should not be\n                            #    sent over the wire by an\
    \ action server\n\n#Allow for the user to associate a string with GoalStatus for\
    \ debugging\nstring text\n\n"
  fields:
  - name: goal_id
    type: actionlib_msgs/GoalID
  - name: status
    type: uint8
  - name: text
    type: string
  name: GoalStatus
  package: actionlib_msgs
- definition: '# This represents the transform between two coordinate frames in free
    space.


    Vector3 translation

    Quaternion rotation

    '
  fields:
  - name: translation
    type: geometry_msgs/Vector3
  - name: rotation
    type: geometry_msgs/Quaternion
  name: Transform
  package: geometry_msgs
- definition: '# This expresses acceleration in free space broken into its linear
    and angular parts.

    Vector3  linear

    Vector3  angular

    '
  fields:
  - name: linear
    type: geometry_msgs/Vector3
  - name: angular
    type: geometry_msgs/Vector3
  name: Accel
  package: geometry_msgs
- definition: "# Representation of state for joints with multiple degrees of freedom,\
    \ \n# following the structure of JointState.\n#\n# It is assumed that a joint\
    \ in a system corresponds to a transform that gets applied \n# along the kinematic\
    \ chain. For example, a planar joint (as in URDF) is 3DOF (x, y, yaw)\n# and those\
    \ 3DOF can be expressed as a transformation matrix, and that transformation\n\
    # matrix can be converted back to (x, y, yaw)\n#\n# Each joint is uniquely identified\
    \ by its name\n# The header specifies the time at which the joint states were\
    \ recorded. All the joint states\n# in one message have to be recorded at the\
    \ same time.\n#\n# This message consists of a multiple arrays, one for each part\
    \ of the joint state. \n# The goal is to make each of the fields optional. When\
    \ e.g. your joints have no\n# wrench associated with them, you can leave the wrench\
    \ array empty. \n#\n# All arrays in this message should have the same size, or\
    \ be empty.\n# This is the only way to uniquely associate the joint name with\
    \ the correct\n# states.\n\nHeader header\n\nstring[] joint_names\ngeometry_msgs/Transform[]\
    \ transforms\ngeometry_msgs/Twist[] twist\ngeometry_msgs/Wrench[] wrench\n"
  fields:
  - name: header
    type: std_msgs/Header
  - name: joint_names
    type: string[]
  - name: transforms
    type: geometry_msgs/Transform[]
  - name: twist
    type: geometry_msgs/Twist[]
  - name: wrench
    type: geometry_msgs/Wrench[]
  name: MultiDOFJointState
  package: sensor_msgs
- definition: string topic
  fields:
  - name: topic
    type: string
  name: MuxDeleteRequest
  package: topic_tools
- definition: '# Mass [kg]

    float64 m


    # Center of mass [m]

    geometry_msgs/Vector3 com


    # Inertia Tensor [kg-m^2]

    #     | ixx ixy ixz |

    # I = | ixy iyy iyz |

    #     | ixz iyz izz |

    float64 ixx

    float64 ixy

    float64 ixz

    float64 iyy

    float64 iyz

    float64 izz

    '
  fields:
  - name: m
    type: float64
  - name: com
    type: geometry_msgs/Vector3
  - name: ixx
    type: float64
  - name: ixy
    type: float64
  - name: ixz
    type: float64
  - name: iyy
    type: float64
  - name: iyz
    type: float64
  - name: izz
    type: float64
  name: Inertia
  package: geometry_msgs
- constants:
  - name: RECONFIGURE_CLOSE
    type: byte
    value: '3  # Parameters that need a sensor to be stopped completely when changed'
  - name: RECONFIGURE_STOP
    type: byte
    value: '1  # Parameters that need a sensor to stop streaming when changed'
  - name: RECONFIGURE_RUNNING
    type: byte
    value: '0 # Parameters that can be changed while a sensor is streaming'
  definition: '# This message is deprecated, please use driver_base/SensorLevels instead.


    byte RECONFIGURE_CLOSE = 3  # Parameters that need a sensor to be stopped completely
    when changed

    byte RECONFIGURE_STOP = 1  # Parameters that need a sensor to stop streaming when
    changed

    byte RECONFIGURE_RUNNING = 0 # Parameters that can be changed while a sensor is
    streaming

    '
  name: SensorLevels
  package: dynamic_reconfigure
- definition: "# Each multi-dof joint can specify a transform (up to 6 DOF)\ngeometry_msgs/Transform[]\
    \ transforms\n\n# There can be a velocity specified for the origin of the joint\
    \ \ngeometry_msgs/Twist[] velocities\n\n# There can be an acceleration specified\
    \ for the origin of the joint \ngeometry_msgs/Twist[] accelerations\n\nduration\
    \ time_from_start\n"
  fields:
  - name: transforms
    type: geometry_msgs/Transform[]
  - name: velocities
    type: geometry_msgs/Twist[]
  - name: accelerations
    type: geometry_msgs/Twist[]
  - name: time_from_start
    type: duration
  name: MultiDOFJointTrajectoryPoint
  package: trajectory_msgs
- definition: '# Time/frame info.

    Header header


    # Initial pose. Also, defines the pivot point for rotations.

    geometry_msgs/Pose pose


    # Identifying string. Must be globally unique in

    # the topic that this message is sent through.

    string name

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: pose
    type: geometry_msgs/Pose
  - name: name
    type: string
  name: InteractiveMarkerPose
  package: visualization_msgs
- definition: int64 data
  fields:
  - name: data
    type: int64
  name: Int64
  package: std_msgs
- definition: 'Marker[] markers

    '
  fields:
  - name: markers
    type: visualization_msgs/Marker[]
  name: MarkerArray
  package: visualization_msgs
- definition: '# This expresses acceleration in free space with uncertainty.


    Accel accel


    # Row-major representation of the 6x6 covariance matrix

    # The orientation parameters use a fixed-axis representation.

    # In order, the parameters are:

    # (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)

    float64[36] covariance

    '
  fields:
  - name: accel
    type: geometry_msgs/Accel
  - name: covariance
    type: float64[36]
  name: AccelWithCovariance
  package: geometry_msgs
- definition: "# This expresses a transform from coordinate frame header.frame_id\n\
    # to the coordinate frame child_frame_id\n#\n# This message is mostly used by\
    \ the \n# <a href=\"http://www.ros.org/wiki/tf\">tf</a> package. \n# See its documentation\
    \ for more information.\n\nHeader header\nstring child_frame_id # the frame id\
    \ of the child frame\nTransform transform\n"
  fields:
  - name: header
    type: std_msgs/Header
  - name: child_frame_id
    type: string
  - name: transform
    type: geometry_msgs/Transform
  name: TransformStamped
  package: geometry_msgs
- definition: "# This service requests that a camera stores the given CameraInfo \n\
    # as that camera's calibration information.\n#\n# The width and height in the\
    \ camera_info field should match what the\n# camera is currently outputting on\
    \ its camera_info topic, and the camera\n# will assume that the region of the\
    \ imager that is being referred to is\n# the region that the camera is currently\
    \ capturing.\n\nsensor_msgs/CameraInfo camera_info # The camera_info to store"
  fields:
  - name: camera_info
    type: sensor_msgs/CameraInfo
  name: SetCameraInfoRequest
  package: sensor_msgs
- definition: Config config
  fields:
  - name: config
    type: dynamic_reconfigure/Config
  name: ReconfigureRequest
  package: dynamic_reconfigure
- definition: uint64 data
  fields:
  - name: data
    type: uint64
  name: UInt64
  package: std_msgs
- definition: "# The header is used to specify the coordinate frame and the reference\
    \ time for the trajectory durations\nHeader header\n\n# A representation of a\
    \ multi-dof joint trajectory (each point is a transformation)\n# Each point along\
    \ the trajectory will include an array of positions/velocities/accelerations\n\
    # that has the same length as the array of joint names, and has the same order\
    \ of joints as \n# the joint names array.\n\nstring[] joint_names\nMultiDOFJointTrajectoryPoint[]\
    \ points\n"
  fields:
  - name: header
    type: std_msgs/Header
  - name: joint_names
    type: string[]
  - name: points
    type: trajectory_msgs/MultiDOFJointTrajectoryPoint[]
  name: MultiDOFJointTrajectory
  package: trajectory_msgs
- definition: int32 goal
  fields:
  - name: goal
    type: int32
  name: TestGoal
  package: actionlib
- constants:
  - name: COVARIANCE_TYPE_UNKNOWN
    type: uint8
    value: '0'
  - name: COVARIANCE_TYPE_APPROXIMATED
    type: uint8
    value: '1'
  - name: COVARIANCE_TYPE_DIAGONAL_KNOWN
    type: uint8
    value: '2'
  - name: COVARIANCE_TYPE_KNOWN
    type: uint8
    value: '3'
  definition: '# Navigation Satellite fix for any Global Navigation Satellite System

    #

    # Specified using the WGS 84 reference ellipsoid


    # header.stamp specifies the ROS time for this measurement (the

    #        corresponding satellite time may be reported using the

    #        sensor_msgs/TimeReference message).

    #

    # header.frame_id is the frame of reference reported by the satellite

    #        receiver, usually the location of the antenna.  This is a

    #        Euclidean frame relative to the vehicle, not a reference

    #        ellipsoid.

    Header header


    # satellite fix status information

    NavSatStatus status


    # Latitude [degrees]. Positive is north of equator; negative is south.

    float64 latitude


    # Longitude [degrees]. Positive is east of prime meridian; negative is west.

    float64 longitude


    # Altitude [m]. Positive is above the WGS 84 ellipsoid

    # (quiet NaN if no altitude is available).

    float64 altitude


    # Position covariance [m^2] defined relative to a tangential plane

    # through the reported position. The components are East, North, and

    # Up (ENU), in row-major order.

    #

    # Beware: this coordinate system exhibits singularities at the poles.


    float64[9] position_covariance


    # If the covariance of the fix is known, fill it in completely. If the

    # GPS receiver provides the variance of each measurement, put them

    # along the diagonal. If only Dilution of Precision is available,

    # estimate an approximate covariance from that.


    uint8 COVARIANCE_TYPE_UNKNOWN = 0

    uint8 COVARIANCE_TYPE_APPROXIMATED = 1

    uint8 COVARIANCE_TYPE_DIAGONAL_KNOWN = 2

    uint8 COVARIANCE_TYPE_KNOWN = 3


    uint8 position_covariance_type

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: status
    type: sensor_msgs/NavSatStatus
  - name: latitude
    type: float64
  - name: longitude
    type: float64
  - name: altitude
    type: float64
  - name: position_covariance
    type: float64[9]
  - name: position_covariance_type
    type: uint8
  name: NavSatFix
  package: sensor_msgs
- definition: "# This message is used to specify a region of interest within an image.\n\
    #\n# When used to specify the ROI setting of the camera when the image was\n#\
    \ taken, the height and width fields should either match the height and\n# width\
    \ fields for the associated image; or height = width = 0\n# indicates that the\
    \ full resolution image was captured.\n\nuint32 x_offset  # Leftmost pixel of\
    \ the ROI\n                 # (0 if the ROI includes the left edge of the image)\n\
    uint32 y_offset  # Topmost pixel of the ROI\n                 # (0 if the ROI\
    \ includes the top edge of the image)\nuint32 height    # Height of ROI\nuint32\
    \ width     # Width of ROI\n\n# True if a distinct rectified ROI should be calculated\
    \ from the \"raw\"\n# ROI in this message. Typically this should be False if the\
    \ full image\n# is captured (ROI not used), and True if a subwindow is captured\
    \ (ROI\n# used).\nbool do_rectify\n"
  fields:
  - name: x_offset
    type: uint32
  - name: y_offset
    type: uint32
  - name: height
    type: uint32
  - name: width
    type: uint32
  - name: do_rectify
    type: bool
  name: RegionOfInterest
  package: sensor_msgs
- definition: " # Single photometric illuminance measurement.  Light should be assumed\
    \ to be\n # measured along the sensor's x-axis (the area of detection is the y-z\
    \ plane).\n # The illuminance should have a 0 or positive value and be received\
    \ with\n # the sensor's +X axis pointing toward the light source.\n\n # Photometric\
    \ illuminance is the measure of the human eye's sensitivity of the\n # intensity\
    \ of light encountering or passing through a surface.\n\n # All other Photometric\
    \ and Radiometric measurements should\n # not use this message.\n # This message\
    \ cannot represent:\n # Luminous intensity (candela/light source output)\n # Luminance\
    \ (nits/light output per area)\n # Irradiance (watt/area), etc.\n\n Header header\
    \           # timestamp is the time the illuminance was measured\n           \
    \              # frame_id is the location and direction of the reading\n\n float64\
    \ illuminance     # Measurement of the Photometric Illuminance in Lux.\n\n float64\
    \ variance        # 0 is interpreted as variance unknown"
  fields:
  - name: header
    type: std_msgs/Header
  - name: illuminance
    type: float64
  - name: variance
    type: float64
  name: Illuminance
  package: sensor_msgs
- definition: int64 sum
  fields:
  - name: sum
    type: int64
  name: TwoIntsResult
  package: actionlib
- definition: '# This represents an estimated twist with reference coordinate frame
    and timestamp.

    Header header

    TwistWithCovariance twist

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: twist
    type: geometry_msgs/TwistWithCovariance
  name: TwistWithCovarianceStamped
  package: geometry_msgs
- definition: " # Single reading from a relative humidity sensor.  Defines the ratio\
    \ of partial\n # pressure of water vapor to the saturated vapor pressure at a\
    \ temperature.\n\n Header header             # timestamp of the measurement\n\
    \                           # frame_id is the location of the humidity sensor\n\
    \n float64 relative_humidity # Expression of the relative humidity\n         \
    \                  # from 0.0 to 1.0.\n                           # 0.0 is no\
    \ partial pressure of water vapor\n                           # 1.0 represents\
    \ partial pressure of saturation\n\n float64 variance          # 0 is interpreted\
    \ as variance unknown"
  fields:
  - name: header
    type: std_msgs/Header
  - name: relative_humidity
    type: float64
  - name: variance
    type: float64
  name: RelativeHumidity
  package: sensor_msgs
- definition: 'uint8 r

    uint8 g

    uint8 b

    uint8 width

    uint8 off'
  fields:
  - name: r
    type: uint8
  - name: g
    type: uint8
  - name: b
    type: uint8
  - name: width
    type: uint8
  - name: 'off'
    type: uint8
  name: SetPenRequest
  package: turtlesim
- definition: 'bool data # e.g. for hardware enabling / disabling'
  fields:
  - name: data
    type: bool
  name: SetBoolRequest
  package: std_srvs
- definition: '# This represents an orientation with reference coordinate frame and
    timestamp.


    Header header

    Quaternion quaternion

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: quaternion
    type: geometry_msgs/Quaternion
  name: QuaternionStamped
  package: geometry_msgs
- constants:
  - name: POWER_SUPPLY_STATUS_UNKNOWN
    type: uint8
    value: '0'
  - name: POWER_SUPPLY_STATUS_CHARGING
    type: uint8
    value: '1'
  - name: POWER_SUPPLY_STATUS_DISCHARGING
    type: uint8
    value: '2'
  - name: POWER_SUPPLY_STATUS_NOT_CHARGING
    type: uint8
    value: '3'
  - name: POWER_SUPPLY_STATUS_FULL
    type: uint8
    value: '4'
  - name: POWER_SUPPLY_HEALTH_UNKNOWN
    type: uint8
    value: '0'
  - name: POWER_SUPPLY_HEALTH_GOOD
    type: uint8
    value: '1'
  - name: POWER_SUPPLY_HEALTH_OVERHEAT
    type: uint8
    value: '2'
  - name: POWER_SUPPLY_HEALTH_DEAD
    type: uint8
    value: '3'
  - name: POWER_SUPPLY_HEALTH_OVERVOLTAGE
    type: uint8
    value: '4'
  - name: POWER_SUPPLY_HEALTH_UNSPEC_FAILURE
    type: uint8
    value: '5'
  - name: POWER_SUPPLY_HEALTH_COLD
    type: uint8
    value: '6'
  - name: POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE
    type: uint8
    value: '7'
  - name: POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE
    type: uint8
    value: '8'
  - name: POWER_SUPPLY_TECHNOLOGY_UNKNOWN
    type: uint8
    value: '0'
  - name: POWER_SUPPLY_TECHNOLOGY_NIMH
    type: uint8
    value: '1'
  - name: POWER_SUPPLY_TECHNOLOGY_LION
    type: uint8
    value: '2'
  - name: POWER_SUPPLY_TECHNOLOGY_LIPO
    type: uint8
    value: '3'
  - name: POWER_SUPPLY_TECHNOLOGY_LIFE
    type: uint8
    value: '4'
  - name: POWER_SUPPLY_TECHNOLOGY_NICD
    type: uint8
    value: '5'
  - name: POWER_SUPPLY_TECHNOLOGY_LIMN
    type: uint8
    value: '6'
  definition: "\n# Constants are chosen to match the enums in the linux kernel\n#\
    \ defined in include/linux/power_supply.h as of version 3.7\n# The one difference\
    \ is for style reasons the constants are\n# all uppercase not mixed case.\n\n\
    # Power supply status constants\nuint8 POWER_SUPPLY_STATUS_UNKNOWN = 0\nuint8\
    \ POWER_SUPPLY_STATUS_CHARGING = 1\nuint8 POWER_SUPPLY_STATUS_DISCHARGING = 2\n\
    uint8 POWER_SUPPLY_STATUS_NOT_CHARGING = 3\nuint8 POWER_SUPPLY_STATUS_FULL = 4\n\
    \n# Power supply health constants\nuint8 POWER_SUPPLY_HEALTH_UNKNOWN = 0\nuint8\
    \ POWER_SUPPLY_HEALTH_GOOD = 1\nuint8 POWER_SUPPLY_HEALTH_OVERHEAT = 2\nuint8\
    \ POWER_SUPPLY_HEALTH_DEAD = 3\nuint8 POWER_SUPPLY_HEALTH_OVERVOLTAGE = 4\nuint8\
    \ POWER_SUPPLY_HEALTH_UNSPEC_FAILURE = 5\nuint8 POWER_SUPPLY_HEALTH_COLD = 6\n\
    uint8 POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE = 7\nuint8 POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE\
    \ = 8\n\n# Power supply technology (chemistry) constants\nuint8 POWER_SUPPLY_TECHNOLOGY_UNKNOWN\
    \ = 0\nuint8 POWER_SUPPLY_TECHNOLOGY_NIMH = 1\nuint8 POWER_SUPPLY_TECHNOLOGY_LION\
    \ = 2\nuint8 POWER_SUPPLY_TECHNOLOGY_LIPO = 3\nuint8 POWER_SUPPLY_TECHNOLOGY_LIFE\
    \ = 4\nuint8 POWER_SUPPLY_TECHNOLOGY_NICD = 5\nuint8 POWER_SUPPLY_TECHNOLOGY_LIMN\
    \ = 6\n\nHeader  header\nfloat32 voltage          # Voltage in Volts (Mandatory)\n\
    float32 current          # Negative when discharging (A)  (If unmeasured NaN)\n\
    float32 charge           # Current charge in Ah  (If unmeasured NaN)\nfloat32\
    \ capacity         # Capacity in Ah (last full capacity)  (If unmeasured NaN)\n\
    float32 design_capacity  # Capacity in Ah (design capacity)  (If unmeasured NaN)\n\
    float32 percentage       # Charge percentage on 0 to 1 range  (If unmeasured NaN)\n\
    uint8   power_supply_status     # The charging status as reported. Values defined\
    \ above\nuint8   power_supply_health     # The battery health metric. Values defined\
    \ above\nuint8   power_supply_technology # The battery chemistry. Values defined\
    \ above\nbool    present          # True if the battery is present\n\nfloat32[]\
    \ cell_voltage   # An array of individual cell voltages for each cell in the pack\n\
    \                         # If individual voltages unknown but number of cells\
    \ known set each to NaN\nstring location          # The location into which the\
    \ battery is inserted. (slot number or plug)\nstring serial_number     # The best\
    \ approximation of the battery serial number\n"
  fields:
  - name: header
    type: std_msgs/Header
  - name: voltage
    type: float32
  - name: current
    type: float32
  - name: charge
    type: float32
  - name: capacity
    type: float32
  - name: design_capacity
    type: float32
  - name: percentage
    type: float32
  - name: power_supply_status
    type: uint8
  - name: power_supply_health
    type: uint8
  - name: power_supply_technology
    type: uint8
  - name: present
    type: bool
  - name: cell_voltage
    type: float32[]
  - name: location
    type: string
  - name: serial_number
    type: string
  name: BatteryState
  package: sensor_msgs
- definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


    Header header

    actionlib_msgs/GoalStatus status

    TestResult result

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: status
    type: actionlib_msgs/GoalStatus
  - name: result
    type: actionlib/TestResult
  name: TestActionResult
  package: actionlib
- definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


    Header header

    actionlib_msgs/GoalStatus status

    TwoIntsResult result

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: status
    type: actionlib_msgs/GoalStatus
  - name: result
    type: actionlib/TwoIntsResult
  name: TwoIntsActionResult
  package: actionlib
- definition: string[] nodelets
  fields:
  - name: nodelets
    type: string[]
  name: NodeletListResponse
  package: nodelet
- definition: string prev_topic
  fields:
  - name: prev_topic
    type: string
  name: MuxSelectResponse
  package: topic_tools
- definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

    nav_msgs/OccupancyGrid map

    '
  fields:
  - name: map
    type: nav_msgs/OccupancyGrid
  name: GetMapResult
  package: nav_msgs
- definition: string[] topics
  fields:
  - name: topics
    type: string[]
  name: MuxListResponse
  package: topic_tools
- constants:
  - name: KEEP_ALIVE
    type: uint8
    value: '0'
  - name: UPDATE
    type: uint8
    value: '1'
  definition: "# Identifying string. Must be unique in the topic namespace\n# that\
    \ this server works on.\nstring server_id\n\n# Sequence number.\n# The client\
    \ will use this to detect if it has missed an update.\nuint64 seq_num\n\n# Type\
    \ holds the purpose of this message.  It must be one of UPDATE or KEEP_ALIVE.\n\
    # UPDATE: Incremental update to previous state. \n#         The sequence number\
    \ must be 1 higher than for\n#         the previous update.\n# KEEP_ALIVE: Indicates\
    \ the that the server is still living.\n#             The sequence number does\
    \ not increase.\n#             No payload data should be filled out (markers,\
    \ poses, or erases).\nuint8 KEEP_ALIVE = 0\nuint8 UPDATE = 1\n\nuint8 type\n\n\
    #Note: No guarantees on the order of processing.\n#      Contents must be kept\
    \ consistent by sender.\n\n#Markers to be added or updated\nInteractiveMarker[]\
    \ markers\n\n#Poses of markers that should be moved\nInteractiveMarkerPose[] poses\n\
    \n#Names of markers to be erased\nstring[] erases\n"
  fields:
  - name: server_id
    type: string
  - name: seq_num
    type: uint64
  - name: type
    type: uint8
  - name: markers
    type: visualization_msgs/InteractiveMarker[]
  - name: poses
    type: visualization_msgs/InteractiveMarkerPose[]
  - name: erases
    type: string[]
  name: InteractiveMarkerUpdate
  package: visualization_msgs
- definition: '# This represents an orientation in free space in quaternion form.


    float64 x

    float64 y

    float64 z

    float64 w

    '
  fields:
  - name: x
    type: float64
  - name: y
    type: float64
  - name: z
    type: float64
  - name: w
    type: float64
  name: Quaternion
  package: geometry_msgs
- definition: 'float32 x

    float32 y

    float32 theta

    string name # Optional.  A unique name will be created and returned if this is
    empty'
  fields:
  - name: x
    type: float32
  - name: y
    type: float32
  - name: theta
    type: float32
  - name: name
    type: string
  name: SpawnRequest
  package: turtlesim
- definition: '# This represents a pose in free space with uncertainty.


    Pose pose


    # Row-major representation of the 6x6 covariance matrix

    # The orientation parameters use a fixed-axis representation.

    # In order, the parameters are:

    # (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)

    float64[36] covariance

    '
  fields:
  - name: pose
    type: geometry_msgs/Pose
  - name: covariance
    type: float64[36]
  name: PoseWithCovariance
  package: geometry_msgs
- definition: '# An array of poses with a header for global reference.


    Header header


    Pose[] poses

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: poses
    type: geometry_msgs/Pose[]
  name: PoseArray
  package: geometry_msgs
- definition: '# This message holds a collection of 3d points, plus optional additional

    # information about each point.


    # Time of sensor data acquisition, coordinate frame ID.

    Header header


    # Array of 3d points. Each Point32 should be interpreted as a 3d point

    # in the frame given in the header.

    geometry_msgs/Point32[] points


    # Each channel should have the same number of elements as points array,

    # and the data in each channel should correspond 1:1 with each point.

    # Channel names in common practice are listed in ChannelFloat32.msg.

    ChannelFloat32[] channels

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: points
    type: geometry_msgs/Point32[]
  - name: channels
    type: sensor_msgs/ChannelFloat32[]
  name: PointCloud
  package: sensor_msgs
- definition: nav_msgs/Path plan
  fields:
  - name: plan
    type: nav_msgs/Path
  name: GetPlanResponse
  package: nav_msgs
- definition: '# Get the map as a nav_msgs/OccupancyGrid'
  name: GetMapRequest
  package: nav_msgs
- definition: string topic
  fields:
  - name: topic
    type: string
  name: DemuxAddRequest
  package: topic_tools
- definition: "# This is a message that holds data to describe the state of a set\
    \ of torque controlled joints. \n#\n# The state of each joint (revolute or prismatic)\
    \ is defined by:\n#  * the position of the joint (rad or m),\n#  * the velocity\
    \ of the joint (rad/s or m/s) and \n#  * the effort that is applied in the joint\
    \ (Nm or N).\n#\n# Each joint is uniquely identified by its name\n# The header\
    \ specifies the time at which the joint states were recorded. All the joint states\n\
    # in one message have to be recorded at the same time.\n#\n# This message consists\
    \ of a multiple arrays, one for each part of the joint state. \n# The goal is\
    \ to make each of the fields optional. When e.g. your joints have no\n# effort\
    \ associated with them, you can leave the effort array empty. \n#\n# All arrays\
    \ in this message should have the same size, or be empty.\n# This is the only\
    \ way to uniquely associate the joint name with the correct\n# states.\n\n\nHeader\
    \ header\n\nstring[] name\nfloat64[] position\nfloat64[] velocity\nfloat64[] effort\n"
  fields:
  - name: header
    type: std_msgs/Header
  - name: name
    type: string[]
  - name: position
    type: float64[]
  - name: velocity
    type: float64[]
  - name: effort
    type: float64[]
  name: JointState
  package: sensor_msgs
- definition: "# This message contains a compressed image\n\nHeader header       \
    \ # Header timestamp should be acquisition time of image\n                   \
    \  # Header frame_id should be optical frame of camera\n                     #\
    \ origin of frame should be optical center of cameara\n                     #\
    \ +x should point to the right in the image\n                     # +y should\
    \ point down in the image\n                     # +z should point into to plane\
    \ of the image\n\nstring format        # Specifies the format of the data\n  \
    \                   #   Acceptable values:\n                     #     jpeg, png\n\
    uint8[] data         # Compressed image buffer\n"
  fields:
  - name: header
    type: std_msgs/Header
  - name: format
    type: string
  - name: data
    type: uint8[]
  name: CompressedImage
  package: sensor_msgs
- definition: '# Time/frame info.

    # If header.time is set to 0, the marker will be retransformed into

    # its frame on each timestep. You will receive the pose feedback

    # in the same frame.

    # Otherwise, you might receive feedback in a different frame.

    # For rviz, this will be the current ''fixed frame'' set by the user.

    Header header


    # Initial pose. Also, defines the pivot point for rotations.

    geometry_msgs/Pose pose


    # Identifying string. Must be globally unique in

    # the topic that this message is sent through.

    string name


    # Short description (< 40 characters).

    string description


    # Scale to be used for default controls (default=1).

    float32 scale


    # All menu and submenu entries associated with this marker.

    MenuEntry[] menu_entries


    # List of controls displayed for this marker.

    InteractiveMarkerControl[] controls

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: pose
    type: geometry_msgs/Pose
  - name: name
    type: string
  - name: description
    type: string
  - name: scale
    type: float32
  - name: menu_entries
    type: visualization_msgs/MenuEntry[]
  - name: controls
    type: visualization_msgs/InteractiveMarkerControl[]
  name: InteractiveMarker
  package: visualization_msgs
- definition: "# Reports the state of a joysticks axes and buttons.\nHeader header\
    \           # timestamp in the header is the time the data is received from the\
    \ joystick\nfloat32[] axes          # the axes measurements from a joystick\n\
    int32[] buttons         # the buttons measurements from a joystick \n"
  fields:
  - name: header
    type: std_msgs/Header
  - name: axes
    type: float32[]
  - name: buttons
    type: int32[]
  name: Joy
  package: sensor_msgs
- constants:
  - name: INHERIT
    type: uint8
    value: '0 '
  - name: FIXED
    type: uint8
    value: '1'
  - name: VIEW_FACING
    type: uint8
    value: '2'
  - name: NONE
    type: uint8
    value: '0 '
  - name: MENU
    type: uint8
    value: '1'
  - name: BUTTON
    type: uint8
    value: '2'
  - name: MOVE_AXIS
    type: uint8
    value: '3 '
  - name: MOVE_PLANE
    type: uint8
    value: '4'
  - name: ROTATE_AXIS
    type: uint8
    value: '5'
  - name: MOVE_ROTATE
    type: uint8
    value: '6'
  - name: MOVE_3D
    type: uint8
    value: '7'
  - name: ROTATE_3D
    type: uint8
    value: '8'
  - name: MOVE_ROTATE_3D
    type: uint8
    value: '9'
  definition: "# Represents a control that is to be displayed together with an interactive\
    \ marker\n\n# Identifying string for this control.\n# You need to assign a unique\
    \ value to this to receive feedback from the GUI\n# on what actions the user performs\
    \ on this control (e.g. a button click).\nstring name\n\n\n# Defines the local\
    \ coordinate frame (relative to the pose of the parent\n# interactive marker)\
    \ in which is being rotated and translated.\n# Default: Identity\ngeometry_msgs/Quaternion\
    \ orientation\n\n\n# Orientation mode: controls how orientation changes.\n# INHERIT:\
    \ Follow orientation of interactive marker\n# FIXED: Keep orientation fixed at\
    \ initial state\n# VIEW_FACING: Align y-z plane with screen (x: forward, y:left,\
    \ z:up).\nuint8 INHERIT = 0 \nuint8 FIXED = 1\nuint8 VIEW_FACING = 2\n\nuint8\
    \ orientation_mode\n\n# Interaction mode for this control\n# \n# NONE: This control\
    \ is only meant for visualization; no context menu.\n# MENU: Like NONE, but right-click\
    \ menu is active.\n# BUTTON: Element can be left-clicked.\n# MOVE_AXIS: Translate\
    \ along local x-axis.\n# MOVE_PLANE: Translate in local y-z plane.\n# ROTATE_AXIS:\
    \ Rotate around local x-axis.\n# MOVE_ROTATE: Combines MOVE_PLANE and ROTATE_AXIS.\n\
    uint8 NONE = 0 \nuint8 MENU = 1\nuint8 BUTTON = 2\nuint8 MOVE_AXIS = 3 \nuint8\
    \ MOVE_PLANE = 4\nuint8 ROTATE_AXIS = 5\nuint8 MOVE_ROTATE = 6\n# \"3D\" interaction\
    \ modes work with the mouse+SHIFT+CTRL or with 3D cursors.\n# MOVE_3D: Translate\
    \ freely in 3D space.\n# ROTATE_3D: Rotate freely in 3D space about the origin\
    \ of parent frame.\n# MOVE_ROTATE_3D: Full 6-DOF freedom of translation and rotation\
    \ about the cursor origin.\nuint8 MOVE_3D = 7\nuint8 ROTATE_3D = 8\nuint8 MOVE_ROTATE_3D\
    \ = 9\n\nuint8 interaction_mode\n\n\n# If true, the contained markers will also\
    \ be visible\n# when the gui is not in interactive mode.\nbool always_visible\n\
    \n\n# Markers to be displayed as custom visual representation.\n# Leave this empty\
    \ to use the default control handles.\n#\n# Note: \n# - The markers can be defined\
    \ in an arbitrary coordinate frame,\n#   but will be transformed into the local\
    \ frame of the interactive marker.\n# - If the header of a marker is empty, its\
    \ pose will be interpreted as \n#   relative to the pose of the parent interactive\
    \ marker.\nMarker[] markers\n\n\n# In VIEW_FACING mode, set this to true if you\
    \ don't want the markers\n# to be aligned with the camera view point. The markers\
    \ will show up\n# as in INHERIT mode.\nbool independent_marker_orientation\n\n\
    \n# Short description (< 40 characters) of what this control does,\n# e.g. \"\
    Move the robot\". \n# Default: A generic description based on the interaction\
    \ mode\nstring description\n"
  fields:
  - name: name
    type: string
  - name: orientation
    type: geometry_msgs/Quaternion
  - name: orientation_mode
    type: uint8
  - name: interaction_mode
    type: uint8
  - name: always_visible
    type: bool
  - name: markers
    type: visualization_msgs/Marker[]
  - name: independent_marker_orientation
    type: bool
  - name: description
    type: string
  name: InteractiveMarkerControl
  package: visualization_msgs
- definition: string[] topics
  fields:
  - name: topics
    type: string[]
  name: DemuxListResponse
  package: topic_tools
- definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


    TwoIntsActionGoal action_goal

    TwoIntsActionResult action_result

    TwoIntsActionFeedback action_feedback

    '
  fields:
  - name: action_goal
    type: actionlib/TwoIntsActionGoal
  - name: action_result
    type: actionlib/TwoIntsActionResult
  - name: action_feedback
    type: actionlib/TwoIntsActionFeedback
  name: TwoIntsAction
  package: actionlib
- definition: 'string name

    float64 value

    '
  fields:
  - name: name
    type: string
  - name: value
    type: float64
  name: DoubleParameter
  package: dynamic_reconfigure
- definition: '# Each trajectory point specifies either positions[, velocities[, accelerations]]

    # or positions[, effort] for the trajectory to be executed.

    # All specified values are in the same order as the joint names in JointTrajectory.msg


    float64[] positions

    float64[] velocities

    float64[] accelerations

    float64[] effort

    duration time_from_start

    '
  fields:
  - name: positions
    type: float64[]
  - name: velocities
    type: float64[]
  - name: accelerations
    type: float64[]
  - name: effort
    type: float64[]
  - name: time_from_start
    type: duration
  name: JointTrajectoryPoint
  package: trajectory_msgs
- definition: 'int16 data

    '
  fields:
  - name: data
    type: int16
  name: Int16
  package: std_msgs
- definition: 'Header header

    string data

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: data
    type: string
  name: HeaderString
  package: rospy_tutorials
- definition: '# This message holds a collection of N-dimensional points, which may

    # contain additional information such as normals, intensity, etc. The

    # point data is stored as a binary blob, its layout described by the

    # contents of the "fields" array.


    # The point cloud data may be organized 2d (image-like) or 1d

    # (unordered). Point clouds organized as 2d images may be produced by

    # camera depth sensors such as stereo or time-of-flight.


    # Time of sensor data acquisition, and the coordinate frame ID (for 3d

    # points).

    Header header


    # 2D structure of the point cloud. If the cloud is unordered, height is

    # 1 and width is the length of the point cloud.

    uint32 height

    uint32 width


    # Describes the channels and their layout in the binary data blob.

    PointField[] fields


    bool    is_bigendian # Is this data bigendian?

    uint32  point_step   # Length of a point in bytes

    uint32  row_step     # Length of a row in bytes

    uint8[] data         # Actual point data, size is (row_step*height)


    bool is_dense        # True if there are no invalid points

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: height
    type: uint32
  - name: width
    type: uint32
  - name: fields
    type: sensor_msgs/PointField[]
  - name: is_bigendian
    type: bool
  - name: point_step
    type: uint32
  - name: row_step
    type: uint32
  - name: data
    type: uint8[]
  - name: is_dense
    type: bool
  name: PointCloud2
  package: sensor_msgs
- definition: "# This represents an estimate of a position and velocity in free space.\
    \  \n# The pose in this message should be specified in the coordinate frame given\
    \ by header.frame_id.\n# The twist in this message should be specified in the\
    \ coordinate frame given by the child_frame_id\nHeader header\nstring child_frame_id\n\
    geometry_msgs/PoseWithCovariance pose\ngeometry_msgs/TwistWithCovariance twist\n"
  fields:
  - name: header
    type: std_msgs/Header
  - name: child_frame_id
    type: string
  - name: pose
    type: geometry_msgs/PoseWithCovariance
  - name: twist
    type: geometry_msgs/TwistWithCovariance
  name: Odometry
  package: nav_msgs
- definition: bool data
  fields:
  - name: data
    type: bool
  name: Bool
  package: std_msgs
- definition: '# Please look at the MultiArrayLayout message definition for

    # documentation on all multiarrays.


    MultiArrayLayout  layout        # specification of data layout

    uint32[]          data          # array of data


    '
  fields:
  - name: layout
    type: std_msgs/MultiArrayLayout
  - name: data
    type: uint32[]
  name: UInt32MultiArray
  package: std_msgs
- definition: '# This hold basic information about the characterists of the OccupancyGrid


    # The time at which the map was loaded

    time map_load_time

    # The map resolution [m/cell]

    float32 resolution

    # Map width [cells]

    uint32 width

    # Map height [cells]

    uint32 height

    # The origin of the map [m, m, rad].  This is the real-world pose of the

    # cell (0,0) in the map.

    geometry_msgs/Pose origin'
  fields:
  - name: map_load_time
    type: time
  - name: resolution
    type: float32
  - name: width
    type: uint32
  - name: height
    type: uint32
  - name: origin
    type: geometry_msgs/Pose
  name: MapMetaData
  package: nav_msgs
- definition: "# Get a plan from the current position to the goal Pose \n\n# The start\
    \ pose for the plan\ngeometry_msgs/PoseStamped start\n\n# The final pose of the\
    \ goal position\ngeometry_msgs/PoseStamped goal\n\n# If the goal is obstructed,\
    \ how many meters the planner can \n# relax the constraint in x and y before failing.\
    \ \nfloat32 tolerance"
  fields:
  - name: start
    type: geometry_msgs/PoseStamped
  - name: goal
    type: geometry_msgs/PoseStamped
  - name: tolerance
    type: float32
  name: GetPlanRequest
  package: nav_msgs
- definition: string prev_topic
  fields:
  - name: prev_topic
    type: string
  name: DemuxSelectResponse
  package: topic_tools
- constants:
  - name: STATUS_NO_FIX
    type: int8
    value: '-1        # unable to fix position'
  - name: STATUS_FIX
    type: int8
    value: '0        # unaugmented fix'
  - name: STATUS_SBAS_FIX
    type: int8
    value: '1        # with satellite-based augmentation'
  - name: STATUS_GBAS_FIX
    type: int8
    value: '2        # with ground-based augmentation'
  - name: SERVICE_GPS
    type: uint16
    value: '1'
  - name: SERVICE_GLONASS
    type: uint16
    value: '2'
  - name: SERVICE_COMPASS
    type: uint16
    value: '4      # includes BeiDou.'
  - name: SERVICE_GALILEO
    type: uint16
    value: '8'
  definition: '# Navigation Satellite fix status for any Global Navigation Satellite
    System


    # Whether to output an augmented fix is determined by both the fix

    # type and the last time differential corrections were received.  A

    # fix is valid when status >= STATUS_FIX.


    int8 STATUS_NO_FIX =  -1        # unable to fix position

    int8 STATUS_FIX =      0        # unaugmented fix

    int8 STATUS_SBAS_FIX = 1        # with satellite-based augmentation

    int8 STATUS_GBAS_FIX = 2        # with ground-based augmentation


    int8 status


    # Bits defining which Global Navigation Satellite System signals were

    # used by the receiver.


    uint16 SERVICE_GPS =     1

    uint16 SERVICE_GLONASS = 2

    uint16 SERVICE_COMPASS = 4      # includes BeiDou.

    uint16 SERVICE_GALILEO = 8


    uint16 service

    '
  fields:
  - name: status
    type: int8
  - name: service
    type: uint16
  name: NavSatStatus
  package: sensor_msgs
- definition: string topic
  fields:
  - name: topic
    type: string
  name: MuxAddRequest
  package: topic_tools
- definition: '# This message is used to send diagnostic information about the state
    of the robot

    Header header #for timestamp

    DiagnosticStatus[] status # an array of components being reported on'
  fields:
  - name: header
    type: std_msgs/Header
  - name: status
    type: diagnostic_msgs/DiagnosticStatus[]
  name: DiagnosticArray
  package: diagnostic_msgs
- definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


    '
  name: TwoIntsFeedback
  package: actionlib
- definition: 'string name

    string type

    uint32 level

    string description

    string edit_method

    '
  fields:
  - name: name
    type: string
  - name: type
    type: string
  - name: level
    type: uint32
  - name: description
    type: string
  - name: edit_method
    type: string
  name: ParamDescription
  package: dynamic_reconfigure
- definition: '# True if diagnostic aggregator was updated with new diagnostics, False

    # otherwise. A false return value means that either there is a bond in the

    # aggregator which already used the requested namespace, or the initialization

    # of analyzers failed.

    bool success


    # Message with additional information about the success or failure

    string message'
  fields:
  - name: success
    type: bool
  - name: message
    type: string
  name: AddDiagnosticsResponse
  package: diagnostic_msgs
- definition: "# Single scan from a planar laser range-finder\n#\n# If you have another\
    \ ranging device with different behavior (e.g. a sonar\n# array), please find\
    \ or create a different message, since applications\n# will make fairly laser-specific\
    \ assumptions about this data\n\nHeader header            # timestamp in the header\
    \ is the acquisition time of \n                         # the first ray in the\
    \ scan.\n                         #\n                         # in frame frame_id,\
    \ angles are measured around \n                         # the positive Z axis\
    \ (counterclockwise, if Z is up)\n                         # with zero angle being\
    \ forward along the x axis\n                         \nfloat32 angle_min     \
    \   # start angle of the scan [rad]\nfloat32 angle_max        # end angle of the\
    \ scan [rad]\nfloat32 angle_increment  # angular distance between measurements\
    \ [rad]\n\nfloat32 time_increment   # time between measurements [seconds] - if\
    \ your scanner\n                         # is moving, this will be used in interpolating\
    \ position\n                         # of 3d points\nfloat32 scan_time       \
    \ # time between scans [seconds]\n\nfloat32 range_min        # minimum range value\
    \ [m]\nfloat32 range_max        # maximum range value [m]\n\nfloat32[] ranges\
    \         # range data [m] (Note: values < range_min or > range_max should be\
    \ discarded)\nfloat32[] intensities    # intensity data [device-specific units].\
    \  If your\n                         # device does not provide intensities, please\
    \ leave\n                         # the array empty.\n"
  fields:
  - name: header
    type: std_msgs/Header
  - name: angle_min
    type: float32
  - name: angle_max
    type: float32
  - name: angle_increment
    type: float32
  - name: time_increment
    type: float32
  - name: scan_time
    type: float32
  - name: range_min
    type: float32
  - name: range_max
    type: float32
  - name: ranges
    type: float32[]
  - name: intensities
    type: float32[]
  name: LaserScan
  package: sensor_msgs
- definition: string name
  fields:
  - name: name
    type: string
  name: SpawnResponse
  package: turtlesim
- definition: "# A representation of pose in free space, composed of postion and orientation.\
    \ \nPoint position\nQuaternion orientation\n"
  fields:
  - name: position
    type: geometry_msgs/Point
  - name: orientation
    type: geometry_msgs/Quaternion
  name: Pose
  package: geometry_msgs
- definition: '# This contains the position of a point in free space

    float64 x

    float64 y

    float64 z

    '
  fields:
  - name: x
    type: float64
  - name: y
    type: float64
  - name: z
    type: float64
  name: Point
  package: geometry_msgs
- definition: "# This message defines meta information for a camera. It should be\
    \ in a\n# camera namespace on topic \"camera_info\" and accompanied by up to five\n\
    # image topics named:\n#\n#   image_raw - raw data from the camera driver, possibly\
    \ Bayer encoded\n#   image            - monochrome, distorted\n#   image_color\
    \      - color, distorted\n#   image_rect       - monochrome, rectified\n#   image_rect_color\
    \ - color, rectified\n#\n# The image_pipeline contains packages (image_proc, stereo_image_proc)\n\
    # for producing the four processed image topics from image_raw and\n# camera_info.\
    \ The meaning of the camera parameters are described in\n# detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.\n\
    #\n# The image_geometry package provides a user-friendly interface to\n# common\
    \ operations using this meta information. If you want to, e.g.,\n# project a 3d\
    \ point into image coordinates, we strongly recommend\n# using image_geometry.\n\
    #\n# If the camera is uncalibrated, the matrices D, K, R, P should be left\n#\
    \ zeroed out. In particular, clients may assume that K[0] == 0.0\n# indicates\
    \ an uncalibrated camera.\n\n#######################################################################\n\
    #                     Image acquisition info                          #\n#######################################################################\n\
    \n# Time of image acquisition, camera coordinate frame ID\nHeader header    #\
    \ Header timestamp should be acquisition time of image\n                 # Header\
    \ frame_id should be optical frame of camera\n                 # origin of frame\
    \ should be optical center of camera\n                 # +x should point to the\
    \ right in the image\n                 # +y should point down in the image\n \
    \                # +z should point into the plane of the image\n\n\n#######################################################################\n\
    #                      Calibration Parameters                         #\n#######################################################################\n\
    # These are fixed during camera calibration. Their values will be the #\n# same\
    \ in all messages until the camera is recalibrated. Note that    #\n# self-calibrating\
    \ systems may \"recalibrate\" frequently.              #\n#                  \
    \                                                   #\n# The internal parameters\
    \ can be used to warp a raw (distorted) image #\n# to:                       \
    \                                          #\n#   1. An undistorted image (requires\
    \ D and K)                        #\n#   2. A rectified image (requires D, K,\
    \ R)                           #\n# The projection matrix P projects 3D points\
    \ into the rectified image.#\n#######################################################################\n\
    \n# The image dimensions with which the camera was calibrated. Normally\n# this\
    \ will be the full camera resolution in pixels.\nuint32 height\nuint32 width\n\
    \n# The distortion model used. Supported models are listed in\n# sensor_msgs/distortion_models.h.\
    \ For most cameras, \"plumb_bob\" - a\n# simple model of radial and tangential\
    \ distortion - is sufficent.\nstring distortion_model\n\n# The distortion parameters,\
    \ size depending on the distortion model.\n# For \"plumb_bob\", the 5 parameters\
    \ are: (k1, k2, t1, t2, k3).\nfloat64[] D\n\n# Intrinsic camera matrix for the\
    \ raw (distorted) images.\n#     [fx  0 cx]\n# K = [ 0 fy cy]\n#     [ 0  0  1]\n\
    # Projects 3D points in the camera coordinate frame to 2D pixel\n# coordinates\
    \ using the focal lengths (fx, fy) and principal point\n# (cx, cy).\nfloat64[9]\
    \  K # 3x3 row-major matrix\n\n# Rectification matrix (stereo cameras only)\n\
    # A rotation matrix aligning the camera coordinate system to the ideal\n# stereo\
    \ image plane so that epipolar lines in both stereo images are\n# parallel.\n\
    float64[9]  R # 3x3 row-major matrix\n\n# Projection/camera matrix\n#     [fx'\
    \  0  cx' Tx]\n# P = [ 0  fy' cy' Ty]\n#     [ 0   0   1   0]\n# By convention,\
    \ this matrix specifies the intrinsic (camera) matrix\n#  of the processed (rectified)\
    \ image. That is, the left 3x3 portion\n#  is the normal camera intrinsic matrix\
    \ for the rectified image.\n# It projects 3D points in the camera coordinate frame\
    \ to 2D pixel\n#  coordinates using the focal lengths (fx', fy') and principal\
    \ point\n#  (cx', cy') - these may differ from the values in K.\n# For monocular\
    \ cameras, Tx = Ty = 0. Normally, monocular cameras will\n#  also have R = the\
    \ identity and P[1:3,1:3] = K.\n# For a stereo pair, the fourth column [Tx Ty\
    \ 0]' is related to the\n#  position of the optical center of the second camera\
    \ in the first\n#  camera's frame. We assume Tz = 0 so both cameras are in the\
    \ same\n#  stereo image plane. The first camera always has Tx = Ty = 0. For\n\
    #  the right (second) camera of a horizontal stereo pair, Ty = 0 and\n#  Tx =\
    \ -fx' * B, where B is the baseline between the cameras.\n# Given a 3D point [X\
    \ Y Z]', the projection (x, y) of the point onto\n#  the rectified image is given\
    \ by:\n#  [u v w]' = P * [X Y Z 1]'\n#         x = u / w\n#         y = v / w\n\
    #  This holds for both images of a stereo pair.\nfloat64[12] P # 3x4 row-major\
    \ matrix\n\n\n#######################################################################\n\
    #                      Operational Parameters                         #\n#######################################################################\n\
    # These define the image region actually captured by the camera       #\n# driver.\
    \ Although they affect the geometry of the output image, they #\n# may be changed\
    \ freely without recalibrating the camera.             #\n#######################################################################\n\
    \n# Binning refers here to any camera setting which combines rectangular\n#  neighborhoods\
    \ of pixels into larger \"super-pixels.\" It reduces the\n#  resolution of the\
    \ output image to\n#  (width / binning_x) x (height / binning_y).\n# The default\
    \ values binning_x = binning_y = 0 is considered the same\n#  as binning_x = binning_y\
    \ = 1 (no subsampling).\nuint32 binning_x\nuint32 binning_y\n\n# Region of interest\
    \ (subwindow of full camera resolution), given in\n#  full resolution (unbinned)\
    \ image coordinates. A particular ROI\n#  always denotes the same window of pixels\
    \ on the camera sensor,\n#  regardless of binning settings.\n# The default setting\
    \ of roi (all values 0) is considered the same as\n#  full resolution (roi.width\
    \ = width, roi.height = height).\nRegionOfInterest roi\n"
  fields:
  - name: header
    type: std_msgs/Header
  - name: height
    type: uint32
  - name: width
    type: uint32
  - name: distortion_model
    type: string
  - name: D
    type: float64[]
  - name: K
    type: float64[9]
  - name: R
    type: float64[9]
  - name: P
    type: float64[12]
  - name: binning_x
    type: uint32
  - name: binning_y
    type: uint32
  - name: roi
    type: sensor_msgs/RegionOfInterest
  name: CameraInfo
  package: sensor_msgs
- definition: '# Set a new map together with an initial pose

    nav_msgs/OccupancyGrid map

    geometry_msgs/PoseWithCovarianceStamped initial_pose'
  fields:
  - name: map
    type: nav_msgs/OccupancyGrid
  - name: initial_pose
    type: geometry_msgs/PoseWithCovarianceStamped
  name: SetMapRequest
  package: nav_msgs
- constants:
  - name: KEEP_ALIVE
    type: uint8
    value: '0'
  - name: POSE_UPDATE
    type: uint8
    value: '1'
  - name: MENU_SELECT
    type: uint8
    value: '2'
  - name: BUTTON_CLICK
    type: uint8
    value: '3'
  - name: MOUSE_DOWN
    type: uint8
    value: '4'
  - name: MOUSE_UP
    type: uint8
    value: '5'
  definition: '# Time/frame info.

    Header header


    # Identifying string. Must be unique in the topic namespace.

    string client_id


    # Feedback message sent back from the GUI, e.g.

    # when the status of an interactive marker was modified by the user.


    # Specifies which interactive marker and control this message refers to

    string marker_name

    string control_name


    # Type of the event

    # KEEP_ALIVE: sent while dragging to keep up control of the marker

    # MENU_SELECT: a menu entry has been selected

    # BUTTON_CLICK: a button control has been clicked

    # POSE_UPDATE: the pose has been changed using one of the controls

    uint8 KEEP_ALIVE = 0

    uint8 POSE_UPDATE = 1

    uint8 MENU_SELECT = 2

    uint8 BUTTON_CLICK = 3


    uint8 MOUSE_DOWN = 4

    uint8 MOUSE_UP = 5


    uint8 event_type


    # Current pose of the marker

    # Note: Has to be valid for all feedback types.

    geometry_msgs/Pose pose


    # Contains the ID of the selected menu entry

    # Only valid for MENU_SELECT events.

    uint32 menu_entry_id


    # If event_type is BUTTON_CLICK, MOUSE_DOWN, or MOUSE_UP, mouse_point

    # may contain the 3 dimensional position of the event on the

    # control.  If it does, mouse_point_valid will be true.  mouse_point

    # will be relative to the frame listed in the header.

    geometry_msgs/Point mouse_point

    bool mouse_point_valid

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: client_id
    type: string
  - name: marker_name
    type: string
  - name: control_name
    type: string
  - name: event_type
    type: uint8
  - name: pose
    type: geometry_msgs/Pose
  - name: menu_entry_id
    type: uint32
  - name: mouse_point
    type: geometry_msgs/Point
  - name: mouse_point_valid
    type: bool
  name: InteractiveMarkerFeedback
  package: visualization_msgs
- definition: bool success
  fields:
  - name: success
    type: bool
  name: NodeletLoadResponse
  package: nodelet
- definition: string topic
  fields:
  - name: topic
    type: string
  name: DemuxDeleteRequest
  package: topic_tools
- definition: string name
  fields:
  - name: name
    type: string
  name: KillRequest
  package: turtlesim
- definition: '# Please look at the MultiArrayLayout message definition for

    # documentation on all multiarrays.


    MultiArrayLayout  layout        # specification of data layout

    int32[]           data          # array of data


    '
  fields:
  - name: layout
    type: std_msgs/MultiArrayLayout
  - name: data
    type: int32[]
  name: Int32MultiArray
  package: std_msgs
- definition: "# Measurement from an external time source not actively synchronized\
    \ with the system clock.\n\nHeader header    # stamp is system time for which\
    \ measurement was valid\n                 # frame_id is not used \n\ntime   time_ref\
    \  # corresponding time from this external source\nstring source    # (optional)\
    \ name of time source\n"
  fields:
  - name: header
    type: std_msgs/Header
  - name: time_ref
    type: time
  - name: source
    type: string
  name: TimeReference
  package: sensor_msgs
- definition: '# Separate header for compatibility with current TimeSynchronizer.

    # Likely to be removed in a later release, use image.header instead.

    Header header


    # Floating point disparity image. The disparities are pre-adjusted for any

    # x-offset between the principal points of the two cameras (in the case

    # that they are verged). That is: d = x_l - x_r - (cx_l - cx_r)

    sensor_msgs/Image image


    # Stereo geometry. For disparity d, the depth from the camera is Z = fT/d.

    float32 f # Focal length, pixels

    float32 T # Baseline, world units


    # Subwindow of (potentially) valid disparity values.

    sensor_msgs/RegionOfInterest valid_window


    # The range of disparities searched.

    # In the disparity image, any disparity less than min_disparity is invalid.

    # The disparity search range defines the horopter, or 3D volume that the

    # stereo algorithm can "see". Points with Z outside of:

    #     Z_min = fT / max_disparity

    #     Z_max = fT / min_disparity

    # could not be found.

    float32 min_disparity

    float32 max_disparity


    # Smallest allowed disparity increment. The smallest achievable depth range

    # resolution is delta_Z = (Z^2/fT)*delta_d.

    float32 delta_d

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: image
    type: sensor_msgs/Image
  - name: f
    type: float32
  - name: T
    type: float32
  - name: valid_window
    type: sensor_msgs/RegionOfInterest
  - name: min_disparity
    type: float32
  - name: max_disparity
    type: float32
  - name: delta_d
    type: float32
  name: DisparityImage
  package: stereo_msgs
- definition: 'float32[] data

    '
  fields:
  - name: data
    type: float32[]
  name: Floats
  package: rospy_tutorials
- definition: '#an array of cells in a 2D grid

    Header header

    float32 cell_width

    float32 cell_height

    geometry_msgs/Point[] cells

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: cell_width
    type: float32
  - name: cell_height
    type: float32
  - name: cells
    type: geometry_msgs/Point[]
  name: GridCells
  package: nav_msgs
- definition: nav_msgs/OccupancyGrid map
  fields:
  - name: map
    type: nav_msgs/OccupancyGrid
  name: GetMapResponse
  package: nav_msgs
- definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


    Header header

    actionlib_msgs/GoalStatus status

    TestFeedback feedback

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: status
    type: actionlib_msgs/GoalStatus
  - name: feedback
    type: actionlib/TestFeedback
  name: TestActionFeedback
  package: actionlib
- definition: 'string name

    bool value

    '
  fields:
  - name: name
    type: string
  - name: value
    type: bool
  name: BoolParameter
  package: dynamic_reconfigure
- definition: 'Header header

    Inertia inertia

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: inertia
    type: geometry_msgs/Inertia
  name: InertiaStamped
  package: geometry_msgs
- definition: '# name of the topic

    string topic


    # node id of the publisher

    string node_pub


    # node id of the subscriber

    string node_sub


    # the statistics apply to this time window

    time window_start

    time window_stop


    # number of messages delivered during the window

    int32 delivered_msgs

    # numbers of messages dropped during the window

    int32 dropped_msgs


    # traffic during the window, in bytes

    int32 traffic


    # mean/stddev/max period between two messages

    duration period_mean

    duration period_stddev

    duration period_max


    # mean/stddev/max age of the message based on the

    # timestamp in the message header. In case the

    # message does not have a header, it will be 0.

    duration stamp_age_mean

    duration stamp_age_stddev

    duration stamp_age_max

    '
  fields:
  - name: topic
    type: string
  - name: node_pub
    type: string
  - name: node_sub
    type: string
  - name: window_start
    type: time
  - name: window_stop
    type: time
  - name: delivered_msgs
    type: int32
  - name: dropped_msgs
    type: int32
  - name: traffic
    type: int32
  - name: period_mean
    type: duration
  - name: period_stddev
    type: duration
  - name: period_max
    type: duration
  - name: stamp_age_mean
    type: duration
  - name: stamp_age_stddev
    type: duration
  - name: stamp_age_max
    type: duration
  name: TopicStatistics
  package: rosgraph_msgs
- definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


    GetMapActionGoal action_goal

    GetMapActionResult action_result

    GetMapActionFeedback action_feedback

    '
  fields:
  - name: action_goal
    type: nav_msgs/GetMapActionGoal
  - name: action_result
    type: nav_msgs/GetMapActionResult
  - name: action_feedback
    type: nav_msgs/GetMapActionFeedback
  name: GetMapAction
  package: nav_msgs
- definition: '# Please look at the MultiArrayLayout message definition for

    # documentation on all multiarrays.


    MultiArrayLayout  layout        # specification of data layout

    float32[]         data          # array of data


    '
  fields:
  - name: layout
    type: std_msgs/MultiArrayLayout
  - name: data
    type: float32[]
  name: Float32MultiArray
  package: std_msgs
- definition: '# This expresses an estimated pose with a reference coordinate frame
    and timestamp


    Header header

    PoseWithCovariance pose

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: pose
    type: geometry_msgs/PoseWithCovariance
  name: PoseWithCovarianceStamped
  package: geometry_msgs
- definition: 'string name

    string type

    string[] remap_source_args

    string[] remap_target_args

    string[] my_argv


    string bond_id'
  fields:
  - name: name
    type: string
  - name: type
    type: string
  - name: remap_source_args
    type: string[]
  - name: remap_target_args
    type: string[]
  - name: my_argv
    type: string[]
  - name: bond_id
    type: string
  name: NodeletLoadRequest
  package: nodelet
- definition: 'bool success   # indicate successful run of triggered service

    string message # informational, e.g. for error messages'
  fields:
  - name: success
    type: bool
  - name: message
    type: string
  name: SetBoolResponse
  package: std_srvs
- definition: 'string data

    '
  fields:
  - name: data
    type: string
  name: String
  package: std_msgs
- definition: 'bool success   # indicate successful run of triggered service

    string message # informational, e.g. for error messages'
  fields:
  - name: success
    type: bool
  - name: message
    type: string
  name: TriggerResponse
  package: std_srvs
- definition: '# This service is used as part of the process for loading analyzers
    at runtime,

    # and should be used by a loader script or program, not as a standalone service.

    # Information about dynamic addition of analyzers can be found at

    # http://wiki.ros.org/diagnostics/Tutorials/Adding%20Analyzers%20at%20Runtime


    # The load_namespace parameter defines the namespace where parameters for the

    # initialization of analyzers in the diagnostic aggregator have been loaded. The

    # value should be a global name (i.e. /my/name/space), not a relative

    # (my/name/space) or private (~my/name/space) name. Analyzers will not be added

    # if a non-global name is used. The call will also fail if the namespace

    # contains parameters that follow a namespace structure that does not conform
    to

    # that expected by the analyzer definitions. See

    # http://wiki.ros.org/diagnostics/Tutorials/Configuring%20Diagnostic%20Aggregators

    # and http://wiki.ros.org/diagnostics/Tutorials/Using%20the%20GenericAnalyzer

    # for examples of the structure of yaml files which are expected to have been

    # loaded into the namespace.

    string load_namespace'
  fields:
  - name: load_namespace
    type: string
  name: AddDiagnosticsRequest
  package: diagnostic_msgs
- definition: '# This message is used by the PointCloud message to hold optional data

    # associated with each point in the cloud. The length of the values

    # array should be the same as the length of the points array in the

    # PointCloud, and each value should be associated with the corresponding

    # point.


    # Channel names in existing practice include:

    #   "u", "v" - row and column (respectively) in the left stereo image.

    #              This is opposite to usual conventions but remains for

    #              historical reasons. The newer PointCloud2 message has no

    #              such problem.

    #   "rgb" - For point clouds produced by color stereo cameras. uint8

    #           (R,G,B) values packed into the least significant 24 bits,

    #           in order.

    #   "intensity" - laser or pixel intensity.

    #   "distance"


    # The channel name should give semantics of the channel (e.g.

    # "intensity" instead of "value").

    string name


    # The values array should be 1-1 with the elements of the associated

    # PointCloud.

    float32[] values

    '
  fields:
  - name: name
    type: string
  - name: values
    type: float32[]
  name: ChannelFloat32
  package: sensor_msgs
- definition: bool success
  fields:
  - name: success
    type: bool
  name: SetMapResponse
  package: nav_msgs
- constants:
  - name: BOX
    type: uint8
    value: '1'
  - name: SPHERE
    type: uint8
    value: '2'
  - name: CYLINDER
    type: uint8
    value: '3'
  - name: CONE
    type: uint8
    value: '4'
  - name: BOX_X
    type: uint8
    value: '0'
  - name: BOX_Y
    type: uint8
    value: '1'
  - name: BOX_Z
    type: uint8
    value: '2'
  - name: SPHERE_RADIUS
    type: uint8
    value: '0'
  - name: CYLINDER_HEIGHT
    type: uint8
    value: '0'
  - name: CYLINDER_RADIUS
    type: uint8
    value: '1'
  - name: CONE_HEIGHT
    type: uint8
    value: '0'
  - name: CONE_RADIUS
    type: uint8
    value: '1'
  definition: "# Define box, sphere, cylinder, cone \n# All shapes are defined to\
    \ have their bounding boxes centered around 0,0,0.\n\nuint8 BOX=1\nuint8 SPHERE=2\n\
    uint8 CYLINDER=3\nuint8 CONE=4\n\n# The type of the shape\nuint8 type\n\n\n# The\
    \ dimensions of the shape\nfloat64[] dimensions\n\n# The meaning of the shape\
    \ dimensions: each constant defines the index in the 'dimensions' array\n\n# For\
    \ the BOX type, the X, Y, and Z dimensions are the length of the corresponding\n\
    # sides of the box.\nuint8 BOX_X=0\nuint8 BOX_Y=1\nuint8 BOX_Z=2\n\n\n# For the\
    \ SPHERE type, only one component is used, and it gives the radius of\n# the sphere.\n\
    uint8 SPHERE_RADIUS=0\n\n\n# For the CYLINDER and CONE types, the center line\
    \ is oriented along\n# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT)\
    \ component\n# of dimensions gives the height of the cylinder (cone).  The\n#\
    \ CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the\n# radius of\
    \ the base of the cylinder (cone).  Cone and cylinder\n# primitives are defined\
    \ to be circular. The tip of the cone is\n# pointing up, along +Z axis.\n\nuint8\
    \ CYLINDER_HEIGHT=0\nuint8 CYLINDER_RADIUS=1\n\nuint8 CONE_HEIGHT=0\nuint8 CONE_RADIUS=1\n"
  fields:
  - name: type
    type: uint8
  - name: dimensions
    type: float64[]
  name: SolidPrimitive
  package: shape_msgs
- definition: "# This contains the position of a point in free space(with 32 bits\
    \ of precision).\n# It is recommeded to use Point wherever possible instead of\
    \ Point32.  \n# \n# This recommendation is to promote interoperability.  \n#\n\
    # This message is designed to take up less space when sending\n# lots of points\
    \ at once, as in the case of a PointCloud.  \n\nfloat32 x\nfloat32 y\nfloat32\
    \ z"
  fields:
  - name: x
    type: float32
  - name: y
    type: float32
  - name: z
    type: float32
  name: Point32
  package: geometry_msgs
- definition: '# Representation of a plane, using the plane equation ax + by + cz
    + d = 0


    # a := coef[0]

    # b := coef[1]

    # c := coef[2]

    # d := coef[3]


    float64[4] coef

    '
  fields:
  - name: coef
    type: float64[4]
  name: Plane
  package: shape_msgs
- definition: 'Header header

    string[] joint_names

    JointTrajectoryPoint[] points'
  fields:
  - name: header
    type: std_msgs/Header
  - name: joint_names
    type: string[]
  - name: points
    type: trajectory_msgs/JointTrajectoryPoint[]
  name: JointTrajectory
  package: trajectory_msgs
- definition: " # Single pressure reading.  This message is appropriate for measuring\
    \ the\n # pressure inside of a fluid (air, water, etc).  This also includes\n\
    \ # atmospheric or barometric pressure.\n\n # This message is not appropriate\
    \ for force/pressure contact sensors.\n\n Header header           # timestamp\
    \ of the measurement\n                         # frame_id is the location of the\
    \ pressure sensor\n\n float64 fluid_pressure  # Absolute pressure reading in Pascals.\n\
    \n float64 variance        # 0 is interpreted as variance unknown"
  fields:
  - name: header
    type: std_msgs/Header
  - name: fluid_pressure
    type: float64
  - name: variance
    type: float64
  name: FluidPressure
  package: sensor_msgs
- definition: 'uint8 data

    '
  fields:
  - name: data
    type: uint8
  name: UInt8
  package: std_msgs
- definition: "# This represents a 2-D grid map, in which each cell represents the\
    \ probability of\n# occupancy.\n\nHeader header \n\n#MetaData for the map\nMapMetaData\
    \ info\n\n# The map data, in row-major order, starting with (0,0).  Occupancy\n\
    # probabilities are in the range [0,100].  Unknown is -1.\nint8[] data\n"
  fields:
  - name: header
    type: std_msgs/Header
  - name: info
    type: nav_msgs/MapMetaData
  - name: data
    type: int8[]
  name: OccupancyGrid
  package: nav_msgs
- definition: " # Measurement of the Magnetic Field vector at a specific location.\n\
    \n # If the covariance of the measurement is known, it should be filled in\n #\
    \ (if all you know is the variance of each measurement, e.g. from the datasheet,\n\
    \ #just put those along the diagonal)\n # A covariance matrix of all zeros will\
    \ be interpreted as \"covariance unknown\",\n # and to use the data a covariance\
    \ will have to be assumed or gotten from some\n # other source\n\n\n Header header\
    \                        # timestamp is the time the\n                       \
    \               # field was measured\n                                      #\
    \ frame_id is the location and orientation\n                                 \
    \     # of the field measurement\n\n geometry_msgs/Vector3 magnetic_field # x,\
    \ y, and z components of the\n                                      # field vector\
    \ in Tesla\n                                      # If your sensor does not output\
    \ 3 axes,\n                                      # put NaNs in the components\
    \ not reported.\n\n float64[9] magnetic_field_covariance # Row major about x,\
    \ y, z axes\n                                      # 0 is interpreted as variance\
    \ unknown"
  fields:
  - name: header
    type: std_msgs/Header
  - name: magnetic_field
    type: geometry_msgs/Vector3
  - name: magnetic_field_covariance
    type: float64[9]
  name: MagneticField
  package: sensor_msgs
- definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


    Header header

    actionlib_msgs/GoalStatus status

    TestRequestFeedback feedback

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: status
    type: actionlib_msgs/GoalStatus
  - name: feedback
    type: actionlib/TestRequestFeedback
  name: TestRequestActionFeedback
  package: actionlib
- definition: 'int32 the_result

    bool is_simple_server'
  fields:
  - name: the_result
    type: int32
  - name: is_simple_server
    type: bool
  name: TestRequestResult
  package: actionlib
- definition: 'string name

    bool state

    int32 id

    int32 parent

    '
  fields:
  - name: name
    type: string
  - name: state
    type: bool
  - name: id
    type: int32
  - name: parent
    type: int32
  name: GroupState
  package: dynamic_reconfigure
- definition: '# Please look at the MultiArrayLayout message definition for

    # documentation on all multiarrays.


    MultiArrayLayout  layout        # specification of data layout

    float64[]         data          # array of data


    '
  fields:
  - name: layout
    type: std_msgs/MultiArrayLayout
  - name: data
    type: float64[]
  name: Float64MultiArray
  package: std_msgs
- definition: uint32 data
  fields:
  - name: data
    type: uint32
  name: UInt32
  package: std_msgs
- definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


    '
  name: TestRequestFeedback
  package: actionlib
- definition: '#An array of poses that represents a Path for a robot to follow

    Header header

    geometry_msgs/PoseStamped[] poses

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: poses
    type: geometry_msgs/PoseStamped[]
  name: Path
  package: nav_msgs
- definition: "# This message publishes values for multiple feedback at once. \nJoyFeedback[]\
    \ array"
  fields:
  - name: array
    type: sensor_msgs/JoyFeedback[]
  name: JoyFeedbackArray
  package: sensor_msgs
- definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


    Header header

    actionlib_msgs/GoalStatus status

    TwoIntsFeedback feedback

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: status
    type: actionlib_msgs/GoalStatus
  - name: feedback
    type: actionlib/TwoIntsFeedback
  name: TwoIntsActionFeedback
  package: actionlib
- definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


    Header header

    actionlib_msgs/GoalStatus status

    TestRequestResult result

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: status
    type: actionlib_msgs/GoalStatus
  - name: result
    type: actionlib/TestRequestResult
  name: TestRequestActionResult
  package: actionlib
- definition: int32 data
  fields:
  - name: data
    type: int32
  name: Int32
  package: std_msgs
- definition: " # Single temperature reading.\n\n Header header           # timestamp\
    \ is the time the temperature was measured\n                         # frame_id\
    \ is the location of the temperature reading\n\n float64 temperature     # Measurement\
    \ of the Temperature in Degrees Celsius\n\n float64 variance        # 0 is interpreted\
    \ as variance unknown"
  fields:
  - name: header
    type: std_msgs/Header
  - name: temperature
    type: float64
  - name: variance
    type: float64
  name: Temperature
  package: sensor_msgs
- definition: 'int64 a

    int64 b'
  fields:
  - name: a
    type: int64
  - name: b
    type: int64
  name: AddTwoIntsRequest
  package: rospy_tutorials
- constants:
  - name: DEAD_PUBLISH_PERIOD
    type: float32
    value: '0.05'
  - name: DEFAULT_CONNECT_TIMEOUT
    type: float32
    value: '10.0'
  - name: DEFAULT_HEARTBEAT_TIMEOUT
    type: float32
    value: '4.0'
  - name: DEFAULT_DISCONNECT_TIMEOUT
    type: float32
    value: '2.0'
  - name: DEFAULT_HEARTBEAT_PERIOD
    type: float32
    value: '1.0'
  - name: DISABLE_HEARTBEAT_TIMEOUT_PARAM
    type: string
    value: /bond_disable_heartbeat_timeout
  definition: 'float32 DEAD_PUBLISH_PERIOD = 0.05

    float32 DEFAULT_CONNECT_TIMEOUT = 10.0

    float32 DEFAULT_HEARTBEAT_TIMEOUT = 4.0

    float32 DEFAULT_DISCONNECT_TIMEOUT = 2.0

    float32 DEFAULT_HEARTBEAT_PERIOD = 1.0


    string DISABLE_HEARTBEAT_TIMEOUT_PARAM=/bond_disable_heartbeat_timeout'
  name: Constants
  package: bond
- definition: "# This is a message to hold data from an IMU (Inertial Measurement\
    \ Unit)\n#\n# Accelerations should be in m/s^2 (not in g's), and rotational velocity\
    \ should be in rad/sec\n#\n# If the covariance of the measurement is known, it\
    \ should be filled in (if all you know is the \n# variance of each measurement,\
    \ e.g. from the datasheet, just put those along the diagonal)\n# A covariance\
    \ matrix of all zeros will be interpreted as \"covariance unknown\", and to use\
    \ the\n# data a covariance will have to be assumed or gotten from some other source\n\
    #\n# If you have no estimate for one of the data elements (e.g. your IMU doesn't\
    \ produce an orientation \n# estimate), please set element 0 of the associated\
    \ covariance matrix to -1\n# If you are interpreting this message, please check\
    \ for a value of -1 in the first element of each \n# covariance matrix, and disregard\
    \ the associated estimate.\n\nHeader header\n\ngeometry_msgs/Quaternion orientation\n\
    float64[9] orientation_covariance # Row major about x, y, z axes\n\ngeometry_msgs/Vector3\
    \ angular_velocity\nfloat64[9] angular_velocity_covariance # Row major about x,\
    \ y, z axes\n\ngeometry_msgs/Vector3 linear_acceleration\nfloat64[9] linear_acceleration_covariance\
    \ # Row major x, y z \n"
  fields:
  - name: header
    type: std_msgs/Header
  - name: orientation
    type: geometry_msgs/Quaternion
  - name: orientation_covariance
    type: float64[9]
  - name: angular_velocity
    type: geometry_msgs/Vector3
  - name: angular_velocity_covariance
    type: float64[9]
  - name: linear_acceleration
    type: geometry_msgs/Vector3
  - name: linear_acceleration_covariance
    type: float64[9]
  name: Imu
  package: sensor_msgs
- definition: bool success
  fields:
  - name: success
    type: bool
  name: NodeletUnloadResponse
  package: nodelet
- definition: 'float32 x

    float32 y

    float32 theta


    float32 linear_velocity

    float32 angular_velocity'
  fields:
  - name: x
    type: float32
  - name: y
    type: float32
  - name: theta
    type: float32
  - name: linear_velocity
    type: float32
  - name: angular_velocity
    type: float32
  name: Pose
  package: turtlesim
- definition: 'byte data

    '
  fields:
  - name: data
    type: byte
  name: Byte
  package: std_msgs
- definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


    Header header

    actionlib_msgs/GoalStatus status

    GetMapResult result

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: status
    type: actionlib_msgs/GoalStatus
  - name: result
    type: nav_msgs/GetMapResult
  name: GetMapActionResult
  package: nav_msgs
- constants:
  - name: FEEDBACK
    type: uint8
    value: '0'
  - name: ROSRUN
    type: uint8
    value: '1'
  - name: ROSLAUNCH
    type: uint8
    value: '2'
  definition: '# MenuEntry message.


    # Each InteractiveMarker message has an array of MenuEntry messages.

    # A collection of MenuEntries together describe a

    # menu/submenu/subsubmenu/etc tree, though they are stored in a flat

    # array.  The tree structure is represented by giving each menu entry

    # an ID number and a "parent_id" field.  Top-level entries are the

    # ones with parent_id = 0.  Menu entries are ordered within their

    # level the same way they are ordered in the containing array.  Parent

    # entries must appear before their children.


    # Example:

    # - id = 3

    #   parent_id = 0

    #   title = "fun"

    # - id = 2

    #   parent_id = 0

    #   title = "robot"

    # - id = 4

    #   parent_id = 2

    #   title = "pr2"

    # - id = 5

    #   parent_id = 2

    #   title = "turtle"

    #

    # Gives a menu tree like this:

    #  - fun

    #  - robot

    #    - pr2

    #    - turtle


    # ID is a number for each menu entry.  Must be unique within the

    # control, and should never be 0.

    uint32 id


    # ID of the parent of this menu entry, if it is a submenu.  If this

    # menu entry is a top-level entry, set parent_id to 0.

    uint32 parent_id


    # menu / entry title

    string title


    # Arguments to command indicated by command_type (below)

    string command


    # Command_type stores the type of response desired when this menu

    # entry is clicked.

    # FEEDBACK: send an InteractiveMarkerFeedback message with menu_entry_id set to
    this entry''s id.

    # ROSRUN: execute "rosrun" with arguments given in the command field (above).

    # ROSLAUNCH: execute "roslaunch" with arguments given in the command field (above).

    uint8 FEEDBACK=0

    uint8 ROSRUN=1

    uint8 ROSLAUNCH=2

    uint8 command_type

    '
  fields:
  - name: id
    type: uint32
  - name: parent_id
    type: uint32
  - name: title
    type: string
  - name: command
    type: string
  - name: command_type
    type: uint8
  name: MenuEntry
  package: visualization_msgs
- definition: '# An accel with reference coordinate frame and timestamp

    Header header

    Accel accel

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: accel
    type: geometry_msgs/Accel
  name: AccelStamped
  package: geometry_msgs
- definition: '#A specification of a polygon where the first and last points are assumed
    to be connected

    Point32[] points

    '
  fields:
  - name: points
    type: geometry_msgs/Point32[]
  name: Polygon
  package: geometry_msgs
- definition: int64 sum
  fields:
  - name: sum
    type: int64
  name: AddTwoIntsResponse
  package: rospy_tutorials
- definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


    Header header

    actionlib_msgs/GoalID goal_id

    TestRequestGoal goal

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: goal_id
    type: actionlib_msgs/GoalID
  - name: goal
    type: actionlib/TestRequestGoal
  name: TestRequestActionGoal
  package: actionlib
- definition: Config config
  fields:
  - name: config
    type: dynamic_reconfigure/Config
  name: ReconfigureResponse
  package: dynamic_reconfigure
- definition: "string name\nstring type\nParamDescription[] parameters\nint32 parent\
    \ \nint32 id\n"
  fields:
  - name: name
    type: string
  - name: type
    type: string
  - name: parameters
    type: dynamic_reconfigure/ParamDescription[]
  - name: parent
    type: int32
  - name: id
    type: int32
  name: Group
  package: dynamic_reconfigure
- definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


    Header header

    actionlib_msgs/GoalID goal_id

    GetMapGoal goal

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: goal_id
    type: actionlib_msgs/GoalID
  - name: goal
    type: nav_msgs/GetMapGoal
  name: GetMapActionGoal
  package: nav_msgs
- constants:
  - name: OK
    type: byte
    value: '0'
  - name: WARN
    type: byte
    value: '1'
  - name: ERROR
    type: byte
    value: '2'
  - name: STALE
    type: byte
    value: '3'
  definition: "# This message holds the status of an individual component of the robot.\n\
    # \n\n# Possible levels of operations\nbyte OK=0\nbyte WARN=1\nbyte ERROR=2\n\
    byte STALE=3\n\nbyte level # level of operation enumerated above \nstring name\
    \ # a description of the test/component reporting\nstring message # a description\
    \ of the status\nstring hardware_id # a hardware unique string\nKeyValue[] values\
    \ # an array of values associated with the status\n\n"
  fields:
  - name: level
    type: byte
  - name: name
    type: string
  - name: message
    type: string
  - name: hardware_id
    type: string
  - name: values
    type: diagnostic_msgs/KeyValue[]
  name: DiagnosticStatus
  package: diagnostic_msgs
- definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


    Header header

    actionlib_msgs/GoalStatus status

    GetMapFeedback feedback

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: status
    type: actionlib_msgs/GoalStatus
  - name: feedback
    type: nav_msgs/GetMapFeedback
  name: GetMapActionFeedback
  package: nav_msgs
- definition: 'int64 a

    int64 b'
  fields:
  - name: a
    type: int64
  - name: b
    type: int64
  name: TwoIntsRequest
  package: roscpp_tutorials
- definition: string topic
  fields:
  - name: topic
    type: string
  name: MuxSelectRequest
  package: topic_tools
- definition: '# Please look at the MultiArrayLayout message definition for

    # documentation on all multiarrays.


    MultiArrayLayout  layout        # specification of data layout

    uint64[]          data          # array of data


    '
  fields:
  - name: layout
    type: std_msgs/MultiArrayLayout
  - name: data
    type: uint64[]
  name: UInt64MultiArray
  package: std_msgs
- definition: 'bool success          # True if the call succeeded

    string status_message # Used to give details about success'
  fields:
  - name: success
    type: bool
  - name: status_message
    type: string
  name: SetCameraInfoResponse
  package: sensor_msgs
- constants:
  - name: DEBUG
    type: byte
    value: '1 #debug level'
  - name: INFO
    type: byte
    value: '2  #general level'
  - name: WARN
    type: byte
    value: '4  #warning level'
  - name: ERROR
    type: byte
    value: '8 #error level'
  - name: FATAL
    type: byte
    value: '16 #fatal/critical level'
  definition: "##\n## Severity level constants\n##\nbyte DEBUG=1 #debug level\nbyte\
    \ INFO=2  #general level\nbyte WARN=4  #warning level\nbyte ERROR=8 #error level\n\
    byte FATAL=16 #fatal/critical level\n##\n## Fields\n##\nHeader header\nbyte level\n\
    string name # name of the node\nstring msg # message \nstring file # file the\
    \ message came from\nstring function # function the message came from\nuint32\
    \ line # line the message came from\nstring[] topics # topic names that the node\
    \ publishes\n"
  fields:
  - name: header
    type: std_msgs/Header
  - name: level
    type: byte
  - name: name
    type: string
  - name: msg
    type: string
  - name: file
    type: string
  - name: function
    type: string
  - name: line
    type: uint32
  - name: topics
    type: string[]
  name: Log
  package: rosgraph_msgs
- definition: string topic
  fields:
  - name: topic
    type: string
  name: DemuxSelectRequest
  package: topic_tools
- definition: Logger[] loggers
  fields:
  - name: loggers
    type: roscpp/Logger[]
  name: GetLoggersResponse
  package: roscpp
- definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


    Header header

    actionlib_msgs/GoalID goal_id

    TwoIntsGoal goal

    '
  fields:
  - name: header
    type: std_msgs/Header
  - name: goal_id
    type: actionlib_msgs/GoalID
  - name: goal
    type: actionlib/TwoIntsGoal
  name: TwoIntsActionGoal
  package: actionlib
- definition: 'BoolParameter[] bools

    IntParameter[] ints

    StrParameter[] strs

    DoubleParameter[] doubles

    GroupState[] groups

    '
  fields:
  - name: bools
    type: dynamic_reconfigure/BoolParameter[]
  - name: ints
    type: dynamic_reconfigure/IntParameter[]
  - name: strs
    type: dynamic_reconfigure/StrParameter[]
  - name: doubles
    type: dynamic_reconfigure/DoubleParameter[]
  - name: groups
    type: dynamic_reconfigure/GroupState[]
  name: Config
  package: dynamic_reconfigure
- definition: '# Identifying string. Must be unique in the topic namespace

    # that this server works on.

    string server_id


    # Sequence number.

    # The client will use this to detect if it has missed a subsequent

    # update.  Every update message will have the same sequence number as

    # an init message.  Clients will likely want to unsubscribe from the

    # init topic after a successful initialization to avoid receiving

    # duplicate data.

    uint64 seq_num


    # All markers.

    InteractiveMarker[] markers

    '
  fields:
  - name: server_id
    type: string
  - name: seq_num
    type: uint64
  - name: markers
    type: visualization_msgs/InteractiveMarker[]
  name: InteractiveMarkerInit
  package: visualization_msgs
- definition: '# Please look at the MultiArrayLayout message definition for

    # documentation on all multiarrays.


    MultiArrayLayout  layout        # specification of data layout

    int64[]           data          # array of data


    '
  fields:
  - name: layout
    type: std_msgs/MultiArrayLayout
  - name: data
    type: int64[]
  name: Int64MultiArray
  package: std_msgs
- definition: 'string id

    byte passed

    DiagnosticStatus[] status'
  fields:
  - name: id
    type: string
  - name: passed
    type: byte
  - name: status
    type: diagnostic_msgs/DiagnosticStatus[]
  name: SelfTestResponse
  package: diagnostic_msgs
services:
- definition: '# This service is used as part of the process for loading analyzers
    at runtime,

    # and should be used by a loader script or program, not as a standalone service.

    # Information about dynamic addition of analyzers can be found at

    # http://wiki.ros.org/diagnostics/Tutorials/Adding%20Analyzers%20at%20Runtime


    # The load_namespace parameter defines the namespace where parameters for the

    # initialization of analyzers in the diagnostic aggregator have been loaded. The

    # value should be a global name (i.e. /my/name/space), not a relative

    # (my/name/space) or private (~my/name/space) name. Analyzers will not be added

    # if a non-global name is used. The call will also fail if the namespace

    # contains parameters that follow a namespace structure that does not conform
    to

    # that expected by the analyzer definitions. See

    # http://wiki.ros.org/diagnostics/Tutorials/Configuring%20Diagnostic%20Aggregators

    # and http://wiki.ros.org/diagnostics/Tutorials/Using%20the%20GenericAnalyzer

    # for examples of the structure of yaml files which are expected to have been

    # loaded into the namespace.

    string load_namespace

    ---


    # True if diagnostic aggregator was updated with new diagnostics, False

    # otherwise. A false return value means that either there is a bond in the

    # aggregator which already used the requested namespace, or the initialization

    # of analyzers failed.

    bool success


    # Message with additional information about the success or failure

    string message

    '
  name: AddDiagnostics
  package: diagnostic_msgs
  request:
    definition: '# This service is used as part of the process for loading analyzers
      at runtime,

      # and should be used by a loader script or program, not as a standalone service.

      # Information about dynamic addition of analyzers can be found at

      # http://wiki.ros.org/diagnostics/Tutorials/Adding%20Analyzers%20at%20Runtime


      # The load_namespace parameter defines the namespace where parameters for the

      # initialization of analyzers in the diagnostic aggregator have been loaded.
      The

      # value should be a global name (i.e. /my/name/space), not a relative

      # (my/name/space) or private (~my/name/space) name. Analyzers will not be added

      # if a non-global name is used. The call will also fail if the namespace

      # contains parameters that follow a namespace structure that does not conform
      to

      # that expected by the analyzer definitions. See

      # http://wiki.ros.org/diagnostics/Tutorials/Configuring%20Diagnostic%20Aggregators

      # and http://wiki.ros.org/diagnostics/Tutorials/Using%20the%20GenericAnalyzer

      # for examples of the structure of yaml files which are expected to have been

      # loaded into the namespace.

      string load_namespace'
    fields:
    - name: load_namespace
      type: string
    name: AddDiagnosticsRequest
    package: diagnostic_msgs
  response:
    definition: '# True if diagnostic aggregator was updated with new diagnostics,
      False

      # otherwise. A false return value means that either there is a bond in the

      # aggregator which already used the requested namespace, or the initialization

      # of analyzers failed.

      bool success


      # Message with additional information about the success or failure

      string message'
    fields:
    - name: success
      type: bool
    - name: message
      type: string
    name: AddDiagnosticsResponse
    package: diagnostic_msgs
- definition: 'Config config

    ---

    Config config

    '
  name: Reconfigure
  package: dynamic_reconfigure
  request:
    definition: Config config
    fields:
    - name: config
      type: dynamic_reconfigure/Config
    name: ReconfigureRequest
    package: dynamic_reconfigure
  response:
    definition: Config config
    fields:
    - name: config
      type: dynamic_reconfigure/Config
    name: ReconfigureResponse
    package: dynamic_reconfigure
- definition: 'uint8 r

    uint8 g

    uint8 b

    uint8 width

    uint8 off

    ---

    '
  name: SetPen
  package: turtlesim
  request:
    definition: 'uint8 r

      uint8 g

      uint8 b

      uint8 width

      uint8 off'
    fields:
    - name: r
      type: uint8
    - name: g
      type: uint8
    - name: b
      type: uint8
    - name: width
      type: uint8
    - name: 'off'
      type: uint8
    name: SetPenRequest
    package: turtlesim
- definition: "# Get a plan from the current position to the goal Pose \n\n# The start\
    \ pose for the plan\ngeometry_msgs/PoseStamped start\n\n# The final pose of the\
    \ goal position\ngeometry_msgs/PoseStamped goal\n\n# If the goal is obstructed,\
    \ how many meters the planner can \n# relax the constraint in x and y before failing.\
    \ \nfloat32 tolerance\n---\nnav_msgs/Path plan\n"
  name: GetPlan
  package: nav_msgs
  request:
    definition: "# Get a plan from the current position to the goal Pose \n\n# The\
      \ start pose for the plan\ngeometry_msgs/PoseStamped start\n\n# The final pose\
      \ of the goal position\ngeometry_msgs/PoseStamped goal\n\n# If the goal is obstructed,\
      \ how many meters the planner can \n# relax the constraint in x and y before\
      \ failing. \nfloat32 tolerance"
    fields:
    - name: start
      type: geometry_msgs/PoseStamped
    - name: goal
      type: geometry_msgs/PoseStamped
    - name: tolerance
      type: float32
    name: GetPlanRequest
    package: nav_msgs
  response:
    definition: nav_msgs/Path plan
    fields:
    - name: plan
      type: nav_msgs/Path
    name: GetPlanResponse
    package: nav_msgs
- definition: '---

    string[] topics

    '
  name: DemuxList
  package: topic_tools
  response:
    definition: string[] topics
    fields:
    - name: topics
      type: string[]
    name: DemuxListResponse
    package: topic_tools
- definition: 'string name

    ---

    bool success

    '
  name: NodeletUnload
  package: nodelet
  request:
    definition: string name
    fields:
    - name: name
      type: string
    name: NodeletUnloadRequest
    package: nodelet
  response:
    definition: bool success
    fields:
    - name: success
      type: bool
    name: NodeletUnloadResponse
    package: nodelet
- definition: '# Bad version of AddTwoInts for unit testing

    int64 a

    int32 b

    ---

    int32 sum

    '
  name: BadTwoInts
  package: rospy_tutorials
  request:
    definition: '# Bad version of AddTwoInts for unit testing

      int64 a

      int32 b'
    fields:
    - name: a
      type: int64
    - name: b
      type: int32
    name: BadTwoIntsRequest
    package: rospy_tutorials
  response:
    definition: int32 sum
    fields:
    - name: sum
      type: int32
    name: BadTwoIntsResponse
    package: rospy_tutorials
- definition: 'float32 linear

    float32 angular

    ---

    '
  name: TeleportRelative
  package: turtlesim
  request:
    definition: 'float32 linear

      float32 angular'
    fields:
    - name: linear
      type: float32
    - name: angular
      type: float32
    name: TeleportRelativeRequest
    package: turtlesim
- definition: 'string topic

    ---

    '
  name: DemuxAdd
  package: topic_tools
  request:
    definition: string topic
    fields:
    - name: topic
      type: string
    name: DemuxAddRequest
    package: topic_tools
- definition: 'int64 a

    int64 b

    ---

    int64 sum

    '
  name: TwoInts
  package: roscpp_tutorials
  request:
    definition: 'int64 a

      int64 b'
    fields:
    - name: a
      type: int64
    - name: b
      type: int64
    name: TwoIntsRequest
    package: roscpp_tutorials
  response:
    definition: int64 sum
    fields:
    - name: sum
      type: int64
    name: TwoIntsResponse
    package: roscpp_tutorials
- definition: 'string topic

    ---

    string prev_topic

    '
  name: MuxSelect
  package: topic_tools
  request:
    definition: string topic
    fields:
    - name: topic
      type: string
    name: MuxSelectRequest
    package: topic_tools
  response:
    definition: string prev_topic
    fields:
    - name: prev_topic
      type: string
    name: MuxSelectResponse
    package: topic_tools
- definition: '---

    string[] topics

    '
  name: MuxList
  package: topic_tools
  response:
    definition: string[] topics
    fields:
    - name: topics
      type: string[]
    name: MuxListResponse
    package: topic_tools
- definition: "# This service requests that a camera stores the given CameraInfo \n\
    # as that camera's calibration information.\n#\n# The width and height in the\
    \ camera_info field should match what the\n# camera is currently outputting on\
    \ its camera_info topic, and the camera\n# will assume that the region of the\
    \ imager that is being referred to is\n# the region that the camera is currently\
    \ capturing.\n\nsensor_msgs/CameraInfo camera_info # The camera_info to store\n\
    ---\nbool success          # True if the call succeeded\nstring status_message\
    \ # Used to give details about success\n"
  name: SetCameraInfo
  package: sensor_msgs
  request:
    definition: "# This service requests that a camera stores the given CameraInfo\
      \ \n# as that camera's calibration information.\n#\n# The width and height in\
      \ the camera_info field should match what the\n# camera is currently outputting\
      \ on its camera_info topic, and the camera\n# will assume that the region of\
      \ the imager that is being referred to is\n# the region that the camera is currently\
      \ capturing.\n\nsensor_msgs/CameraInfo camera_info # The camera_info to store"
    fields:
    - name: camera_info
      type: sensor_msgs/CameraInfo
    name: SetCameraInfoRequest
    package: sensor_msgs
  response:
    definition: 'bool success          # True if the call succeeded

      string status_message # Used to give details about success'
    fields:
    - name: success
      type: bool
    - name: status_message
      type: string
    name: SetCameraInfoResponse
    package: sensor_msgs
- definition: '---

    string id

    byte passed

    DiagnosticStatus[] status

    '
  name: SelfTest
  package: diagnostic_msgs
  response:
    definition: 'string id

      byte passed

      DiagnosticStatus[] status'
    fields:
    - name: id
      type: string
    - name: passed
      type: byte
    - name: status
      type: diagnostic_msgs/DiagnosticStatus[]
    name: SelfTestResponse
    package: diagnostic_msgs
- definition: 'string topic

    ---

    '
  name: MuxAdd
  package: topic_tools
  request:
    definition: string topic
    fields:
    - name: topic
      type: string
    name: MuxAddRequest
    package: topic_tools
- definition: '---

    bool success   # indicate successful run of triggered service

    string message # informational, e.g. for error messages

    '
  name: Trigger
  package: std_srvs
  response:
    definition: 'bool success   # indicate successful run of triggered service

      string message # informational, e.g. for error messages'
    fields:
    - name: success
      type: bool
    - name: message
      type: string
    name: TriggerResponse
    package: std_srvs
- definition: 'string name

    ---'
  name: Kill
  package: turtlesim
  request:
    definition: string name
    fields:
    - name: name
      type: string
    name: KillRequest
    package: turtlesim
- definition: '# Get the map as a nav_msgs/OccupancyGrid

    ---

    nav_msgs/OccupancyGrid map

    '
  name: GetMap
  package: nav_msgs
  request:
    definition: '# Get the map as a nav_msgs/OccupancyGrid'
    name: GetMapRequest
    package: nav_msgs
  response:
    definition: nav_msgs/OccupancyGrid map
    fields:
    - name: map
      type: nav_msgs/OccupancyGrid
    name: GetMapResponse
    package: nav_msgs
- definition: '---

    Logger[] loggers'
  name: GetLoggers
  package: roscpp
  response:
    definition: Logger[] loggers
    fields:
    - name: loggers
      type: roscpp/Logger[]
    name: GetLoggersResponse
    package: roscpp
- definition: 'string topic

    ---


    '
  name: DemuxDelete
  package: topic_tools
  request:
    definition: string topic
    fields:
    - name: topic
      type: string
    name: DemuxDeleteRequest
    package: topic_tools
- definition: 'string name

    string type

    string[] remap_source_args

    string[] remap_target_args

    string[] my_argv


    string bond_id

    ---

    bool success

    '
  name: NodeletLoad
  package: nodelet
  request:
    definition: 'string name

      string type

      string[] remap_source_args

      string[] remap_target_args

      string[] my_argv


      string bond_id'
    fields:
    - name: name
      type: string
    - name: type
      type: string
    - name: remap_source_args
      type: string[]
    - name: remap_target_args
      type: string[]
    - name: my_argv
      type: string[]
    - name: bond_id
      type: string
    name: NodeletLoadRequest
    package: nodelet
  response:
    definition: bool success
    fields:
    - name: success
      type: bool
    name: NodeletLoadResponse
    package: nodelet
- definition: 'float32 x

    float32 y

    float32 theta

    ---

    '
  name: TeleportAbsolute
  package: turtlesim
  request:
    definition: 'float32 x

      float32 y

      float32 theta'
    fields:
    - name: x
      type: float32
    - name: y
      type: float32
    - name: theta
      type: float32
    name: TeleportAbsoluteRequest
    package: turtlesim
- definition: '---

    string[] nodelets

    '
  name: NodeletList
  package: nodelet
  response:
    definition: string[] nodelets
    fields:
    - name: nodelets
      type: string[]
    name: NodeletListResponse
    package: nodelet
- definition: 'float32 x

    float32 y

    float32 theta

    string name # Optional.  A unique name will be created and returned if this is
    empty

    ---

    string name'
  name: Spawn
  package: turtlesim
  request:
    definition: 'float32 x

      float32 y

      float32 theta

      string name # Optional.  A unique name will be created and returned if this
      is empty'
    fields:
    - name: x
      type: float32
    - name: y
      type: float32
    - name: theta
      type: float32
    - name: name
      type: string
    name: SpawnRequest
    package: turtlesim
  response:
    definition: string name
    fields:
    - name: name
      type: string
    name: SpawnResponse
    package: turtlesim
- definition: 'bool data # e.g. for hardware enabling / disabling

    ---

    bool success   # indicate successful run of triggered service

    string message # informational, e.g. for error messages

    '
  name: SetBool
  package: std_srvs
  request:
    definition: 'bool data # e.g. for hardware enabling / disabling'
    fields:
    - name: data
      type: bool
    name: SetBoolRequest
    package: std_srvs
  response:
    definition: 'bool success   # indicate successful run of triggered service

      string message # informational, e.g. for error messages'
    fields:
    - name: success
      type: bool
    - name: message
      type: string
    name: SetBoolResponse
    package: std_srvs
- definition: '# Set a new map together with an initial pose

    nav_msgs/OccupancyGrid map

    geometry_msgs/PoseWithCovarianceStamped initial_pose

    ---

    bool success


    '
  name: SetMap
  package: nav_msgs
  request:
    definition: '# Set a new map together with an initial pose

      nav_msgs/OccupancyGrid map

      geometry_msgs/PoseWithCovarianceStamped initial_pose'
    fields:
    - name: map
      type: nav_msgs/OccupancyGrid
    - name: initial_pose
      type: geometry_msgs/PoseWithCovarianceStamped
    name: SetMapRequest
    package: nav_msgs
  response:
    definition: bool success
    fields:
    - name: success
      type: bool
    name: SetMapResponse
    package: nav_msgs
- definition: '---'
  name: Empty
  package: std_srvs
- definition: 'string logger

    string level

    ---'
  name: SetLoggerLevel
  package: roscpp
  request:
    definition: 'string logger

      string level'
    fields:
    - name: logger
      type: string
    - name: level
      type: string
    name: SetLoggerLevelRequest
    package: roscpp
- definition: 'int64 a

    int64 b

    ---

    int64 sum

    '
  name: AddTwoInts
  package: rospy_tutorials
  request:
    definition: 'int64 a

      int64 b'
    fields:
    - name: a
      type: int64
    - name: b
      type: int64
    name: AddTwoIntsRequest
    package: rospy_tutorials
  response:
    definition: int64 sum
    fields:
    - name: sum
      type: int64
    name: AddTwoIntsResponse
    package: rospy_tutorials
- definition: '---'
  name: Empty
  package: roscpp
- definition: 'string topic

    ---

    string prev_topic

    '
  name: DemuxSelect
  package: topic_tools
  request:
    definition: string topic
    fields:
    - name: topic
      type: string
    name: DemuxSelectRequest
    package: topic_tools
  response:
    definition: string prev_topic
    fields:
    - name: prev_topic
      type: string
    name: DemuxSelectResponse
    package: topic_tools
- definition: 'string topic

    ---


    '
  name: MuxDelete
  package: topic_tools
  request:
    definition: string topic
    fields:
    - name: topic
      type: string
    name: MuxDeleteRequest
    package: topic_tools
