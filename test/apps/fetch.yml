image: therobotcooperative/fetch
sources:
- /opt/ros/melodic/setup.bash
- /ros_ws/devel/setup.bash
description:
  distribution: melodic
  packages:
  - actions: []
    messages: []
    name: fetch_ikfast_plugin
    path: /ros_ws/src/fetch_ros/fetch_ikfast_plugin
    services: []
  - actions: []
    messages: []
    name: fetch_description
    path: /ros_ws/src/fetch_ros/fetch_description
    services: []
  - actions: []
    messages: []
    name: fetch_moveit_config
    path: /ros_ws/src/fetch_ros/fetch_moveit_config
    services: []
  - actions: []
    messages: []
    name: fetch_maps
    path: /ros_ws/src/fetch_ros/fetch_maps
    services: []
  - actions: []
    messages: []
    name: fetch_depth_layer
    path: /ros_ws/src/fetch_ros/fetch_depth_layer
    services: []
  - actions: []
    messages: []
    name: fetch_navigation
    path: /ros_ws/src/fetch_ros/fetch_navigation
    services: []
  - actions: []
    messages: []
    name: fetch_gazebo_demo
    path: /ros_ws/src/fetch_gazebo/fetch_gazebo_demo
    services: []
  - actions: []
    messages: []
    name: fetch_gazebo
    path: /ros_ws/src/fetch_gazebo/fetch_gazebo
    services: []
  - actions: []
    messages: []
    name: moveit_kinematics
    path: /opt/ros/melodic/share/moveit_kinematics
    services: []
  - actions: []
    messages: []
    name: roslz4
    path: /opt/ros/melodic/share/roslz4
    services: []
  - actions: []
    messages: []
    name: gazebo_plugins
    path: /opt/ros/melodic/share/gazebo_plugins
    services: []
  - actions:
    - definition: '#Simple API

        string target_frame

        string source_frame

        time source_time

        duration timeout


        #Advanced API

        time target_time

        string fixed_frame


        #Whether or not to use the advanced API

        bool advanced


        ---

        geometry_msgs/TransformStamped transform

        tf2_msgs/TF2Error error

        ---

        '
      feedback:
        definition: ''
        name: LookupTransformFeedback
        package: tf2_msgs
      goal:
        definition: '#Simple API

          string target_frame

          string source_frame

          time source_time

          duration timeout


          #Advanced API

          time target_time

          string fixed_frame


          #Whether or not to use the advanced API

          bool advanced'
        fields:
        - name: target_frame
          type: string
        - name: source_frame
          type: string
        - name: source_time
          type: time
        - name: timeout
          type: duration
        - name: target_time
          type: time
        - name: fixed_frame
          type: string
        - name: advanced
          type: bool
        name: LookupTransformGoal
        package: tf2_msgs
      name: LookupTransform
      package: tf2_msgs
      result:
        definition: 'geometry_msgs/TransformStamped transform

          tf2_msgs/TF2Error error'
        fields:
        - name: transform
          type: geometry_msgs/TransformStamped
        - name: error
          type: tf2_msgs/TF2Error
        name: LookupTransformResult
        package: tf2_msgs
    messages:
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        LookupTransformActionGoal action_goal

        LookupTransformActionResult action_result

        LookupTransformActionFeedback action_feedback

        '
      fields:
      - name: action_goal
        type: tf2_msgs/LookupTransformActionGoal
      - name: action_result
        type: tf2_msgs/LookupTransformActionResult
      - name: action_feedback
        type: tf2_msgs/LookupTransformActionFeedback
      name: LookupTransformAction
      package: tf2_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        LookupTransformFeedback feedback

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: feedback
        type: tf2_msgs/LookupTransformFeedback
      name: LookupTransformActionFeedback
      package: tf2_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalID goal_id

        LookupTransformGoal goal

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: goal_id
        type: actionlib_msgs/GoalID
      - name: goal
        type: tf2_msgs/LookupTransformGoal
      name: LookupTransformActionGoal
      package: tf2_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        LookupTransformResult result

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: result
        type: tf2_msgs/LookupTransformResult
      name: LookupTransformActionResult
      package: tf2_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        '
      name: LookupTransformFeedback
      package: tf2_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        #Simple API

        string target_frame

        string source_frame

        time source_time

        duration timeout


        #Advanced API

        time target_time

        string fixed_frame


        #Whether or not to use the advanced API

        bool advanced


        '
      fields:
      - name: target_frame
        type: string
      - name: source_frame
        type: string
      - name: source_time
        type: time
      - name: timeout
        type: duration
      - name: target_time
        type: time
      - name: fixed_frame
        type: string
      - name: advanced
        type: bool
      name: LookupTransformGoal
      package: tf2_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        geometry_msgs/TransformStamped transform

        tf2_msgs/TF2Error error

        '
      fields:
      - name: transform
        type: geometry_msgs/TransformStamped
      - name: error
        type: tf2_msgs/TF2Error
      name: LookupTransformResult
      package: tf2_msgs
    - constants:
      - name: NO_ERROR
        type: uint8
        value: '0'
      - name: LOOKUP_ERROR
        type: uint8
        value: '1'
      - name: CONNECTIVITY_ERROR
        type: uint8
        value: '2'
      - name: EXTRAPOLATION_ERROR
        type: uint8
        value: '3'
      - name: INVALID_ARGUMENT_ERROR
        type: uint8
        value: '4'
      - name: TIMEOUT_ERROR
        type: uint8
        value: '5'
      - name: TRANSFORM_ERROR
        type: uint8
        value: '6'
      definition: 'uint8 NO_ERROR = 0

        uint8 LOOKUP_ERROR = 1

        uint8 CONNECTIVITY_ERROR = 2

        uint8 EXTRAPOLATION_ERROR = 3

        uint8 INVALID_ARGUMENT_ERROR = 4

        uint8 TIMEOUT_ERROR = 5

        uint8 TRANSFORM_ERROR = 6


        uint8 error

        string error_string

        '
      fields:
      - name: error
        type: uint8
      - name: error_string
        type: string
      name: TF2Error
      package: tf2_msgs
    - definition: 'geometry_msgs/TransformStamped[] transforms

        '
      fields:
      - name: transforms
        type: geometry_msgs/TransformStamped[]
      name: TFMessage
      package: tf2_msgs
    name: tf2_msgs
    path: /opt/ros/melodic/share/tf2_msgs
    services:
    - definition: '---

        string frame_yaml

        '
      name: FrameGraph
      package: tf2_msgs
      response:
        definition: string frame_yaml
        fields:
        - name: frame_yaml
          type: string
        name: FrameGraphResponse
        package: tf2_msgs
  - actions: []
    messages: []
    name: rosbag_storage
    path: /opt/ros/melodic/share/rosbag_storage
    services: []
  - actions: []
    messages:
    - constants:
      - name: CIRCLE
        type: uint8
        value: '0'
      - name: LINE_STRIP
        type: uint8
        value: '1'
      - name: LINE_LIST
        type: uint8
        value: '2'
      - name: POLYGON
        type: uint8
        value: '3'
      - name: POINTS
        type: uint8
        value: '4'
      - name: ADD
        type: uint8
        value: '0'
      - name: REMOVE
        type: uint8
        value: '1'
      definition: "uint8 CIRCLE=0\nuint8 LINE_STRIP=1\nuint8 LINE_LIST=2\nuint8 POLYGON=3\n\
        uint8 POINTS=4\n\nuint8 ADD=0\nuint8 REMOVE=1\n\nHeader header\nstring ns\t\t\
        # namespace, used with id to form a unique id\nint32 id          \t# unique\
        \ id within the namespace\nint32 type        \t# CIRCLE/LINE_STRIP/etc.\nint32\
        \ action      \t# ADD/REMOVE\ngeometry_msgs/Point position # 2D, in pixel-coords\n\
        float32 scale\t \t# the diameter for a circle, etc.\nstd_msgs/ColorRGBA outline_color\n\
        uint8 filled\t\t# whether to fill in the shape with color\nstd_msgs/ColorRGBA\
        \ fill_color # color [0.0-1.0]\nduration lifetime       # How long the object\
        \ should last before being automatically deleted.  0 means forever\n\n\ngeometry_msgs/Point[]\
        \ points # used for LINE_STRIP/LINE_LIST/POINTS/etc., 2D in pixel coords\nstd_msgs/ColorRGBA[]\
        \ outline_colors # a color for each line, point, etc."
      fields:
      - name: header
        type: std_msgs/Header
      - name: ns
        type: string
      - name: id
        type: int32
      - name: type
        type: int32
      - name: action
        type: int32
      - name: position
        type: geometry_msgs/Point
      - name: scale
        type: float32
      - name: outline_color
        type: std_msgs/ColorRGBA
      - name: filled
        type: uint8
      - name: fill_color
        type: std_msgs/ColorRGBA
      - name: lifetime
        type: duration
      - name: points
        type: geometry_msgs/Point[]
      - name: outline_colors
        type: std_msgs/ColorRGBA[]
      name: ImageMarker
      package: visualization_msgs
    - definition: '# Time/frame info.

        # If header.time is set to 0, the marker will be retransformed into

        # its frame on each timestep. You will receive the pose feedback

        # in the same frame.

        # Otherwise, you might receive feedback in a different frame.

        # For rviz, this will be the current ''fixed frame'' set by the user.

        Header header


        # Initial pose. Also, defines the pivot point for rotations.

        geometry_msgs/Pose pose


        # Identifying string. Must be globally unique in

        # the topic that this message is sent through.

        string name


        # Short description (< 40 characters).

        string description


        # Scale to be used for default controls (default=1).

        float32 scale


        # All menu and submenu entries associated with this marker.

        MenuEntry[] menu_entries


        # List of controls displayed for this marker.

        InteractiveMarkerControl[] controls

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: pose
        type: geometry_msgs/Pose
      - name: name
        type: string
      - name: description
        type: string
      - name: scale
        type: float32
      - name: menu_entries
        type: visualization_msgs/MenuEntry[]
      - name: controls
        type: visualization_msgs/InteractiveMarkerControl[]
      name: InteractiveMarker
      package: visualization_msgs
    - constants:
      - name: INHERIT
        type: uint8
        value: '0'
      - name: FIXED
        type: uint8
        value: '1'
      - name: VIEW_FACING
        type: uint8
        value: '2'
      - name: NONE
        type: uint8
        value: '0'
      - name: MENU
        type: uint8
        value: '1'
      - name: BUTTON
        type: uint8
        value: '2'
      - name: MOVE_AXIS
        type: uint8
        value: '3'
      - name: MOVE_PLANE
        type: uint8
        value: '4'
      - name: ROTATE_AXIS
        type: uint8
        value: '5'
      - name: MOVE_ROTATE
        type: uint8
        value: '6'
      - name: MOVE_3D
        type: uint8
        value: '7'
      - name: ROTATE_3D
        type: uint8
        value: '8'
      - name: MOVE_ROTATE_3D
        type: uint8
        value: '9'
      definition: "# Represents a control that is to be displayed together with an interactive\
        \ marker\n\n# Identifying string for this control.\n# You need to assign a unique\
        \ value to this to receive feedback from the GUI\n# on what actions the user\
        \ performs on this control (e.g. a button click).\nstring name\n\n\n# Defines\
        \ the local coordinate frame (relative to the pose of the parent\n# interactive\
        \ marker) in which is being rotated and translated.\n# Default: Identity\ngeometry_msgs/Quaternion\
        \ orientation\n\n\n# Orientation mode: controls how orientation changes.\n#\
        \ INHERIT: Follow orientation of interactive marker\n# FIXED: Keep orientation\
        \ fixed at initial state\n# VIEW_FACING: Align y-z plane with screen (x: forward,\
        \ y:left, z:up).\nuint8 INHERIT = 0 \nuint8 FIXED = 1\nuint8 VIEW_FACING = 2\n\
        \nuint8 orientation_mode\n\n# Interaction mode for this control\n# \n# NONE:\
        \ This control is only meant for visualization; no context menu.\n# MENU: Like\
        \ NONE, but right-click menu is active.\n# BUTTON: Element can be left-clicked.\n\
        # MOVE_AXIS: Translate along local x-axis.\n# MOVE_PLANE: Translate in local\
        \ y-z plane.\n# ROTATE_AXIS: Rotate around local x-axis.\n# MOVE_ROTATE: Combines\
        \ MOVE_PLANE and ROTATE_AXIS.\nuint8 NONE = 0 \nuint8 MENU = 1\nuint8 BUTTON\
        \ = 2\nuint8 MOVE_AXIS = 3 \nuint8 MOVE_PLANE = 4\nuint8 ROTATE_AXIS = 5\nuint8\
        \ MOVE_ROTATE = 6\n# \"3D\" interaction modes work with the mouse+SHIFT+CTRL\
        \ or with 3D cursors.\n# MOVE_3D: Translate freely in 3D space.\n# ROTATE_3D:\
        \ Rotate freely in 3D space about the origin of parent frame.\n# MOVE_ROTATE_3D:\
        \ Full 6-DOF freedom of translation and rotation about the cursor origin.\n\
        uint8 MOVE_3D = 7\nuint8 ROTATE_3D = 8\nuint8 MOVE_ROTATE_3D = 9\n\nuint8 interaction_mode\n\
        \n\n# If true, the contained markers will also be visible\n# when the gui is\
        \ not in interactive mode.\nbool always_visible\n\n\n# Markers to be displayed\
        \ as custom visual representation.\n# Leave this empty to use the default control\
        \ handles.\n#\n# Note: \n# - The markers can be defined in an arbitrary coordinate\
        \ frame,\n#   but will be transformed into the local frame of the interactive\
        \ marker.\n# - If the header of a marker is empty, its pose will be interpreted\
        \ as \n#   relative to the pose of the parent interactive marker.\nMarker[]\
        \ markers\n\n\n# In VIEW_FACING mode, set this to true if you don't want the\
        \ markers\n# to be aligned with the camera view point. The markers will show\
        \ up\n# as in INHERIT mode.\nbool independent_marker_orientation\n\n\n# Short\
        \ description (< 40 characters) of what this control does,\n# e.g. \"Move the\
        \ robot\". \n# Default: A generic description based on the interaction mode\n\
        string description\n"
      fields:
      - name: name
        type: string
      - name: orientation
        type: geometry_msgs/Quaternion
      - name: orientation_mode
        type: uint8
      - name: interaction_mode
        type: uint8
      - name: always_visible
        type: bool
      - name: markers
        type: visualization_msgs/Marker[]
      - name: independent_marker_orientation
        type: bool
      - name: description
        type: string
      name: InteractiveMarkerControl
      package: visualization_msgs
    - constants:
      - name: KEEP_ALIVE
        type: uint8
        value: '0'
      - name: POSE_UPDATE
        type: uint8
        value: '1'
      - name: MENU_SELECT
        type: uint8
        value: '2'
      - name: BUTTON_CLICK
        type: uint8
        value: '3'
      - name: MOUSE_DOWN
        type: uint8
        value: '4'
      - name: MOUSE_UP
        type: uint8
        value: '5'
      definition: '# Time/frame info.

        Header header


        # Identifying string. Must be unique in the topic namespace.

        string client_id


        # Feedback message sent back from the GUI, e.g.

        # when the status of an interactive marker was modified by the user.


        # Specifies which interactive marker and control this message refers to

        string marker_name

        string control_name


        # Type of the event

        # KEEP_ALIVE: sent while dragging to keep up control of the marker

        # MENU_SELECT: a menu entry has been selected

        # BUTTON_CLICK: a button control has been clicked

        # POSE_UPDATE: the pose has been changed using one of the controls

        uint8 KEEP_ALIVE = 0

        uint8 POSE_UPDATE = 1

        uint8 MENU_SELECT = 2

        uint8 BUTTON_CLICK = 3


        uint8 MOUSE_DOWN = 4

        uint8 MOUSE_UP = 5


        uint8 event_type


        # Current pose of the marker

        # Note: Has to be valid for all feedback types.

        geometry_msgs/Pose pose


        # Contains the ID of the selected menu entry

        # Only valid for MENU_SELECT events.

        uint32 menu_entry_id


        # If event_type is BUTTON_CLICK, MOUSE_DOWN, or MOUSE_UP, mouse_point

        # may contain the 3 dimensional position of the event on the

        # control.  If it does, mouse_point_valid will be true.  mouse_point

        # will be relative to the frame listed in the header.

        geometry_msgs/Point mouse_point

        bool mouse_point_valid

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: client_id
        type: string
      - name: marker_name
        type: string
      - name: control_name
        type: string
      - name: event_type
        type: uint8
      - name: pose
        type: geometry_msgs/Pose
      - name: menu_entry_id
        type: uint32
      - name: mouse_point
        type: geometry_msgs/Point
      - name: mouse_point_valid
        type: bool
      name: InteractiveMarkerFeedback
      package: visualization_msgs
    - definition: '# Identifying string. Must be unique in the topic namespace

        # that this server works on.

        string server_id


        # Sequence number.

        # The client will use this to detect if it has missed a subsequent

        # update.  Every update message will have the same sequence number as

        # an init message.  Clients will likely want to unsubscribe from the

        # init topic after a successful initialization to avoid receiving

        # duplicate data.

        uint64 seq_num


        # All markers.

        InteractiveMarker[] markers

        '
      fields:
      - name: server_id
        type: string
      - name: seq_num
        type: uint64
      - name: markers
        type: visualization_msgs/InteractiveMarker[]
      name: InteractiveMarkerInit
      package: visualization_msgs
    - definition: '# Time/frame info.

        Header header


        # Initial pose. Also, defines the pivot point for rotations.

        geometry_msgs/Pose pose


        # Identifying string. Must be globally unique in

        # the topic that this message is sent through.

        string name

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: pose
        type: geometry_msgs/Pose
      - name: name
        type: string
      name: InteractiveMarkerPose
      package: visualization_msgs
    - constants:
      - name: KEEP_ALIVE
        type: uint8
        value: '0'
      - name: UPDATE
        type: uint8
        value: '1'
      definition: "# Identifying string. Must be unique in the topic namespace\n# that\
        \ this server works on.\nstring server_id\n\n# Sequence number.\n# The client\
        \ will use this to detect if it has missed an update.\nuint64 seq_num\n\n# Type\
        \ holds the purpose of this message.  It must be one of UPDATE or KEEP_ALIVE.\n\
        # UPDATE: Incremental update to previous state. \n#         The sequence number\
        \ must be 1 higher than for\n#         the previous update.\n# KEEP_ALIVE: Indicates\
        \ the that the server is still living.\n#             The sequence number does\
        \ not increase.\n#             No payload data should be filled out (markers,\
        \ poses, or erases).\nuint8 KEEP_ALIVE = 0\nuint8 UPDATE = 1\n\nuint8 type\n\
        \n#Note: No guarantees on the order of processing.\n#      Contents must be\
        \ kept consistent by sender.\n\n#Markers to be added or updated\nInteractiveMarker[]\
        \ markers\n\n#Poses of markers that should be moved\nInteractiveMarkerPose[]\
        \ poses\n\n#Names of markers to be erased\nstring[] erases\n"
      fields:
      - name: server_id
        type: string
      - name: seq_num
        type: uint64
      - name: type
        type: uint8
      - name: markers
        type: visualization_msgs/InteractiveMarker[]
      - name: poses
        type: visualization_msgs/InteractiveMarkerPose[]
      - name: erases
        type: string[]
      name: InteractiveMarkerUpdate
      package: visualization_msgs
    - constants:
      - name: ARROW
        type: uint8
        value: '0'
      - name: CUBE
        type: uint8
        value: '1'
      - name: SPHERE
        type: uint8
        value: '2'
      - name: CYLINDER
        type: uint8
        value: '3'
      - name: LINE_STRIP
        type: uint8
        value: '4'
      - name: LINE_LIST
        type: uint8
        value: '5'
      - name: CUBE_LIST
        type: uint8
        value: '6'
      - name: SPHERE_LIST
        type: uint8
        value: '7'
      - name: POINTS
        type: uint8
        value: '8'
      - name: TEXT_VIEW_FACING
        type: uint8
        value: '9'
      - name: MESH_RESOURCE
        type: uint8
        value: '10'
      - name: TRIANGLE_LIST
        type: uint8
        value: '11'
      - name: ADD
        type: uint8
        value: '0'
      - name: MODIFY
        type: uint8
        value: '0'
      - name: DELETE
        type: uint8
        value: '2'
      - name: DELETEALL
        type: uint8
        value: '3'
      definition: "# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes\
        \ for more information on using this message with rviz\n\nuint8 ARROW=0\nuint8\
        \ CUBE=1\nuint8 SPHERE=2\nuint8 CYLINDER=3\nuint8 LINE_STRIP=4\nuint8 LINE_LIST=5\n\
        uint8 CUBE_LIST=6\nuint8 SPHERE_LIST=7\nuint8 POINTS=8\nuint8 TEXT_VIEW_FACING=9\n\
        uint8 MESH_RESOURCE=10\nuint8 TRIANGLE_LIST=11\n\nuint8 ADD=0\nuint8 MODIFY=0\n\
        uint8 DELETE=2\nuint8 DELETEALL=3\n\nHeader header                        #\
        \ header for time/frame information\nstring ns                            #\
        \ Namespace to place this object in... used in conjunction with id to create\
        \ a unique name for the object\nint32 id \t\t                         # object\
        \ ID useful in conjunction with the namespace for manipulating and deleting\
        \ the object later\nint32 type \t\t                       # Type of object\n\
        int32 action \t                       # 0 add/modify an object, 1 (deprecated),\
        \ 2 deletes an object, 3 deletes all objects\ngeometry_msgs/Pose pose      \
        \           # Pose of the object\ngeometry_msgs/Vector3 scale             #\
        \ Scale of the object 1,1,1 means default (usually 1 meter square)\nstd_msgs/ColorRGBA\
        \ color             # Color [0.0-1.0]\nduration lifetime                   \
        \ # How long the object should last before being automatically deleted.  0 means\
        \ forever\nbool frame_locked                    # If this marker should be frame-locked,\
        \ i.e. retransformed into its frame every timestep\n\n#Only used if the type\
        \ specified has some use for them (eg. POINTS, LINE_STRIP, ...)\ngeometry_msgs/Point[]\
        \ points\n#Only used if the type specified has some use for them (eg. POINTS,\
        \ LINE_STRIP, ...)\n#number of colors must either be 0 or equal to the number\
        \ of points\n#NOTE: alpha is not yet used\nstd_msgs/ColorRGBA[] colors\n\n#\
        \ NOTE: only used for text markers\nstring text\n\n# NOTE: only used for MESH_RESOURCE\
        \ markers\nstring mesh_resource\nbool mesh_use_embedded_materials\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: ns
        type: string
      - name: id
        type: int32
      - name: type
        type: int32
      - name: action
        type: int32
      - name: pose
        type: geometry_msgs/Pose
      - name: scale
        type: geometry_msgs/Vector3
      - name: color
        type: std_msgs/ColorRGBA
      - name: lifetime
        type: duration
      - name: frame_locked
        type: bool
      - name: points
        type: geometry_msgs/Point[]
      - name: colors
        type: std_msgs/ColorRGBA[]
      - name: text
        type: string
      - name: mesh_resource
        type: string
      - name: mesh_use_embedded_materials
        type: bool
      name: Marker
      package: visualization_msgs
    - definition: 'Marker[] markers

        '
      fields:
      - name: markers
        type: visualization_msgs/Marker[]
      name: MarkerArray
      package: visualization_msgs
    - constants:
      - name: FEEDBACK
        type: uint8
        value: '0'
      - name: ROSRUN
        type: uint8
        value: '1'
      - name: ROSLAUNCH
        type: uint8
        value: '2'
      definition: '# MenuEntry message.


        # Each InteractiveMarker message has an array of MenuEntry messages.

        # A collection of MenuEntries together describe a

        # menu/submenu/subsubmenu/etc tree, though they are stored in a flat

        # array.  The tree structure is represented by giving each menu entry

        # an ID number and a "parent_id" field.  Top-level entries are the

        # ones with parent_id = 0.  Menu entries are ordered within their

        # level the same way they are ordered in the containing array.  Parent

        # entries must appear before their children.


        # Example:

        # - id = 3

        #   parent_id = 0

        #   title = "fun"

        # - id = 2

        #   parent_id = 0

        #   title = "robot"

        # - id = 4

        #   parent_id = 2

        #   title = "pr2"

        # - id = 5

        #   parent_id = 2

        #   title = "turtle"

        #

        # Gives a menu tree like this:

        #  - fun

        #  - robot

        #    - pr2

        #    - turtle


        # ID is a number for each menu entry.  Must be unique within the

        # control, and should never be 0.

        uint32 id


        # ID of the parent of this menu entry, if it is a submenu.  If this

        # menu entry is a top-level entry, set parent_id to 0.

        uint32 parent_id


        # menu / entry title

        string title


        # Arguments to command indicated by command_type (below)

        string command


        # Command_type stores the type of response desired when this menu

        # entry is clicked.

        # FEEDBACK: send an InteractiveMarkerFeedback message with menu_entry_id set
        to this entry''s id.

        # ROSRUN: execute "rosrun" with arguments given in the command field (above).

        # ROSLAUNCH: execute "roslaunch" with arguments given in the command field (above).

        uint8 FEEDBACK=0

        uint8 ROSRUN=1

        uint8 ROSLAUNCH=2

        uint8 command_type

        '
      fields:
      - name: id
        type: uint32
      - name: parent_id
        type: uint32
      - name: title
        type: string
      - name: command
        type: string
      - name: command_type
        type: uint8
      name: MenuEntry
      package: visualization_msgs
    name: visualization_msgs
    path: /opt/ros/melodic/share/visualization_msgs
    services: []
  - actions: []
    messages: []
    name: rosout
    path: /opt/ros/melodic/share/rosout
    services: []
  - actions: []
    messages: []
    name: joint_state_publisher
    path: /opt/ros/melodic/share/joint_state_publisher
    services: []
  - actions: []
    messages: []
    name: moveit_ros_move_group
    path: /opt/ros/melodic/share/moveit_ros_move_group
    services: []
  - actions: []
    messages: []
    name: bondpy
    path: /opt/ros/melodic/share/bondpy
    services: []
  - actions: []
    messages: []
    name: bondcpp
    path: /opt/ros/melodic/share/bondcpp
    services: []
  - actions: []
    messages: []
    name: moveit_python
    path: /opt/ros/melodic/share/moveit_python
    services: []
  - actions: []
    messages: []
    name: octomap
    path: /opt/ros/melodic/share/octomap
    services: []
  - actions: []
    messages: []
    name: gennodejs
    path: /opt/ros/melodic/share/gennodejs
    services: []
  - actions: []
    messages: []
    name: catkin
    path: /opt/ros/melodic/share/catkin
    services: []
  - actions: []
    messages:
    - definition: 'Header header

        int32 x

        int32 y

        uint32 width

        uint32 height

        int8[] data

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: x
        type: int32
      - name: y
        type: int32
      - name: width
        type: uint32
      - name: height
        type: uint32
      - name: data
        type: int8[]
      name: OccupancyGridUpdate
      package: map_msgs
    - constants:
      - name: ADD
        type: uint32
        value: '0'
      - name: DELETE
        type: uint32
        value: '1'
      definition: 'uint32 ADD=0

        uint32 DELETE=1

        Header header

        uint32 type          # type of update, one of ADD or DELETE

        sensor_msgs/PointCloud2 points

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: type
        type: uint32
      - name: points
        type: sensor_msgs/PointCloud2
      name: PointCloud2Update
      package: map_msgs
    - definition: 'nav_msgs/OccupancyGrid map

        float64 min_z

        float64 max_z'
      fields:
      - name: map
        type: nav_msgs/OccupancyGrid
      - name: min_z
        type: float64
      - name: max_z
        type: float64
      name: ProjectedMap
      package: map_msgs
    - definition: 'string frame_id

        float64 x

        float64 y

        float64 width

        float64 height

        float64 min_z

        float64 max_z'
      fields:
      - name: frame_id
        type: string
      - name: x
        type: float64
      - name: y
        type: float64
      - name: width
        type: float64
      - name: height
        type: float64
      - name: min_z
        type: float64
      - name: max_z
        type: float64
      name: ProjectedMapInfo
      package: map_msgs
    name: map_msgs
    path: /opt/ros/melodic/share/map_msgs
    services:
    - definition: 'float64 x

        float64 y

        float64 l_x

        float64 l_y

        ---

        nav_msgs/OccupancyGrid sub_map'
      name: GetMapROI
      package: map_msgs
      request:
        definition: 'float64 x

          float64 y

          float64 l_x

          float64 l_y'
        fields:
        - name: x
          type: float64
        - name: y
          type: float64
        - name: l_x
          type: float64
        - name: l_y
          type: float64
        name: GetMapROIRequest
        package: map_msgs
      response:
        definition: nav_msgs/OccupancyGrid sub_map
        fields:
        - name: sub_map
          type: nav_msgs/OccupancyGrid
        name: GetMapROIResponse
        package: map_msgs
    - definition: "# Get the map as a sensor_msgs/PointCloud2 \n---\nsensor_msgs/PointCloud2\
        \ map\n"
      name: GetPointMap
      package: map_msgs
      request:
        definition: '# Get the map as a sensor_msgs/PointCloud2'
        name: GetPointMapRequest
        package: map_msgs
      response:
        definition: sensor_msgs/PointCloud2 map
        fields:
        - name: map
          type: sensor_msgs/PointCloud2
        name: GetPointMapResponse
        package: map_msgs
    - definition: 'float64 x

        float64 y

        float64 z

        float64 r    # if != 0, circular ROI of radius r

        float64 l_x  # if r == 0, length of AABB on x

        float64 l_y  # if r == 0, length of AABB on y

        float64 l_z  # if r == 0, length of AABB on z

        ---

        sensor_msgs/PointCloud2 sub_map'
      name: GetPointMapROI
      package: map_msgs
      request:
        definition: 'float64 x

          float64 y

          float64 z

          float64 r    # if != 0, circular ROI of radius r

          float64 l_x  # if r == 0, length of AABB on x

          float64 l_y  # if r == 0, length of AABB on y

          float64 l_z  # if r == 0, length of AABB on z'
        fields:
        - name: x
          type: float64
        - name: y
          type: float64
        - name: z
          type: float64
        - name: r
          type: float64
        - name: l_x
          type: float64
        - name: l_y
          type: float64
        - name: l_z
          type: float64
        name: GetPointMapROIRequest
        package: map_msgs
      response:
        definition: sensor_msgs/PointCloud2 sub_map
        fields:
        - name: sub_map
          type: sensor_msgs/PointCloud2
        name: GetPointMapROIResponse
        package: map_msgs
    - definition: 'map_msgs/ProjectedMapInfo[] projected_maps_info

        '
      name: ProjectedMapsInfo
      package: map_msgs
      request:
        definition: map_msgs/ProjectedMapInfo[] projected_maps_info
        fields:
        - name: projected_maps_info
          type: map_msgs/ProjectedMapInfo[]
        name: ProjectedMapsInfoRequest
        package: map_msgs
    - definition: "# Save the map to the filesystem\nstd_msgs/String filename \n"
      name: SaveMap
      package: map_msgs
      request:
        definition: '# Save the map to the filesystem

          std_msgs/String filename'
        fields:
        - name: filename
          type: std_msgs/String
        name: SaveMapRequest
        package: map_msgs
    - definition: '---

        map_msgs/ProjectedMapInfo[] projected_maps_info

        '
      name: SetMapProjections
      package: map_msgs
      response:
        definition: map_msgs/ProjectedMapInfo[] projected_maps_info
        fields:
        - name: projected_maps_info
          type: map_msgs/ProjectedMapInfo[]
        name: SetMapProjectionsResponse
        package: map_msgs
  - actions: []
    messages: []
    name: diagnostic_updater
    path: /opt/ros/melodic/share/diagnostic_updater
    services: []
  - actions: []
    messages:
    - definition: "# A 3D map in binary format, as Octree\nHeader header\n\n# Flag to\
        \ denote a binary (only free/occupied) or full occupancy octree (.bt/.ot file)\n\
        bool binary\n\n# Class id of the contained octree \nstring id\n\n# Resolution\
        \ (in m) of the smallest octree nodes\nfloat64 resolution\n\n# binary serialization\
        \ of octree, use conversions.h to read and write octrees\nint8[] data\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: binary
        type: bool
      - name: id
        type: string
      - name: resolution
        type: float64
      - name: data
        type: int8[]
      name: Octomap
      package: octomap_msgs
    - definition: "# A 3D map in binary format, as Octree\nHeader header\n\n# The pose\
        \ of the octree with respect to the header frame \ngeometry_msgs/Pose origin\n\
        \n# The actual octree msg\noctomap_msgs/Octomap octomap\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: origin
        type: geometry_msgs/Pose
      - name: octomap
        type: octomap_msgs/Octomap
      name: OctomapWithPose
      package: octomap_msgs
    name: octomap_msgs
    path: /opt/ros/melodic/share/octomap_msgs
    services:
    - definition: '# Clear a region specified by a global axis-aligned bounding box
        in stored OctoMap


        # minimum corner point of axis-aligned bounding box in global frame

        geometry_msgs/Point min

        # maximum corner point of axis-aligned bounding box in global frame

        geometry_msgs/Point max

        ---


        '
      name: BoundingBoxQuery
      package: octomap_msgs
      request:
        definition: '# Clear a region specified by a global axis-aligned bounding box
          in stored OctoMap


          # minimum corner point of axis-aligned bounding box in global frame

          geometry_msgs/Point min

          # maximum corner point of axis-aligned bounding box in global frame

          geometry_msgs/Point max'
        fields:
        - name: min
          type: geometry_msgs/Point
        - name: max
          type: geometry_msgs/Point
        name: BoundingBoxQueryRequest
        package: octomap_msgs
    - definition: '# Get the map as a octomap

        ---

        octomap_msgs/Octomap map

        '
      name: GetOctomap
      package: octomap_msgs
      request:
        definition: '# Get the map as a octomap'
        name: GetOctomapRequest
        package: octomap_msgs
      response:
        definition: octomap_msgs/Octomap map
        fields:
        - name: map
          type: octomap_msgs/Octomap
        name: GetOctomapResponse
        package: octomap_msgs
  - actions: []
    messages: []
    name: rotate_recovery
    path: /opt/ros/melodic/share/rotate_recovery
    services: []
  - actions: []
    messages: []
    name: roscreate
    path: /opt/ros/melodic/share/roscreate
    services: []
  - actions: []
    messages: []
    name: message_runtime
    path: /opt/ros/melodic/share/message_runtime
    services: []
  - actions: []
    messages: []
    name: geneus
    path: /opt/ros/melodic/share/geneus
    services: []
  - actions: []
    messages: []
    name: rosparam
    path: /opt/ros/melodic/share/rosparam
    services: []
  - actions: []
    messages: []
    name: nodelet_topic_tools
    path: /opt/ros/melodic/share/nodelet_topic_tools
    services: []
  - actions: []
    messages:
    - definition: 'string name

        bool value

        '
      fields:
      - name: name
        type: string
      - name: value
        type: bool
      name: BoolParameter
      package: dynamic_reconfigure
    - definition: 'BoolParameter[] bools

        IntParameter[] ints

        StrParameter[] strs

        DoubleParameter[] doubles

        GroupState[] groups

        '
      fields:
      - name: bools
        type: dynamic_reconfigure/BoolParameter[]
      - name: ints
        type: dynamic_reconfigure/IntParameter[]
      - name: strs
        type: dynamic_reconfigure/StrParameter[]
      - name: doubles
        type: dynamic_reconfigure/DoubleParameter[]
      - name: groups
        type: dynamic_reconfigure/GroupState[]
      name: Config
      package: dynamic_reconfigure
    - definition: 'Group[] groups

        Config max

        Config min

        Config dflt

        '
      fields:
      - name: groups
        type: dynamic_reconfigure/Group[]
      - name: max
        type: dynamic_reconfigure/Config
      - name: min
        type: dynamic_reconfigure/Config
      - name: dflt
        type: dynamic_reconfigure/Config
      name: ConfigDescription
      package: dynamic_reconfigure
    - definition: 'string name

        float64 value

        '
      fields:
      - name: name
        type: string
      - name: value
        type: float64
      name: DoubleParameter
      package: dynamic_reconfigure
    - definition: "string name\nstring type\nParamDescription[] parameters\nint32 parent\
        \ \nint32 id\n"
      fields:
      - name: name
        type: string
      - name: type
        type: string
      - name: parameters
        type: dynamic_reconfigure/ParamDescription[]
      - name: parent
        type: int32
      - name: id
        type: int32
      name: Group
      package: dynamic_reconfigure
    - definition: 'string name

        bool state

        int32 id

        int32 parent

        '
      fields:
      - name: name
        type: string
      - name: state
        type: bool
      - name: id
        type: int32
      - name: parent
        type: int32
      name: GroupState
      package: dynamic_reconfigure
    - definition: 'string name

        int32 value

        '
      fields:
      - name: name
        type: string
      - name: value
        type: int32
      name: IntParameter
      package: dynamic_reconfigure
    - definition: 'string name

        string type

        uint32 level

        string description

        string edit_method

        '
      fields:
      - name: name
        type: string
      - name: type
        type: string
      - name: level
        type: uint32
      - name: description
        type: string
      - name: edit_method
        type: string
      name: ParamDescription
      package: dynamic_reconfigure
    - constants:
      - name: RECONFIGURE_CLOSE
        type: byte
        value: '3'
      - name: RECONFIGURE_STOP
        type: byte
        value: '1'
      - name: RECONFIGURE_RUNNING
        type: byte
        value: '0'
      definition: '# This message is deprecated, please use driver_base/SensorLevels
        instead.


        byte RECONFIGURE_CLOSE = 3  # Parameters that need a sensor to be stopped completely
        when changed

        byte RECONFIGURE_STOP = 1  # Parameters that need a sensor to stop streaming
        when changed

        byte RECONFIGURE_RUNNING = 0 # Parameters that can be changed while a sensor
        is streaming

        '
      name: SensorLevels
      package: dynamic_reconfigure
    - definition: 'string name

        string value

        '
      fields:
      - name: name
        type: string
      - name: value
        type: string
      name: StrParameter
      package: dynamic_reconfigure
    name: dynamic_reconfigure
    path: /opt/ros/melodic/share/dynamic_reconfigure
    services:
    - definition: 'Config config

        ---

        Config config

        '
      name: Reconfigure
      package: dynamic_reconfigure
      request:
        definition: Config config
        fields:
        - name: config
          type: dynamic_reconfigure/Config
        name: ReconfigureRequest
        package: dynamic_reconfigure
      response:
        definition: Config config
        fields:
        - name: config
          type: dynamic_reconfigure/Config
        name: ReconfigureResponse
        package: dynamic_reconfigure
  - actions: []
    messages: []
    name: xmlrpcpp
    path: /opt/ros/melodic/share/xmlrpcpp
    services: []
  - actions: []
    messages: []
    name: genmsg
    path: /opt/ros/melodic/share/genmsg
    services: []
  - actions: []
    messages: []
    name: rosmsg
    path: /opt/ros/melodic/share/rosmsg
    services: []
  - actions: []
    messages: []
    name: eigen_stl_containers
    path: /opt/ros/melodic/share/eigen_stl_containers
    services: []
  - actions: []
    messages: []
    name: rosunit
    path: /opt/ros/melodic/share/rosunit
    services: []
  - actions: []
    messages: []
    name: pluginlib
    path: /opt/ros/melodic/share/pluginlib
    services: []
  - actions: []
    messages: []
    name: roscpp_core
    path: /opt/ros/melodic/share/roscpp_core
    services: []
  - actions: []
    messages: []
    name: image_transport
    path: /opt/ros/melodic/share/image_transport
    services: []
  - actions: []
    messages: []
    name: tf2_py
    path: /opt/ros/melodic/share/tf2_py
    services: []
  - actions: []
    messages: []
    name: ros_comm
    path: /opt/ros/melodic/share/ros_comm
    services: []
  - actions: []
    messages: []
    name: rosbuild
    path: /opt/ros/melodic/share/rosbuild
    services: []
  - actions:
    - definition: '# Get the map as a nav_msgs/OccupancyGrid

        ---

        nav_msgs/OccupancyGrid map

        ---

        # no feedback'
      feedback:
        definition: '# no feedback'
        name: GetMapFeedback
        package: nav_msgs
      goal:
        definition: '# Get the map as a nav_msgs/OccupancyGrid'
        name: GetMapGoal
        package: nav_msgs
      name: GetMap
      package: nav_msgs
      result:
        definition: nav_msgs/OccupancyGrid map
        fields:
        - name: map
          type: nav_msgs/OccupancyGrid
        name: GetMapResult
        package: nav_msgs
    messages:
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        GetMapActionGoal action_goal

        GetMapActionResult action_result

        GetMapActionFeedback action_feedback

        '
      fields:
      - name: action_goal
        type: nav_msgs/GetMapActionGoal
      - name: action_result
        type: nav_msgs/GetMapActionResult
      - name: action_feedback
        type: nav_msgs/GetMapActionFeedback
      name: GetMapAction
      package: nav_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        GetMapFeedback feedback

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: feedback
        type: nav_msgs/GetMapFeedback
      name: GetMapActionFeedback
      package: nav_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalID goal_id

        GetMapGoal goal

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: goal_id
        type: actionlib_msgs/GoalID
      - name: goal
        type: nav_msgs/GetMapGoal
      name: GetMapActionGoal
      package: nav_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        GetMapResult result

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: result
        type: nav_msgs/GetMapResult
      name: GetMapActionResult
      package: nav_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        # no feedback

        '
      name: GetMapFeedback
      package: nav_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        # Get the map as a nav_msgs/OccupancyGrid

        '
      name: GetMapGoal
      package: nav_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        nav_msgs/OccupancyGrid map

        '
      fields:
      - name: map
        type: nav_msgs/OccupancyGrid
      name: GetMapResult
      package: nav_msgs
    - definition: '#an array of cells in a 2D grid

        Header header

        float32 cell_width

        float32 cell_height

        geometry_msgs/Point[] cells

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: cell_width
        type: float32
      - name: cell_height
        type: float32
      - name: cells
        type: geometry_msgs/Point[]
      name: GridCells
      package: nav_msgs
    - definition: '# This hold basic information about the characterists of the OccupancyGrid


        # The time at which the map was loaded

        time map_load_time

        # The map resolution [m/cell]

        float32 resolution

        # Map width [cells]

        uint32 width

        # Map height [cells]

        uint32 height

        # The origin of the map [m, m, rad].  This is the real-world pose of the

        # cell (0,0) in the map.

        geometry_msgs/Pose origin'
      fields:
      - name: map_load_time
        type: time
      - name: resolution
        type: float32
      - name: width
        type: uint32
      - name: height
        type: uint32
      - name: origin
        type: geometry_msgs/Pose
      name: MapMetaData
      package: nav_msgs
    - definition: "# This represents a 2-D grid map, in which each cell represents the\
        \ probability of\n# occupancy.\n\nHeader header \n\n#MetaData for the map\n\
        MapMetaData info\n\n# The map data, in row-major order, starting with (0,0).\
        \  Occupancy\n# probabilities are in the range [0,100].  Unknown is -1.\nint8[]\
        \ data\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: info
        type: nav_msgs/MapMetaData
      - name: data
        type: int8[]
      name: OccupancyGrid
      package: nav_msgs
    - definition: "# This represents an estimate of a position and velocity in free\
        \ space.  \n# The pose in this message should be specified in the coordinate\
        \ frame given by header.frame_id.\n# The twist in this message should be specified\
        \ in the coordinate frame given by the child_frame_id\nHeader header\nstring\
        \ child_frame_id\ngeometry_msgs/PoseWithCovariance pose\ngeometry_msgs/TwistWithCovariance\
        \ twist\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: child_frame_id
        type: string
      - name: pose
        type: geometry_msgs/PoseWithCovariance
      - name: twist
        type: geometry_msgs/TwistWithCovariance
      name: Odometry
      package: nav_msgs
    - definition: '#An array of poses that represents a Path for a robot to follow

        Header header

        geometry_msgs/PoseStamped[] poses

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: poses
        type: geometry_msgs/PoseStamped[]
      name: Path
      package: nav_msgs
    name: nav_msgs
    path: /opt/ros/melodic/share/nav_msgs
    services:
    - definition: '# Get the map as a nav_msgs/OccupancyGrid

        ---

        nav_msgs/OccupancyGrid map

        '
      name: GetMap
      package: nav_msgs
      request:
        definition: '# Get the map as a nav_msgs/OccupancyGrid'
        name: GetMapRequest
        package: nav_msgs
      response:
        definition: nav_msgs/OccupancyGrid map
        fields:
        - name: map
          type: nav_msgs/OccupancyGrid
        name: GetMapResponse
        package: nav_msgs
    - definition: "# Get a plan from the current position to the goal Pose \n\n# The\
        \ start pose for the plan\ngeometry_msgs/PoseStamped start\n\n# The final pose\
        \ of the goal position\ngeometry_msgs/PoseStamped goal\n\n# If the goal is obstructed,\
        \ how many meters the planner can \n# relax the constraint in x and y before\
        \ failing. \nfloat32 tolerance\n---\nnav_msgs/Path plan\n"
      name: GetPlan
      package: nav_msgs
      request:
        definition: "# Get a plan from the current position to the goal Pose \n\n# The\
          \ start pose for the plan\ngeometry_msgs/PoseStamped start\n\n# The final\
          \ pose of the goal position\ngeometry_msgs/PoseStamped goal\n\n# If the goal\
          \ is obstructed, how many meters the planner can \n# relax the constraint\
          \ in x and y before failing. \nfloat32 tolerance"
        fields:
        - name: start
          type: geometry_msgs/PoseStamped
        - name: goal
          type: geometry_msgs/PoseStamped
        - name: tolerance
          type: float32
        name: GetPlanRequest
        package: nav_msgs
      response:
        definition: nav_msgs/Path plan
        fields:
        - name: plan
          type: nav_msgs/Path
        name: GetPlanResponse
        package: nav_msgs
    - definition: '# Set a new map together with an initial pose

        nav_msgs/OccupancyGrid map

        geometry_msgs/PoseWithCovarianceStamped initial_pose

        ---

        bool success


        '
      name: SetMap
      package: nav_msgs
      request:
        definition: '# Set a new map together with an initial pose

          nav_msgs/OccupancyGrid map

          geometry_msgs/PoseWithCovarianceStamped initial_pose'
        fields:
        - name: map
          type: nav_msgs/OccupancyGrid
        - name: initial_pose
          type: geometry_msgs/PoseWithCovarianceStamped
        name: SetMapRequest
        package: nav_msgs
      response:
        definition: bool success
        fields:
        - name: success
          type: bool
        name: SetMapResponse
        package: nav_msgs
  - actions: []
    messages: []
    name: cmake_modules
    path: /opt/ros/melodic/share/cmake_modules
    services: []
  - actions: []
    messages:
    - definition: 'Header header

        uint32[] data

        geometry_msgs/Point32 origin

        geometry_msgs/Vector3 resolutions

        uint32 size_x

        uint32 size_y

        uint32 size_z


        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: data
        type: uint32[]
      - name: origin
        type: geometry_msgs/Point32
      - name: resolutions
        type: geometry_msgs/Vector3
      - name: size_x
        type: uint32
      - name: size_y
        type: uint32
      - name: size_z
        type: uint32
      name: VoxelGrid
      package: costmap_2d
    name: costmap_2d
    path: /opt/ros/melodic/share/costmap_2d
    services: []
  - actions: []
    messages:
    - definition: bool data
      fields:
      - name: data
        type: bool
      name: Bool
      package: std_msgs
    - definition: 'byte data

        '
      fields:
      - name: data
        type: byte
      name: Byte
      package: std_msgs
    - definition: '# Please look at the MultiArrayLayout message definition for

        # documentation on all multiarrays.


        MultiArrayLayout  layout        # specification of data layout

        byte[]            data          # array of data


        '
      fields:
      - name: layout
        type: std_msgs/MultiArrayLayout
      - name: data
        type: byte[]
      name: ByteMultiArray
      package: std_msgs
    - definition: char data
      fields:
      - name: data
        type: char
      name: Char
      package: std_msgs
    - definition: 'float32 r

        float32 g

        float32 b

        float32 a

        '
      fields:
      - name: r
        type: float32
      - name: g
        type: float32
      - name: b
        type: float32
      - name: a
        type: float32
      name: ColorRGBA
      package: std_msgs
    - definition: 'duration data

        '
      fields:
      - name: data
        type: duration
      name: Duration
      package: std_msgs
    - definition: ''
      name: Empty
      package: std_msgs
    - definition: float32 data
      fields:
      - name: data
        type: float32
      name: Float32
      package: std_msgs
    - definition: '# Please look at the MultiArrayLayout message definition for

        # documentation on all multiarrays.


        MultiArrayLayout  layout        # specification of data layout

        float32[]         data          # array of data


        '
      fields:
      - name: layout
        type: std_msgs/MultiArrayLayout
      - name: data
        type: float32[]
      name: Float32MultiArray
      package: std_msgs
    - definition: float64 data
      fields:
      - name: data
        type: float64
      name: Float64
      package: std_msgs
    - definition: '# Please look at the MultiArrayLayout message definition for

        # documentation on all multiarrays.


        MultiArrayLayout  layout        # specification of data layout

        float64[]         data          # array of data


        '
      fields:
      - name: layout
        type: std_msgs/MultiArrayLayout
      - name: data
        type: float64[]
      name: Float64MultiArray
      package: std_msgs
    - definition: "# Standard metadata for higher-level stamped data types.\n# This\
        \ is generally used to communicate timestamped data \n# in a particular coordinate\
        \ frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer\
        \ timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since\
        \ epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds\
        \ since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling\
        \ sugar is provided by the client library\ntime stamp\n#Frame this data is associated\
        \ with\nstring frame_id\n"
      fields:
      - name: seq
        type: uint32
      - name: stamp
        type: time
      - name: frame_id
        type: string
      name: Header
      package: std_msgs
    - definition: 'int16 data

        '
      fields:
      - name: data
        type: int16
      name: Int16
      package: std_msgs
    - definition: '# Please look at the MultiArrayLayout message definition for

        # documentation on all multiarrays.


        MultiArrayLayout  layout        # specification of data layout

        int16[]           data          # array of data


        '
      fields:
      - name: layout
        type: std_msgs/MultiArrayLayout
      - name: data
        type: int16[]
      name: Int16MultiArray
      package: std_msgs
    - definition: int32 data
      fields:
      - name: data
        type: int32
      name: Int32
      package: std_msgs
    - definition: '# Please look at the MultiArrayLayout message definition for

        # documentation on all multiarrays.


        MultiArrayLayout  layout        # specification of data layout

        int32[]           data          # array of data


        '
      fields:
      - name: layout
        type: std_msgs/MultiArrayLayout
      - name: data
        type: int32[]
      name: Int32MultiArray
      package: std_msgs
    - definition: int64 data
      fields:
      - name: data
        type: int64
      name: Int64
      package: std_msgs
    - definition: '# Please look at the MultiArrayLayout message definition for

        # documentation on all multiarrays.


        MultiArrayLayout  layout        # specification of data layout

        int64[]           data          # array of data


        '
      fields:
      - name: layout
        type: std_msgs/MultiArrayLayout
      - name: data
        type: int64[]
      name: Int64MultiArray
      package: std_msgs
    - definition: 'int8 data

        '
      fields:
      - name: data
        type: int8
      name: Int8
      package: std_msgs
    - definition: '# Please look at the MultiArrayLayout message definition for

        # documentation on all multiarrays.


        MultiArrayLayout  layout        # specification of data layout

        int8[]            data          # array of data


        '
      fields:
      - name: layout
        type: std_msgs/MultiArrayLayout
      - name: data
        type: int8[]
      name: Int8MultiArray
      package: std_msgs
    - definition: 'string label   # label of given dimension

        uint32 size    # size of given dimension (in type units)

        uint32 stride  # stride of given dimension'
      fields:
      - name: label
        type: string
      - name: size
        type: uint32
      - name: stride
        type: uint32
      name: MultiArrayDimension
      package: std_msgs
    - definition: "# The multiarray declares a generic multi-dimensional array of a\n\
        # particular data type.  Dimensions are ordered from outer most\n# to inner\
        \ most.\n\nMultiArrayDimension[] dim # Array of dimension properties\nuint32\
        \ data_offset        # padding elements at front of data\n\n# Accessors should\
        \ ALWAYS be written in terms of dimension stride\n# and specified outer-most\
        \ dimension first.\n# \n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i\
        \ + dim_stride[2]*j + k]\n#\n# A standard, 3-channel 640x480 image with interleaved\
        \ color channels\n# would be specified as:\n#\n# dim[0].label  = \"height\"\n\
        # dim[0].size   = 480\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride\
        \ is just size of image)\n# dim[1].label  = \"width\"\n# dim[1].size   = 640\n\
        # dim[1].stride = 3*640 = 1920\n# dim[2].label  = \"channel\"\n# dim[2].size\
        \   = 3\n# dim[2].stride = 3\n#\n# multiarray(i,j,k) refers to the ith row,\
        \ jth column, and kth channel.\n"
      fields:
      - name: dim
        type: std_msgs/MultiArrayDimension[]
      - name: data_offset
        type: uint32
      name: MultiArrayLayout
      package: std_msgs
    - definition: 'string data

        '
      fields:
      - name: data
        type: string
      name: String
      package: std_msgs
    - definition: 'time data

        '
      fields:
      - name: data
        type: time
      name: Time
      package: std_msgs
    - definition: 'uint16 data

        '
      fields:
      - name: data
        type: uint16
      name: UInt16
      package: std_msgs
    - definition: '# Please look at the MultiArrayLayout message definition for

        # documentation on all multiarrays.


        MultiArrayLayout  layout        # specification of data layout

        uint16[]            data        # array of data


        '
      fields:
      - name: layout
        type: std_msgs/MultiArrayLayout
      - name: data
        type: uint16[]
      name: UInt16MultiArray
      package: std_msgs
    - definition: uint32 data
      fields:
      - name: data
        type: uint32
      name: UInt32
      package: std_msgs
    - definition: '# Please look at the MultiArrayLayout message definition for

        # documentation on all multiarrays.


        MultiArrayLayout  layout        # specification of data layout

        uint32[]          data          # array of data


        '
      fields:
      - name: layout
        type: std_msgs/MultiArrayLayout
      - name: data
        type: uint32[]
      name: UInt32MultiArray
      package: std_msgs
    - definition: uint64 data
      fields:
      - name: data
        type: uint64
      name: UInt64
      package: std_msgs
    - definition: '# Please look at the MultiArrayLayout message definition for

        # documentation on all multiarrays.


        MultiArrayLayout  layout        # specification of data layout

        uint64[]          data          # array of data


        '
      fields:
      - name: layout
        type: std_msgs/MultiArrayLayout
      - name: data
        type: uint64[]
      name: UInt64MultiArray
      package: std_msgs
    - definition: 'uint8 data

        '
      fields:
      - name: data
        type: uint8
      name: UInt8
      package: std_msgs
    - definition: '# Please look at the MultiArrayLayout message definition for

        # documentation on all multiarrays.


        MultiArrayLayout  layout        # specification of data layout

        uint8[]           data          # array of data


        '
      fields:
      - name: layout
        type: std_msgs/MultiArrayLayout
      - name: data
        type: uint8[]
      name: UInt8MultiArray
      package: std_msgs
    name: std_msgs
    path: /opt/ros/melodic/share/std_msgs
    services: []
  - actions: []
    messages: []
    name: xacro
    path: /opt/ros/melodic/share/xacro
    services: []
  - actions: []
    messages: []
    name: simple_grasping
    path: /opt/ros/melodic/share/simple_grasping
    services: []
  - actions: []
    messages: []
    name: rosmake
    path: /opt/ros/melodic/share/rosmake
    services: []
  - actions: []
    messages: []
    name: message_generation
    path: /opt/ros/melodic/share/message_generation
    services: []
  - actions: []
    messages: []
    name: slam_karto
    path: /opt/ros/melodic/share/slam_karto
    services: []
  - actions: []
    messages: []
    name: moveit_simple_controller_manager
    path: /opt/ros/melodic/share/moveit_simple_controller_manager
    services: []
  - actions:
    - definition: '# The trajectory to execute

        RobotTrajectory trajectory


        ---


        # Error code - encodes the overall reason for failure

        MoveItErrorCodes error_code


        ---


        # The internal state that the move group action currently is in

        string state

        '
      feedback:
        definition: '# The internal state that the move group action currently is in

          string state'
        fields:
        - name: state
          type: string
        name: ExecuteTrajectoryFeedback
        package: moveit_msgs
      goal:
        definition: '# The trajectory to execute

          RobotTrajectory trajectory'
        fields:
        - name: trajectory
          type: moveit_msgs/RobotTrajectory
        name: ExecuteTrajectoryGoal
        package: moveit_msgs
      name: ExecuteTrajectory
      package: moveit_msgs
      result:
        definition: '# Error code - encodes the overall reason for failure

          MoveItErrorCodes error_code'
        fields:
        - name: error_code
          type: moveit_msgs/MoveItErrorCodes
        name: ExecuteTrajectoryResult
        package: moveit_msgs
    - definition: '# Motion planning request to pass to planner

        MotionPlanRequest request


        # Planning options

        PlanningOptions planning_options


        ---


        # An error code reflecting what went wrong

        MoveItErrorCodes error_code


        # The full starting state of the robot at the start of the trajectory

        moveit_msgs/RobotState trajectory_start


        # The trajectory that moved group produced for execution

        moveit_msgs/RobotTrajectory planned_trajectory


        # The trace of the trajectory recorded during execution

        moveit_msgs/RobotTrajectory executed_trajectory


        # The amount of time it took to complete the motion plan

        float64 planning_time


        ---


        # The internal state that the move group action currently is in

        string state

        '
      feedback:
        definition: '# The internal state that the move group action currently is in

          string state'
        fields:
        - name: state
          type: string
        name: MoveGroupFeedback
        package: moveit_msgs
      goal:
        definition: '# Motion planning request to pass to planner

          MotionPlanRequest request


          # Planning options

          PlanningOptions planning_options'
        fields:
        - name: request
          type: moveit_msgs/MotionPlanRequest
        - name: planning_options
          type: moveit_msgs/PlanningOptions
        name: MoveGroupGoal
        package: moveit_msgs
      name: MoveGroup
      package: moveit_msgs
      result:
        definition: '# An error code reflecting what went wrong

          MoveItErrorCodes error_code


          # The full starting state of the robot at the start of the trajectory

          moveit_msgs/RobotState trajectory_start


          # The trajectory that moved group produced for execution

          moveit_msgs/RobotTrajectory planned_trajectory


          # The trace of the trajectory recorded during execution

          moveit_msgs/RobotTrajectory executed_trajectory


          # The amount of time it took to complete the motion plan

          float64 planning_time'
        fields:
        - name: error_code
          type: moveit_msgs/MoveItErrorCodes
        - name: trajectory_start
          type: moveit_msgs/RobotState
        - name: planned_trajectory
          type: moveit_msgs/RobotTrajectory
        - name: executed_trajectory
          type: moveit_msgs/RobotTrajectory
        - name: planning_time
          type: float64
        name: MoveGroupResult
        package: moveit_msgs
    - definition: '# An action for picking up an object


        # The name of the object to pick up (as known in the planning scene)

        string target_name


        # which group should be used to plan for pickup

        string group_name


        # which end-effector to be used for pickup (ideally descending from the group
        above)

        string end_effector


        # a list of possible grasps to be used. At least one grasp must be filled in

        Grasp[] possible_grasps


        # the name that the support surface (e.g. table) has in the collision map

        # can be left empty if no name is available

        string support_surface_name


        # whether collisions between the gripper and the support surface should be acceptable

        # during move from pre-grasp to grasp and during lift. Collisions when moving
        to the

        # pre-grasp location are still not allowed even if this is set to true.

        bool allow_gripper_support_collision


        # The names of the links the object to be attached is allowed to touch;

        # If this is left empty, it defaults to the links in the used end-effector

        string[] attached_object_touch_links


        # Optionally notify the pick action that it should approach the object further,

        # as much as possible (this minimizing the distance to the object before the
        grasp)

        # along the approach direction; Note: this option changes the grasping poses

        # supplied in possible_grasps[] such that they are closer to the object when
        possible.

        bool minimize_object_distance


        # Optional constraints to be imposed on every point in the motion plan

        Constraints path_constraints


        # The name of the motion planner to use. If no name is specified,

        # a default motion planner will be used

        string planner_id


        # an optional list of obstacles that we have semantic information about

        # and that can be touched/pushed/moved in the course of grasping;

        # CAREFUL: If the object name ''all'' is used, collisions with all objects are
        disabled during the approach & lift.

        string[] allowed_touch_objects


        # The maximum amount of time the motion planner is allowed to plan for

        float64 allowed_planning_time


        # Planning options

        PlanningOptions planning_options


        ---


        # The overall result of the pickup attempt

        MoveItErrorCodes error_code


        # The full starting state of the robot at the start of the trajectory

        RobotState trajectory_start


        # The trajectory that moved group produced for execution

        RobotTrajectory[] trajectory_stages


        string[] trajectory_descriptions


        # The performed grasp, if attempt was successful

        Grasp grasp


        # The amount of time in seconds it took to complete the plan

        float64 planning_time

        ---


        # The internal state that the pickup action currently is in

        string state

        '
      feedback:
        definition: '# The internal state that the pickup action currently is in

          string state'
        fields:
        - name: state
          type: string
        name: PickupFeedback
        package: moveit_msgs
      goal:
        definition: '# An action for picking up an object


          # The name of the object to pick up (as known in the planning scene)

          string target_name


          # which group should be used to plan for pickup

          string group_name


          # which end-effector to be used for pickup (ideally descending from the group
          above)

          string end_effector


          # a list of possible grasps to be used. At least one grasp must be filled
          in

          Grasp[] possible_grasps


          # the name that the support surface (e.g. table) has in the collision map

          # can be left empty if no name is available

          string support_surface_name


          # whether collisions between the gripper and the support surface should be
          acceptable

          # during move from pre-grasp to grasp and during lift. Collisions when moving
          to the

          # pre-grasp location are still not allowed even if this is set to true.

          bool allow_gripper_support_collision


          # The names of the links the object to be attached is allowed to touch;

          # If this is left empty, it defaults to the links in the used end-effector

          string[] attached_object_touch_links


          # Optionally notify the pick action that it should approach the object further,

          # as much as possible (this minimizing the distance to the object before the
          grasp)

          # along the approach direction; Note: this option changes the grasping poses

          # supplied in possible_grasps[] such that they are closer to the object when
          possible.

          bool minimize_object_distance


          # Optional constraints to be imposed on every point in the motion plan

          Constraints path_constraints


          # The name of the motion planner to use. If no name is specified,

          # a default motion planner will be used

          string planner_id


          # an optional list of obstacles that we have semantic information about

          # and that can be touched/pushed/moved in the course of grasping;

          # CAREFUL: If the object name ''all'' is used, collisions with all objects
          are disabled during the approach & lift.

          string[] allowed_touch_objects


          # The maximum amount of time the motion planner is allowed to plan for

          float64 allowed_planning_time


          # Planning options

          PlanningOptions planning_options'
        fields:
        - name: target_name
          type: string
        - name: group_name
          type: string
        - name: end_effector
          type: string
        - name: possible_grasps
          type: moveit_msgs/Grasp[]
        - name: support_surface_name
          type: string
        - name: allow_gripper_support_collision
          type: bool
        - name: attached_object_touch_links
          type: string[]
        - name: minimize_object_distance
          type: bool
        - name: path_constraints
          type: moveit_msgs/Constraints
        - name: planner_id
          type: string
        - name: allowed_touch_objects
          type: string[]
        - name: allowed_planning_time
          type: float64
        - name: planning_options
          type: moveit_msgs/PlanningOptions
        name: PickupGoal
        package: moveit_msgs
      name: Pickup
      package: moveit_msgs
      result:
        definition: '# The overall result of the pickup attempt

          MoveItErrorCodes error_code


          # The full starting state of the robot at the start of the trajectory

          RobotState trajectory_start


          # The trajectory that moved group produced for execution

          RobotTrajectory[] trajectory_stages


          string[] trajectory_descriptions


          # The performed grasp, if attempt was successful

          Grasp grasp


          # The amount of time in seconds it took to complete the plan

          float64 planning_time'
        fields:
        - name: error_code
          type: moveit_msgs/MoveItErrorCodes
        - name: trajectory_start
          type: moveit_msgs/RobotState
        - name: trajectory_stages
          type: moveit_msgs/RobotTrajectory[]
        - name: trajectory_descriptions
          type: string[]
        - name: grasp
          type: moveit_msgs/Grasp
        - name: planning_time
          type: float64
        name: PickupResult
        package: moveit_msgs
    - definition: "# An action for placing an object\n\n# which group to be used to\
        \ plan for grasping\nstring group_name\n\n# the name that the attached object\
        \ to place\nstring attached_object_name\n\n# a list of possible transformations\
        \ for placing the object\nPlaceLocation[] place_locations\n\n# if the user prefers\
        \ setting the eef pose (same as in pick) rather than \n# the location of an\
        \ end effector, this flag should be set to true\nbool place_eef\n\n# the name\
        \ that the support surface (e.g. table) has in the collision world\n# can be\
        \ left empty if no name is available\nstring support_surface_name\n\n# whether\
        \ collisions between the gripper and the support surface should be acceptable\n\
        # during move from pre-place to place and during retreat. Collisions when moving\
        \ to the\n# pre-place location are still not allowed even if this is set to\
        \ true.\nbool allow_gripper_support_collision\n\n# Optional constraints to be\
        \ imposed on every point in the motion plan\nConstraints path_constraints\n\n\
        # The name of the motion planner to use. If no name is specified,\n# a default\
        \ motion planner will be used\nstring planner_id\n\n# an optional list of obstacles\
        \ that we have semantic information about\n# and that can be touched/pushed/moved\
        \ in the course of grasping;\n# CAREFUL: If the object name 'all' is used, collisions\
        \ with all objects are disabled during the approach & lift.\nstring[] allowed_touch_objects\n\
        \n# The maximum amount of time the motion planner is allowed to plan for\nfloat64\
        \ allowed_planning_time\n\n# Planning options\nPlanningOptions planning_options\n\
        \n---\n\n# The result of the pickup attempt\nMoveItErrorCodes error_code\n\n\
        # The full starting state of the robot at the start of the trajectory\nRobotState\
        \ trajectory_start\n\n# The trajectory that moved group produced for execution\n\
        RobotTrajectory[] trajectory_stages\n\nstring[] trajectory_descriptions\n\n\
        # The successful place location, if any\nPlaceLocation place_location\n\n# The\
        \ amount of time in seconds it took to complete the plan\nfloat64 planning_time\n\
        ---\n\n# The internal state that the place action currently is in\nstring state\n"
      feedback:
        definition: '# The internal state that the place action currently is in

          string state'
        fields:
        - name: state
          type: string
        name: PlaceFeedback
        package: moveit_msgs
      goal:
        definition: "# An action for placing an object\n\n# which group to be used to\
          \ plan for grasping\nstring group_name\n\n# the name that the attached object\
          \ to place\nstring attached_object_name\n\n# a list of possible transformations\
          \ for placing the object\nPlaceLocation[] place_locations\n\n# if the user\
          \ prefers setting the eef pose (same as in pick) rather than \n# the location\
          \ of an end effector, this flag should be set to true\nbool place_eef\n\n\
          # the name that the support surface (e.g. table) has in the collision world\n\
          # can be left empty if no name is available\nstring support_surface_name\n\
          \n# whether collisions between the gripper and the support surface should\
          \ be acceptable\n# during move from pre-place to place and during retreat.\
          \ Collisions when moving to the\n# pre-place location are still not allowed\
          \ even if this is set to true.\nbool allow_gripper_support_collision\n\n#\
          \ Optional constraints to be imposed on every point in the motion plan\nConstraints\
          \ path_constraints\n\n# The name of the motion planner to use. If no name\
          \ is specified,\n# a default motion planner will be used\nstring planner_id\n\
          \n# an optional list of obstacles that we have semantic information about\n\
          # and that can be touched/pushed/moved in the course of grasping;\n# CAREFUL:\
          \ If the object name 'all' is used, collisions with all objects are disabled\
          \ during the approach & lift.\nstring[] allowed_touch_objects\n\n# The maximum\
          \ amount of time the motion planner is allowed to plan for\nfloat64 allowed_planning_time\n\
          \n# Planning options\nPlanningOptions planning_options"
        fields:
        - name: group_name
          type: string
        - name: attached_object_name
          type: string
        - name: place_locations
          type: moveit_msgs/PlaceLocation[]
        - name: place_eef
          type: bool
        - name: support_surface_name
          type: string
        - name: allow_gripper_support_collision
          type: bool
        - name: path_constraints
          type: moveit_msgs/Constraints
        - name: planner_id
          type: string
        - name: allowed_touch_objects
          type: string[]
        - name: allowed_planning_time
          type: float64
        - name: planning_options
          type: moveit_msgs/PlanningOptions
        name: PlaceGoal
        package: moveit_msgs
      name: Place
      package: moveit_msgs
      result:
        definition: '# The result of the pickup attempt

          MoveItErrorCodes error_code


          # The full starting state of the robot at the start of the trajectory

          RobotState trajectory_start


          # The trajectory that moved group produced for execution

          RobotTrajectory[] trajectory_stages


          string[] trajectory_descriptions


          # The successful place location, if any

          PlaceLocation place_location


          # The amount of time in seconds it took to complete the plan

          float64 planning_time'
        fields:
        - name: error_code
          type: moveit_msgs/MoveItErrorCodes
        - name: trajectory_start
          type: moveit_msgs/RobotState
        - name: trajectory_stages
          type: moveit_msgs/RobotTrajectory[]
        - name: trajectory_descriptions
          type: string[]
        - name: place_location
          type: moveit_msgs/PlaceLocation
        - name: planning_time
          type: float64
        name: PlaceResult
        package: moveit_msgs
    messages:
    - definition: '# whether or not collision checking is enabled

        bool[] enabled

        '
      fields:
      - name: enabled
        type: bool[]
      name: AllowedCollisionEntry
      package: moveit_msgs
    - definition: "# The list of entry names in the matrix\nstring[] entry_names\n\n\
        # The individual entries in the allowed collision matrix\n# square, symmetric,\
        \ with same order as entry_names\nAllowedCollisionEntry[] entry_values\n\n#\
        \ In addition to the collision matrix itself, we also have \n# the default entry\
        \ value for each entry name.\n\n# If the allowed collision flag is queried for\
        \ a pair of names (n1, n2)\n# that is not found in the collision matrix itself,\
        \ the value of\n# the collision flag is considered to be that of the entry (n1\
        \ or n2)\n# specified in the list below. If both n1 and n2 are found in the\
        \ list \n# of defaults, the result is computed with an AND operation\n\nstring[]\
        \ default_entry_names\nbool[] default_entry_values\n"
      fields:
      - name: entry_names
        type: string[]
      - name: entry_values
        type: moveit_msgs/AllowedCollisionEntry[]
      - name: default_entry_names
        type: string[]
      - name: default_entry_values
        type: bool[]
      name: AllowedCollisionMatrix
      package: moveit_msgs
    - definition: "# The CollisionObject will be attached with a fixed joint to this\
        \ link\nstring link_name\n\n#This contains the actual shapes and poses for the\
        \ CollisionObject\n#to be attached to the link\n#If action is remove and no\
        \ object.id is set, all objects\n#attached to the link indicated by link_name\
        \ will be removed\nCollisionObject object\n\n# The set of links that the attached\
        \ objects are allowed to touch\n# by default - the link_name is already considered\
        \ by default\nstring[] touch_links\n\n# If certain links were placed in a particular\
        \ posture for this object to remain attached \n# (e.g., an end effector closing\
        \ around an object), the posture necessary for releasing\n# the object is stored\
        \ here\ntrajectory_msgs/JointTrajectory detach_posture\n\n# The weight of the\
        \ attached object, if known\nfloat64 weight\n"
      fields:
      - name: link_name
        type: string
      - name: object
        type: moveit_msgs/CollisionObject
      - name: touch_links
        type: string[]
      - name: detach_posture
        type: trajectory_msgs/JointTrajectory
      - name: weight
        type: float64
      name: AttachedCollisionObject
      package: moveit_msgs
    - definition: '# Define a volume in 3D


        # A set of solid geometric primitives that make up the volume to define (as
        a union)

        shape_msgs/SolidPrimitive[] primitives


        # The poses at which the primitives are located

        geometry_msgs/Pose[] primitive_poses


        # In addition to primitives, meshes can be specified to add to the bounding
        volume (again, as union)

        shape_msgs/Mesh[] meshes


        # The poses at which the meshes are located

        geometry_msgs/Pose[] mesh_poses

        '
      fields:
      - name: primitives
        type: shape_msgs/SolidPrimitive[]
      - name: primitive_poses
        type: geometry_msgs/Pose[]
      - name: meshes
        type: shape_msgs/Mesh[]
      - name: mesh_poses
        type: geometry_msgs/Pose[]
      name: BoundingVolume
      package: moveit_msgs
    - constants:
      - name: ADD
        type: byte
        value: '0'
      - name: REMOVE
        type: byte
        value: '1'
      - name: APPEND
        type: byte
        value: '2'
      - name: MOVE
        type: byte
        value: '3'
      definition: '# a header, used for interpreting the poses

        Header header


        # the id of the object (name used in MoveIt)

        string id


        # The object type in a database of known objects

        object_recognition_msgs/ObjectType type


        # the the collision geometries associated with the object;

        # their poses are with respect to the specified header


        # solid geometric primitives

        shape_msgs/SolidPrimitive[] primitives

        geometry_msgs/Pose[] primitive_poses


        # meshes

        shape_msgs/Mesh[] meshes

        geometry_msgs/Pose[] mesh_poses


        # bounding planes (equation is specified, but the plane can be oriented using
        an additional pose)

        shape_msgs/Plane[] planes

        geometry_msgs/Pose[] plane_poses


        # Adds the object to the planning scene. If the object previously existed, it
        is replaced.

        byte ADD=0


        # Removes the object from the environment entirely (everything that matches
        the specified id)

        byte REMOVE=1


        # Append to an object that already exists in the planning scene. If the does
        not exist, it is added.

        byte APPEND=2


        # If an object already exists in the scene, new poses can be sent (the geometry
        arrays must be left empty)

        # if solely moving the object is desired

        byte MOVE=3


        # Operation to be performed

        byte operation

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: id
        type: string
      - name: type
        type: object_recognition_msgs/ObjectType
      - name: primitives
        type: shape_msgs/SolidPrimitive[]
      - name: primitive_poses
        type: geometry_msgs/Pose[]
      - name: meshes
        type: shape_msgs/Mesh[]
      - name: mesh_poses
        type: geometry_msgs/Pose[]
      - name: planes
        type: shape_msgs/Plane[]
      - name: plane_poses
        type: geometry_msgs/Pose[]
      - name: operation
        type: byte
      name: CollisionObject
      package: moveit_msgs
    - definition: "# This message contains result from constraint evaluation\n# result\
        \ specifies the result of constraint evaluation \n# (true indicates state satisfies\
        \ constraint, false indicates state violates constraint)\n# if false, distance\
        \ specifies a measure of the distance of the state from the constraint\n# if\
        \ true, distance is set to zero\nbool result\nfloat64 distance\n"
      fields:
      - name: result
        type: bool
      - name: distance
        type: float64
      name: ConstraintEvalResult
      package: moveit_msgs
    - definition: '# This message contains a list of motion planning constraints.

        # All constraints must be satisfied for a goal to be considered valid


        string name


        JointConstraint[] joint_constraints


        PositionConstraint[] position_constraints


        OrientationConstraint[] orientation_constraints


        VisibilityConstraint[] visibility_constraints

        '
      fields:
      - name: name
        type: string
      - name: joint_constraints
        type: moveit_msgs/JointConstraint[]
      - name: position_constraints
        type: moveit_msgs/PositionConstraint[]
      - name: orientation_constraints
        type: moveit_msgs/OrientationConstraint[]
      - name: visibility_constraints
        type: moveit_msgs/VisibilityConstraint[]
      name: Constraints
      package: moveit_msgs
    - constants:
      - name: ROBOT_LINK
        type: uint32
        value: '0'
      - name: WORLD_OBJECT
        type: uint32
        value: '1'
      - name: ROBOT_ATTACHED
        type: uint32
        value: '2'
      definition: "# Standard ROS header contains information \n# about the frame in\
        \ which this \n# contact is specified\nHeader header\n\n# Position of the contact\
        \ point\ngeometry_msgs/Point position\n\n# Normal corresponding to the contact\
        \ point\ngeometry_msgs/Vector3 normal \n\n# Depth of contact point\nfloat64\
        \ depth\n\n# Name of the first body that is in contact\n# This could be a link\
        \ or a namespace that represents a body\nstring contact_body_1\nuint32 body_type_1\n\
        \n# Name of the second body that is in contact\n# This could be a link or a\
        \ namespace that represents a body\nstring contact_body_2\nuint32 body_type_2\n\
        \nuint32 ROBOT_LINK=0\nuint32 WORLD_OBJECT=1\nuint32 ROBOT_ATTACHED=2\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: position
        type: geometry_msgs/Point
      - name: normal
        type: geometry_msgs/Vector3
      - name: depth
        type: float64
      - name: contact_body_1
        type: string
      - name: body_type_1
        type: uint32
      - name: contact_body_2
        type: string
      - name: body_type_2
        type: uint32
      name: ContactInformation
      package: moveit_msgs
    - definition: '# The density of the cost source

        float64 cost_density


        # The volume of the cost source is represented as an

        # axis-aligned bounding box (AABB)

        # The AABB is specified by two of its opposite corners


        geometry_msgs/Vector3 aabb_min


        geometry_msgs/Vector3 aabb_max

        '
      fields:
      - name: cost_density
        type: float64
      - name: aabb_min
        type: geometry_msgs/Vector3
      - name: aabb_max
        type: geometry_msgs/Vector3
      name: CostSource
      package: moveit_msgs
    - definition: '# The robot state to display

        RobotState state


        # Optionally, various links can be highlighted

        ObjectColor[] highlight_links

        '
      fields:
      - name: state
        type: moveit_msgs/RobotState
      - name: highlight_links
        type: moveit_msgs/ObjectColor[]
      name: DisplayRobotState
      package: moveit_msgs
    - definition: "# The model id for which this path has been generated\nstring model_id\n\
        \n# The representation of the path contains position values for all the joints\
        \ that are moving along the path; a sequence of trajectories may be specified\n\
        RobotTrajectory[] trajectory\n\n# The robot state is used to obtain positions\
        \ for all/some of the joints of the robot. \n# It is used by the path display\
        \ node to determine the positions of the joints that are not specified in the\
        \ joint path message above. \n# If the robot state message contains joint position\
        \ information for joints that are also mentioned in the joint path message,\
        \ the positions in the joint path message will overwrite the positions specified\
        \ in the robot state message. \nRobotState trajectory_start\n"
      fields:
      - name: model_id
        type: string
      - name: trajectory
        type: moveit_msgs/RobotTrajectory[]
      - name: trajectory_start
        type: moveit_msgs/RobotState
      name: DisplayTrajectory
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        ExecuteTrajectoryActionGoal action_goal

        ExecuteTrajectoryActionResult action_result

        ExecuteTrajectoryActionFeedback action_feedback

        '
      fields:
      - name: action_goal
        type: moveit_msgs/ExecuteTrajectoryActionGoal
      - name: action_result
        type: moveit_msgs/ExecuteTrajectoryActionResult
      - name: action_feedback
        type: moveit_msgs/ExecuteTrajectoryActionFeedback
      name: ExecuteTrajectoryAction
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        ExecuteTrajectoryFeedback feedback

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: feedback
        type: moveit_msgs/ExecuteTrajectoryFeedback
      name: ExecuteTrajectoryActionFeedback
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalID goal_id

        ExecuteTrajectoryGoal goal

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: goal_id
        type: actionlib_msgs/GoalID
      - name: goal
        type: moveit_msgs/ExecuteTrajectoryGoal
      name: ExecuteTrajectoryActionGoal
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        ExecuteTrajectoryResult result

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: result
        type: moveit_msgs/ExecuteTrajectoryResult
      name: ExecuteTrajectoryActionResult
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        # The internal state that the move group action currently is in

        string state


        '
      fields:
      - name: state
        type: string
      name: ExecuteTrajectoryFeedback
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        # The trajectory to execute

        RobotTrajectory trajectory


        '
      fields:
      - name: trajectory
        type: moveit_msgs/RobotTrajectory
      name: ExecuteTrajectoryGoal
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        # Error code - encodes the overall reason for failure

        MoveItErrorCodes error_code


        '
      fields:
      - name: error_code
        type: moveit_msgs/MoveItErrorCodes
      name: ExecuteTrajectoryResult
      package: moveit_msgs
    - definition: "# This message contains a description of a grasp that would be used\n\
        # with a particular end-effector to grasp an object, including how to\n# approach\
        \ it, grip it, etc.  This message does not contain any\n# information about\
        \ a \"grasp point\" (a position ON the object).\n# Whatever generates this message\
        \ should have already combined\n# information about grasp points with information\
        \ about the geometry\n# of the end-effector to compute the grasp_pose in this\
        \ message.\n\n# A name for this grasp\nstring id\n\n# The internal posture of\
        \ the hand for the pre-grasp\n# only positions are used\ntrajectory_msgs/JointTrajectory\
        \ pre_grasp_posture\n\n# The internal posture of the hand for the grasp\n# positions\
        \ and efforts are used\ntrajectory_msgs/JointTrajectory grasp_posture\n\n# The\
        \ position of the end-effector for the grasp.  This is the pose of\n# the \"\
        parent_link\" of the end-effector, not actually the pose of any\n# link *in*\
        \ the end-effector.  Typically this would be the pose of the\n# most distal\
        \ wrist link before the hand (end-effector) links began.\ngeometry_msgs/PoseStamped\
        \ grasp_pose\n\n# The estimated probability of success for this grasp, or some\
        \ other\n# measure of how \"good\" it is.\nfloat64 grasp_quality\n\n# The approach\
        \ direction to take before picking an object\nGripperTranslation pre_grasp_approach\n\
        \n# The retreat direction to take after a grasp has been completed (object is\
        \ attached)\nGripperTranslation post_grasp_retreat\n\n# The retreat motion to\
        \ perform when releasing the object; this information\n# is not necessary for\
        \ the grasp itself, but when releasing the object,\n# the information will be\
        \ necessary. The grasp used to perform a pickup\n# is returned as part of the\
        \ result, so this information is available for \n# later use.\nGripperTranslation\
        \ post_place_retreat\n\n# the maximum contact force to use while grasping (<=0\
        \ to disable)\nfloat32 max_contact_force\n\n# an optional list of obstacles\
        \ that we have semantic information about\n# and that can be touched/pushed/moved\
        \ in the course of grasping\nstring[] allowed_touch_objects\n"
      fields:
      - name: id
        type: string
      - name: pre_grasp_posture
        type: trajectory_msgs/JointTrajectory
      - name: grasp_posture
        type: trajectory_msgs/JointTrajectory
      - name: grasp_pose
        type: geometry_msgs/PoseStamped
      - name: grasp_quality
        type: float64
      - name: pre_grasp_approach
        type: moveit_msgs/GripperTranslation
      - name: post_grasp_retreat
        type: moveit_msgs/GripperTranslation
      - name: post_place_retreat
        type: moveit_msgs/GripperTranslation
      - name: max_contact_force
        type: float32
      - name: allowed_touch_objects
        type: string[]
      name: Grasp
      package: moveit_msgs
    - definition: '# defines a translation for the gripper, used in pickup or place
        tasks

        # for example for lifting an object off a table or approaching the table for
        placing


        # the direction of the translation

        geometry_msgs/Vector3Stamped direction


        # the desired translation distance

        float32 desired_distance


        # the min distance that must be considered feasible before the

        # grasp is even attempted

        float32 min_distance

        '
      fields:
      - name: direction
        type: geometry_msgs/Vector3Stamped
      - name: desired_distance
        type: float32
      - name: min_distance
        type: float32
      name: GripperTranslation
      package: moveit_msgs
    - definition: '# Constrain the position of a joint to be within a certain bound

        string joint_name


        # the bound to be achieved is [position - tolerance_below, position + tolerance_above]

        float64 position

        float64 tolerance_above

        float64 tolerance_below


        # A weighting factor for this constraint (denotes relative importance to other
        constraints. Closer to zero means less important)

        float64 weight'
      fields:
      - name: joint_name
        type: string
      - name: position
        type: float64
      - name: tolerance_above
        type: float64
      - name: tolerance_below
        type: float64
      - name: weight
        type: float64
      name: JointConstraint
      package: moveit_msgs
    - definition: '# This message contains information about limits of a particular
        joint (or control dimension)

        string joint_name


        # true if the joint has position limits

        bool has_position_limits


        # min and max position limits

        float64 min_position

        float64 max_position


        # true if joint has velocity limits

        bool has_velocity_limits


        # max velocity limit

        float64 max_velocity

        # min_velocity is assumed to be -max_velocity


        # true if joint has acceleration limits

        bool has_acceleration_limits

        # max acceleration limit

        float64 max_acceleration

        # min_acceleration is assumed to be -max_acceleration

        '
      fields:
      - name: joint_name
        type: string
      - name: has_position_limits
        type: bool
      - name: min_position
        type: float64
      - name: max_position
        type: float64
      - name: has_velocity_limits
        type: bool
      - name: max_velocity
        type: float64
      - name: has_acceleration_limits
        type: bool
      - name: max_acceleration
        type: float64
      name: JointLimits
      package: moveit_msgs
    - definition: '# A list of joints in the kinematic tree

        string[] joint_names

        # A list of joint limits corresponding to the joint names

        moveit_msgs/JointLimits[] limits

        # A list of links that the kinematics node provides solutions for

        string[] link_names

        '
      fields:
      - name: joint_names
        type: string[]
      - name: limits
        type: moveit_msgs/JointLimits[]
      - name: link_names
        type: string[]
      name: KinematicSolverInfo
      package: moveit_msgs
    - definition: '#name for the link

        string link_name


        # padding to apply to the link

        float64 padding

        '
      fields:
      - name: link_name
        type: string
      - name: padding
        type: float64
      name: LinkPadding
      package: moveit_msgs
    - definition: '#name for the link

        string link_name


        # scaling to apply to the link

        float64 scale

        '
      fields:
      - name: link_name
        type: string
      - name: scale
        type: float64
      name: LinkScale
      package: moveit_msgs
    - definition: "# The representation of a solution to a planning problem, including\
        \ intermediate data\n\n# The starting state considered for the robot solution\
        \ path\nRobotState trajectory_start\n\n# The group used for planning (usually\
        \ the same as in the request)\nstring group_name\n\n# Multiple solution paths\
        \ are reported, each reflecting intermediate steps in the trajectory processing\n\
        \n# The list of reported trajectories\nRobotTrajectory[] trajectory\n\n# Description\
        \ of the reported trajectories (name of processing step)\nstring[] description\n\
        \n# The amount of time spent computing a particular step in motion plan computation\
        \ \nfloat64[] processing_time\n\n# Status at the end of this plan\nMoveItErrorCodes\
        \ error_code\n"
      fields:
      - name: trajectory_start
        type: moveit_msgs/RobotState
      - name: group_name
        type: string
      - name: trajectory
        type: moveit_msgs/RobotTrajectory[]
      - name: description
        type: string[]
      - name: processing_time
        type: float64[]
      - name: error_code
        type: moveit_msgs/MoveItErrorCodes
      name: MotionPlanDetailedResponse
      package: moveit_msgs
    - definition: '# This service contains the definition for a request to the motion

        # planner and the output it provides


        # Parameters for the workspace that the planner should work inside

        WorkspaceParameters workspace_parameters


        # Starting state updates. If certain joints should be considered

        # at positions other than the current ones, these positions should

        # be set here

        RobotState start_state


        # The possible goal states for the model to plan for. Each element of

        # the array defines a goal region. The goal is achieved

        # if the constraints for a particular region are satisfied

        Constraints[] goal_constraints


        # No state at any point along the path in the produced motion plan will violate
        these constraints (this applies to all points, not just waypoints)

        Constraints path_constraints


        # The constraints the resulting trajectory must satisfy

        TrajectoryConstraints trajectory_constraints


        # The name of the motion planner to use. If no name is specified,

        # a default motion planner will be used

        string planner_id


        # The name of the group of joints on which this planner is operating

        string group_name


        # The number of times this plan is to be computed. Shortest solution

        # will be reported.

        int32 num_planning_attempts


        # The maximum amount of time the motion planner is allowed to plan for (in seconds)

        float64 allowed_planning_time


        # Scaling factors for optionally reducing the maximum joint velocities and

        # accelerations.  Allowed values are in (0,1].  The maximum joint velocity and

        # acceleration specified in the robot model are multiplied by thier respective

        # factors.  If either are outside their valid ranges (importantly, this

        # includes being set to 0.0), the factor is set to the default value of 1.0

        # internally (i.e., maximum joint velocity or maximum joint acceleration).

        float64 max_velocity_scaling_factor

        float64 max_acceleration_scaling_factor


        '
      fields:
      - name: workspace_parameters
        type: moveit_msgs/WorkspaceParameters
      - name: start_state
        type: moveit_msgs/RobotState
      - name: goal_constraints
        type: moveit_msgs/Constraints[]
      - name: path_constraints
        type: moveit_msgs/Constraints
      - name: trajectory_constraints
        type: moveit_msgs/TrajectoryConstraints
      - name: planner_id
        type: string
      - name: group_name
        type: string
      - name: num_planning_attempts
        type: int32
      - name: allowed_planning_time
        type: float64
      - name: max_velocity_scaling_factor
        type: float64
      - name: max_acceleration_scaling_factor
        type: float64
      name: MotionPlanRequest
      package: moveit_msgs
    - definition: '# The representation of a solution to a planning problem


        # The corresponding robot state

        RobotState trajectory_start


        # The group used for planning (usually the same as in the request)

        string group_name


        # A solution trajectory, if found

        RobotTrajectory trajectory


        # Planning time (seconds)

        float64 planning_time


        # Error code - encodes the overall reason for failure

        MoveItErrorCodes error_code

        '
      fields:
      - name: trajectory_start
        type: moveit_msgs/RobotState
      - name: group_name
        type: string
      - name: trajectory
        type: moveit_msgs/RobotTrajectory
      - name: planning_time
        type: float64
      - name: error_code
        type: moveit_msgs/MoveItErrorCodes
      name: MotionPlanResponse
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        MoveGroupActionGoal action_goal

        MoveGroupActionResult action_result

        MoveGroupActionFeedback action_feedback

        '
      fields:
      - name: action_goal
        type: moveit_msgs/MoveGroupActionGoal
      - name: action_result
        type: moveit_msgs/MoveGroupActionResult
      - name: action_feedback
        type: moveit_msgs/MoveGroupActionFeedback
      name: MoveGroupAction
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        MoveGroupFeedback feedback

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: feedback
        type: moveit_msgs/MoveGroupFeedback
      name: MoveGroupActionFeedback
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalID goal_id

        MoveGroupGoal goal

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: goal_id
        type: actionlib_msgs/GoalID
      - name: goal
        type: moveit_msgs/MoveGroupGoal
      name: MoveGroupActionGoal
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        MoveGroupResult result

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: result
        type: moveit_msgs/MoveGroupResult
      name: MoveGroupActionResult
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        # The internal state that the move group action currently is in

        string state


        '
      fields:
      - name: state
        type: string
      name: MoveGroupFeedback
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        # Motion planning request to pass to planner

        MotionPlanRequest request


        # Planning options

        PlanningOptions planning_options


        '
      fields:
      - name: request
        type: moveit_msgs/MotionPlanRequest
      - name: planning_options
        type: moveit_msgs/PlanningOptions
      name: MoveGroupGoal
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        # An error code reflecting what went wrong

        MoveItErrorCodes error_code


        # The full starting state of the robot at the start of the trajectory

        moveit_msgs/RobotState trajectory_start


        # The trajectory that moved group produced for execution

        moveit_msgs/RobotTrajectory planned_trajectory


        # The trace of the trajectory recorded during execution

        moveit_msgs/RobotTrajectory executed_trajectory


        # The amount of time it took to complete the motion plan

        float64 planning_time


        '
      fields:
      - name: error_code
        type: moveit_msgs/MoveItErrorCodes
      - name: trajectory_start
        type: moveit_msgs/RobotState
      - name: planned_trajectory
        type: moveit_msgs/RobotTrajectory
      - name: executed_trajectory
        type: moveit_msgs/RobotTrajectory
      - name: planning_time
        type: float64
      name: MoveGroupResult
      package: moveit_msgs
    - constants:
      - name: SUCCESS
        type: int32
        value: '1'
      - name: FAILURE
        type: int32
        value: '99999'
      - name: PLANNING_FAILED
        type: int32
        value: '-1'
      - name: INVALID_MOTION_PLAN
        type: int32
        value: '-2'
      - name: MOTION_PLAN_INVALIDATED_BY_ENVIRONMENT_CHANGE
        type: int32
        value: '-3'
      - name: CONTROL_FAILED
        type: int32
        value: '-4'
      - name: UNABLE_TO_AQUIRE_SENSOR_DATA
        type: int32
        value: '-5'
      - name: TIMED_OUT
        type: int32
        value: '-6'
      - name: PREEMPTED
        type: int32
        value: '-7'
      - name: START_STATE_IN_COLLISION
        type: int32
        value: '-10'
      - name: START_STATE_VIOLATES_PATH_CONSTRAINTS
        type: int32
        value: '-11'
      - name: GOAL_IN_COLLISION
        type: int32
        value: '-12'
      - name: GOAL_VIOLATES_PATH_CONSTRAINTS
        type: int32
        value: '-13'
      - name: GOAL_CONSTRAINTS_VIOLATED
        type: int32
        value: '-14'
      - name: INVALID_GROUP_NAME
        type: int32
        value: '-15'
      - name: INVALID_GOAL_CONSTRAINTS
        type: int32
        value: '-16'
      - name: INVALID_ROBOT_STATE
        type: int32
        value: '-17'
      - name: INVALID_LINK_NAME
        type: int32
        value: '-18'
      - name: INVALID_OBJECT_NAME
        type: int32
        value: '-19'
      - name: FRAME_TRANSFORM_FAILURE
        type: int32
        value: '-21'
      - name: COLLISION_CHECKING_UNAVAILABLE
        type: int32
        value: '-22'
      - name: ROBOT_STATE_STALE
        type: int32
        value: '-23'
      - name: SENSOR_INFO_STALE
        type: int32
        value: '-24'
      - name: NO_IK_SOLUTION
        type: int32
        value: '-31'
      definition: 'int32 val


        # overall behavior

        int32 SUCCESS=1

        int32 FAILURE=99999


        int32 PLANNING_FAILED=-1

        int32 INVALID_MOTION_PLAN=-2

        int32 MOTION_PLAN_INVALIDATED_BY_ENVIRONMENT_CHANGE=-3

        int32 CONTROL_FAILED=-4

        int32 UNABLE_TO_AQUIRE_SENSOR_DATA=-5

        int32 TIMED_OUT=-6

        int32 PREEMPTED=-7


        # planning & kinematics request errors

        int32 START_STATE_IN_COLLISION=-10

        int32 START_STATE_VIOLATES_PATH_CONSTRAINTS=-11


        int32 GOAL_IN_COLLISION=-12

        int32 GOAL_VIOLATES_PATH_CONSTRAINTS=-13

        int32 GOAL_CONSTRAINTS_VIOLATED=-14


        int32 INVALID_GROUP_NAME=-15

        int32 INVALID_GOAL_CONSTRAINTS=-16

        int32 INVALID_ROBOT_STATE=-17

        int32 INVALID_LINK_NAME=-18

        int32 INVALID_OBJECT_NAME=-19


        # system errors

        int32 FRAME_TRANSFORM_FAILURE=-21

        int32 COLLISION_CHECKING_UNAVAILABLE=-22

        int32 ROBOT_STATE_STALE=-23

        int32 SENSOR_INFO_STALE=-24


        # kinematics errors

        int32 NO_IK_SOLUTION=-31

        '
      fields:
      - name: val
        type: int32
      name: MoveItErrorCodes
      package: moveit_msgs
    - definition: '# The object id for which we specify color

        string id


        # The value of the color

        std_msgs/ColorRGBA color

        '
      fields:
      - name: id
        type: string
      - name: color
        type: std_msgs/ColorRGBA
      name: ObjectColor
      package: moveit_msgs
    - definition: '# This message contains the definition of an orientation constraint.


        Header header


        # The desired orientation of the robot link specified as a quaternion

        geometry_msgs/Quaternion orientation


        # The robot link this constraint refers to

        string link_name


        # optional axis-angle error tolerances specified

        float64 absolute_x_axis_tolerance

        float64 absolute_y_axis_tolerance

        float64 absolute_z_axis_tolerance


        # A weighting factor for this constraint (denotes relative importance to other
        constraints. Closer to zero means less important)

        float64 weight

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: orientation
        type: geometry_msgs/Quaternion
      - name: link_name
        type: string
      - name: absolute_x_axis_tolerance
        type: float64
      - name: absolute_y_axis_tolerance
        type: float64
      - name: absolute_z_axis_tolerance
        type: float64
      - name: weight
        type: float64
      name: OrientationConstraint
      package: moveit_msgs
    - definition: '# the pose of the box

        geometry_msgs/Pose pose


        # the extents of the box, assuming the center is at the origin

        geometry_msgs/Point32 extents

        '
      fields:
      - name: pose
        type: geometry_msgs/Pose
      - name: extents
        type: geometry_msgs/Point32
      name: OrientedBoundingBox
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        PickupActionGoal action_goal

        PickupActionResult action_result

        PickupActionFeedback action_feedback

        '
      fields:
      - name: action_goal
        type: moveit_msgs/PickupActionGoal
      - name: action_result
        type: moveit_msgs/PickupActionResult
      - name: action_feedback
        type: moveit_msgs/PickupActionFeedback
      name: PickupAction
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        PickupFeedback feedback

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: feedback
        type: moveit_msgs/PickupFeedback
      name: PickupActionFeedback
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalID goal_id

        PickupGoal goal

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: goal_id
        type: actionlib_msgs/GoalID
      - name: goal
        type: moveit_msgs/PickupGoal
      name: PickupActionGoal
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        PickupResult result

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: result
        type: moveit_msgs/PickupResult
      name: PickupActionResult
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        # The internal state that the pickup action currently is in

        string state


        '
      fields:
      - name: state
        type: string
      name: PickupFeedback
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        # An action for picking up an object


        # The name of the object to pick up (as known in the planning scene)

        string target_name


        # which group should be used to plan for pickup

        string group_name


        # which end-effector to be used for pickup (ideally descending from the group
        above)

        string end_effector


        # a list of possible grasps to be used. At least one grasp must be filled in

        Grasp[] possible_grasps


        # the name that the support surface (e.g. table) has in the collision map

        # can be left empty if no name is available

        string support_surface_name


        # whether collisions between the gripper and the support surface should be acceptable

        # during move from pre-grasp to grasp and during lift. Collisions when moving
        to the

        # pre-grasp location are still not allowed even if this is set to true.

        bool allow_gripper_support_collision


        # The names of the links the object to be attached is allowed to touch;

        # If this is left empty, it defaults to the links in the used end-effector

        string[] attached_object_touch_links


        # Optionally notify the pick action that it should approach the object further,

        # as much as possible (this minimizing the distance to the object before the
        grasp)

        # along the approach direction; Note: this option changes the grasping poses

        # supplied in possible_grasps[] such that they are closer to the object when
        possible.

        bool minimize_object_distance


        # Optional constraints to be imposed on every point in the motion plan

        Constraints path_constraints


        # The name of the motion planner to use. If no name is specified,

        # a default motion planner will be used

        string planner_id


        # an optional list of obstacles that we have semantic information about

        # and that can be touched/pushed/moved in the course of grasping;

        # CAREFUL: If the object name ''all'' is used, collisions with all objects are
        disabled during the approach & lift.

        string[] allowed_touch_objects


        # The maximum amount of time the motion planner is allowed to plan for

        float64 allowed_planning_time


        # Planning options

        PlanningOptions planning_options


        '
      fields:
      - name: target_name
        type: string
      - name: group_name
        type: string
      - name: end_effector
        type: string
      - name: possible_grasps
        type: moveit_msgs/Grasp[]
      - name: support_surface_name
        type: string
      - name: allow_gripper_support_collision
        type: bool
      - name: attached_object_touch_links
        type: string[]
      - name: minimize_object_distance
        type: bool
      - name: path_constraints
        type: moveit_msgs/Constraints
      - name: planner_id
        type: string
      - name: allowed_touch_objects
        type: string[]
      - name: allowed_planning_time
        type: float64
      - name: planning_options
        type: moveit_msgs/PlanningOptions
      name: PickupGoal
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        # The overall result of the pickup attempt

        MoveItErrorCodes error_code


        # The full starting state of the robot at the start of the trajectory

        RobotState trajectory_start


        # The trajectory that moved group produced for execution

        RobotTrajectory[] trajectory_stages


        string[] trajectory_descriptions


        # The performed grasp, if attempt was successful

        Grasp grasp


        # The amount of time in seconds it took to complete the plan

        float64 planning_time

        '
      fields:
      - name: error_code
        type: moveit_msgs/MoveItErrorCodes
      - name: trajectory_start
        type: moveit_msgs/RobotState
      - name: trajectory_stages
        type: moveit_msgs/RobotTrajectory[]
      - name: trajectory_descriptions
        type: string[]
      - name: grasp
        type: moveit_msgs/Grasp
      - name: planning_time
        type: float64
      name: PickupResult
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        PlaceActionGoal action_goal

        PlaceActionResult action_result

        PlaceActionFeedback action_feedback

        '
      fields:
      - name: action_goal
        type: moveit_msgs/PlaceActionGoal
      - name: action_result
        type: moveit_msgs/PlaceActionResult
      - name: action_feedback
        type: moveit_msgs/PlaceActionFeedback
      name: PlaceAction
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        PlaceFeedback feedback

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: feedback
        type: moveit_msgs/PlaceFeedback
      name: PlaceActionFeedback
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalID goal_id

        PlaceGoal goal

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: goal_id
        type: actionlib_msgs/GoalID
      - name: goal
        type: moveit_msgs/PlaceGoal
      name: PlaceActionGoal
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        PlaceResult result

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: result
        type: moveit_msgs/PlaceResult
      name: PlaceActionResult
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        # The internal state that the place action currently is in

        string state


        '
      fields:
      - name: state
        type: string
      name: PlaceFeedback
      package: moveit_msgs
    - definition: "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
        # An action for placing an object\n\n# which group to be used to plan for grasping\n\
        string group_name\n\n# the name that the attached object to place\nstring attached_object_name\n\
        \n# a list of possible transformations for placing the object\nPlaceLocation[]\
        \ place_locations\n\n# if the user prefers setting the eef pose (same as in\
        \ pick) rather than \n# the location of an end effector, this flag should be\
        \ set to true\nbool place_eef\n\n# the name that the support surface (e.g. table)\
        \ has in the collision world\n# can be left empty if no name is available\n\
        string support_surface_name\n\n# whether collisions between the gripper and\
        \ the support surface should be acceptable\n# during move from pre-place to\
        \ place and during retreat. Collisions when moving to the\n# pre-place location\
        \ are still not allowed even if this is set to true.\nbool allow_gripper_support_collision\n\
        \n# Optional constraints to be imposed on every point in the motion plan\nConstraints\
        \ path_constraints\n\n# The name of the motion planner to use. If no name is\
        \ specified,\n# a default motion planner will be used\nstring planner_id\n\n\
        # an optional list of obstacles that we have semantic information about\n# and\
        \ that can be touched/pushed/moved in the course of grasping;\n# CAREFUL: If\
        \ the object name 'all' is used, collisions with all objects are disabled during\
        \ the approach & lift.\nstring[] allowed_touch_objects\n\n# The maximum amount\
        \ of time the motion planner is allowed to plan for\nfloat64 allowed_planning_time\n\
        \n# Planning options\nPlanningOptions planning_options\n\n"
      fields:
      - name: group_name
        type: string
      - name: attached_object_name
        type: string
      - name: place_locations
        type: moveit_msgs/PlaceLocation[]
      - name: place_eef
        type: bool
      - name: support_surface_name
        type: string
      - name: allow_gripper_support_collision
        type: bool
      - name: path_constraints
        type: moveit_msgs/Constraints
      - name: planner_id
        type: string
      - name: allowed_touch_objects
        type: string[]
      - name: allowed_planning_time
        type: float64
      - name: planning_options
        type: moveit_msgs/PlanningOptions
      name: PlaceGoal
      package: moveit_msgs
    - definition: "# A name for this grasp\nstring id\n\n# The internal posture of the\
        \ hand for the grasp\n# positions and efforts are used\ntrajectory_msgs/JointTrajectory\
        \ post_place_posture\n\n# The position of the end-effector for the grasp relative\
        \ to a reference frame \n# (that is always specified elsewhere, not in this\
        \ message)\ngeometry_msgs/PoseStamped place_pose\n\n# The approach motion\n\
        GripperTranslation pre_place_approach\n\n# The retreat motion\nGripperTranslation\
        \ post_place_retreat\n\n# an optional list of obstacles that we have semantic\
        \ information about\n# and that can be touched/pushed/moved in the course of\
        \ grasping\nstring[] allowed_touch_objects\n"
      fields:
      - name: id
        type: string
      - name: post_place_posture
        type: trajectory_msgs/JointTrajectory
      - name: place_pose
        type: geometry_msgs/PoseStamped
      - name: pre_place_approach
        type: moveit_msgs/GripperTranslation
      - name: post_place_retreat
        type: moveit_msgs/GripperTranslation
      - name: allowed_touch_objects
        type: string[]
      name: PlaceLocation
      package: moveit_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        # The result of the pickup attempt

        MoveItErrorCodes error_code


        # The full starting state of the robot at the start of the trajectory

        RobotState trajectory_start


        # The trajectory that moved group produced for execution

        RobotTrajectory[] trajectory_stages


        string[] trajectory_descriptions


        # The successful place location, if any

        PlaceLocation place_location


        # The amount of time in seconds it took to complete the plan

        float64 planning_time

        '
      fields:
      - name: error_code
        type: moveit_msgs/MoveItErrorCodes
      - name: trajectory_start
        type: moveit_msgs/RobotState
      - name: trajectory_stages
        type: moveit_msgs/RobotTrajectory[]
      - name: trajectory_descriptions
        type: string[]
      - name: place_location
        type: moveit_msgs/PlaceLocation
      - name: planning_time
        type: float64
      name: PlaceResult
      package: moveit_msgs
    - definition: '# The name of the planner interface

        string name


        # The names of the planner ids within the interface

        string[] planner_ids

        '
      fields:
      - name: name
        type: string
      - name: planner_ids
        type: string[]
      name: PlannerInterfaceDescription
      package: moveit_msgs
    - definition: '# parameter names (same size as values)

        string[] keys


        # parameter values (same size as keys)

        string[] values


        # parameter description (can be empty)

        string[] descriptions

        '
      fields:
      - name: keys
        type: string[]
      - name: values
        type: string[]
      - name: descriptions
        type: string[]
      name: PlannerParams
      package: moveit_msgs
    - definition: "\n# The diff to consider for the planning scene (optional)\nPlanningScene\
        \ planning_scene_diff\n\n# If this flag is set to true, the action\n# returns\
        \ an executable plan in the response but does not attempt execution  \nbool\
        \ plan_only\n\n# If this flag is set to true, the action of planning &\n# executing\
        \ is allowed to look around  (move sensors) if\n# it seems that not enough information\
        \ is available about\n# the environment\nbool look_around\n\n# If this value\
        \ is positive, the action of planning & executing\n# is allowed to look around\
        \ for a maximum number of attempts;\n# If the value is left as 0, the default\
        \ value is used, as set\n# with dynamic_reconfigure\nint32 look_around_attempts\n\
        \n# If set and if look_around is true, this value is used as\n# the maximum\
        \ cost allowed for a path to be considered executable.\n# If the cost of a path\
        \ is higher than this value, more sensing or \n# a new plan needed. If left\
        \ as 0.0 but look_around is true, then \n# the default value set via dynamic_reconfigure\
        \ is used\nfloat64 max_safe_execution_cost\n\n# If the plan becomes invalidated\
        \ during execution, it is possible to have\n# that plan recomputed and execution\
        \ restarted. This flag enables this\n# functionality \nbool replan\n\n# The\
        \ maximum number of replanning attempts \nint32 replan_attempts\n\n# The amount\
        \ of time to wait in between replanning attempts (in seconds)\nfloat64 replan_delay\n"
      fields:
      - name: planning_scene_diff
        type: moveit_msgs/PlanningScene
      - name: plan_only
        type: bool
      - name: look_around
        type: bool
      - name: look_around_attempts
        type: int32
      - name: max_safe_execution_cost
        type: float64
      - name: replan
        type: bool
      - name: replan_attempts
        type: int32
      - name: replan_delay
        type: float64
      name: PlanningOptions
      package: moveit_msgs
    - definition: "# name of planning scene\nstring name\n\n# full robot state\nRobotState\
        \ robot_state\n\n# The name of the robot model this scene is for\nstring robot_model_name\n\
        \n#additional frames for duplicating tf (with respect to the planning frame)\n\
        geometry_msgs/TransformStamped[] fixed_frame_transforms\n\n#full allowed collision\
        \ matrix\nAllowedCollisionMatrix allowed_collision_matrix\n\n# all link paddings\n\
        LinkPadding[] link_padding\n\n# all link scales\nLinkScale[] link_scale\n\n\
        # Attached objects, collision objects, even the octomap or collision map can\
        \ have \n# colors associated to them. This array specifies them.\nObjectColor[]\
        \ object_colors\n\n# the collision map\nPlanningSceneWorld world\n\n# Flag indicating\
        \ whether this scene is to be interpreted as a diff with respect to some other\
        \ scene\nbool is_diff\n"
      fields:
      - name: name
        type: string
      - name: robot_state
        type: moveit_msgs/RobotState
      - name: robot_model_name
        type: string
      - name: fixed_frame_transforms
        type: geometry_msgs/TransformStamped[]
      - name: allowed_collision_matrix
        type: moveit_msgs/AllowedCollisionMatrix
      - name: link_padding
        type: moveit_msgs/LinkPadding[]
      - name: link_scale
        type: moveit_msgs/LinkScale[]
      - name: object_colors
        type: moveit_msgs/ObjectColor[]
      - name: world
        type: moveit_msgs/PlanningSceneWorld
      - name: is_diff
        type: bool
      name: PlanningScene
      package: moveit_msgs
    - constants:
      - name: SCENE_SETTINGS
        type: uint32
        value: '1'
      - name: ROBOT_STATE
        type: uint32
        value: '2'
      - name: ROBOT_STATE_ATTACHED_OBJECTS
        type: uint32
        value: '4'
      - name: WORLD_OBJECT_NAMES
        type: uint32
        value: '8'
      - name: WORLD_OBJECT_GEOMETRY
        type: uint32
        value: '16'
      - name: OCTOMAP
        type: uint32
        value: '32'
      - name: TRANSFORMS
        type: uint32
        value: '64'
      - name: ALLOWED_COLLISION_MATRIX
        type: uint32
        value: '128'
      - name: LINK_PADDING_AND_SCALING
        type: uint32
        value: '256'
      - name: OBJECT_COLORS
        type: uint32
        value: '512'
      definition: "# This message defines the components that make up the PlanningScene\
        \ message.\n# The values can be used as a bitfield to specify which parts of\
        \ the PlanningScene message\n# are of interest\n\n# Scene name, model name,\
        \ model root\nuint32 SCENE_SETTINGS=1\n\n# Joint values of the robot state\n\
        uint32 ROBOT_STATE=2\n\n# Attached objects (including geometry) for the robot\
        \ state\nuint32 ROBOT_STATE_ATTACHED_OBJECTS=4\n\n# The names of the world objects\n\
        uint32 WORLD_OBJECT_NAMES=8\n\n# The geometry of the world objects\nuint32 WORLD_OBJECT_GEOMETRY=16\n\
        \n# The maintained octomap \nuint32 OCTOMAP=32\n\n# The maintained list of transforms\n\
        uint32 TRANSFORMS=64\n\n# The allowed collision matrix\nuint32 ALLOWED_COLLISION_MATRIX=128\n\
        \n# The default link padding and link scaling\nuint32 LINK_PADDING_AND_SCALING=256\n\
        \n# The stored object colors\nuint32 OBJECT_COLORS=512\n\n# Bitfield combining\
        \ options indicated above\nuint32 components\n"
      fields:
      - name: components
        type: uint32
      name: PlanningSceneComponents
      package: moveit_msgs
    - definition: '# collision objects

        CollisionObject[] collision_objects


        # The octomap that represents additional collision data

        octomap_msgs/OctomapWithPose octomap

        '
      fields:
      - name: collision_objects
        type: moveit_msgs/CollisionObject[]
      - name: octomap
        type: octomap_msgs/OctomapWithPose
      name: PlanningSceneWorld
      package: moveit_msgs
    - definition: "# This message contains the definition of a position constraint.\n\
        \nHeader header\n\n# The robot link this constraint refers to\nstring link_name\n\
        \n# The offset (in the link frame) for the target point on the link we are planning\
        \ for\ngeometry_msgs/Vector3 target_point_offset\n\n# The volume this constraint\
        \ refers to \nBoundingVolume constraint_region\n\n# A weighting factor for this\
        \ constraint (denotes relative importance to other constraints. Closer to zero\
        \ means less important)\nfloat64 weight\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: link_name
        type: string
      - name: target_point_offset
        type: geometry_msgs/Vector3
      - name: constraint_region
        type: moveit_msgs/BoundingVolume
      - name: weight
        type: float64
      name: PositionConstraint
      package: moveit_msgs
    - definition: "# A Position IK request message\n\n# The name of the group which\
        \ will be used to compute IK\n# e.g. \"right_arm\", or \"arms\" - see IK specification\
        \ for multiple-groups below\n# Information from the SRDF will be used to automatically\
        \ determine which link \n# to solve IK for, unless ik_link_name is also specified\n\
        string group_name\n\n# A RobotState consisting of hint/seed positions for the\
        \ IK computation and positions \n# for all the other joints in the robot. Additional\
        \ state information provided here is \n# used to specify starting positions\
        \ for other joints/links on the robot.  \n# This state MUST contain state for\
        \ all joints to be used by the IK solver\n# to compute IK. The list of joints\
        \ that the IK solver deals with can be \n# found using the SRDF for the corresponding\
        \ group\nmoveit_msgs/RobotState robot_state\n\n# A set of constraints that the\
        \ IK must obey; by default, this set of constraints is empty\nConstraints constraints\n\
        \n# Find an IK solution that avoids collisions. By default, this is false\n\
        bool avoid_collisions\n\n# (OPTIONAL) The name of the link for which we are\
        \ computing IK\n# If not specified, the link name will be inferred from a combination\
        \ \n# of the group name and the SRDF. If any values are specified for ik_link_names,\n\
        # this value is ignored\nstring ik_link_name\n\n# The stamped pose of the link,\
        \ when the IK solver computes the joint values\n# for all the joints in a group.\
        \ This value is ignored if pose_stamped_vector\n# has any elements specified.\n\
        geometry_msgs/PoseStamped pose_stamped\n\n# Multi-group parameters\n\n# (OPTIONAL)\
        \ The names of the links for which we are computing IK\n# If not specified,\
        \ the link name will be inferred from a combination \n# of the group name and\
        \ the SRDF\nstring[] ik_link_names\n\n# (OPTIONAL) The (stamped) poses of the\
        \ links we are computing IK for (when a group has more than one end effector)\n\
        # e.g. The \"arms\" group might consist of both the \"right_arm\" and the \"\
        left_arm\"\n# The order of the groups referred to is the same as the order setup\
        \ in the SRDF\ngeometry_msgs/PoseStamped[] pose_stamped_vector\n\n# Maximum\
        \ allowed time for IK calculation\nduration timeout\n\n# Maximum number of IK\
        \ attempts (if using random seeds; leave as 0 for the default value specified\
        \ on the param server to be used)\nint32 attempts\n\n"
      fields:
      - name: group_name
        type: string
      - name: robot_state
        type: moveit_msgs/RobotState
      - name: constraints
        type: moveit_msgs/Constraints
      - name: avoid_collisions
        type: bool
      - name: ik_link_name
        type: string
      - name: pose_stamped
        type: geometry_msgs/PoseStamped
      - name: ik_link_names
        type: string[]
      - name: pose_stamped_vector
        type: geometry_msgs/PoseStamped[]
      - name: timeout
        type: duration
      - name: attempts
        type: int32
      name: PositionIKRequest
      package: moveit_msgs
    - definition: '# This message contains information about the robot state, i.e. the
        positions of its joints and links

        sensor_msgs/JointState joint_state


        # Joints that may have multiple DOF are specified here

        sensor_msgs/MultiDOFJointState multi_dof_joint_state


        # Attached collision objects (attached to some link on the robot)

        AttachedCollisionObject[] attached_collision_objects


        # Flag indicating whether this scene is to be interpreted as a diff with respect
        to some other scene

        # This is mostly important for handling the attached bodies (whether or not
        to clear the attached bodies

        # of a moveit::core::RobotState before updating it with this message)

        bool is_diff

        '
      fields:
      - name: joint_state
        type: sensor_msgs/JointState
      - name: multi_dof_joint_state
        type: sensor_msgs/MultiDOFJointState
      - name: attached_collision_objects
        type: moveit_msgs/AttachedCollisionObject[]
      - name: is_diff
        type: bool
      name: RobotState
      package: moveit_msgs
    - definition: 'trajectory_msgs/JointTrajectory joint_trajectory

        trajectory_msgs/MultiDOFJointTrajectory multi_dof_joint_trajectory

        '
      fields:
      - name: joint_trajectory
        type: trajectory_msgs/JointTrajectory
      - name: multi_dof_joint_trajectory
        type: trajectory_msgs/MultiDOFJointTrajectory
      name: RobotTrajectory
      package: moveit_msgs
    - definition: '# The array of constraints to consider along the trajectory

        Constraints[] constraints

        '
      fields:
      - name: constraints
        type: moveit_msgs/Constraints[]
      name: TrajectoryConstraints
      package: moveit_msgs
    - constants:
      - name: SENSOR_Z
        type: uint8
        value: '0'
      - name: SENSOR_Y
        type: uint8
        value: '1'
      - name: SENSOR_X
        type: uint8
        value: '2'
      definition: "# The constraint is useful to maintain visibility to a disc (the\
        \ target) in a particular frame.\n# This disc forms the base of a visibiliy\
        \ cone whose tip is at the origin of the sensor.\n# Maintaining visibility is\
        \ done by ensuring the robot does not obstruct the visibility cone.\n# Note:\n\
        # This constraint does NOT enforce minimum or maximum distances between the\
        \ sensor\n# and the target, nor does it enforce the target to be in the field\
        \ of view of\n# the sensor. A PositionConstraint can (and probably should) be\
        \ used for such purposes.\n\n# The radius of the disc that should be maintained\
        \ visible \nfloat64 target_radius\n\n# The pose of the disc; as the robot moves,\
        \ the pose of the disc may change as well\n# This can be in the frame of a particular\
        \ robot link, for example\ngeometry_msgs/PoseStamped target_pose\n\n# From the\
        \ sensor origin towards the target, the disc forms a visibility cone\n# This\
        \ cone is approximated using many sides. For example, when using 4 sides, \n\
        # that in fact makes the visibility region be a pyramid.\n# This value should\
        \ always be 3 or more.\nint32 cone_sides\n\n# The pose in which visibility is\
        \ to be maintained.\n# The frame id should represent the robot link to which\
        \ the sensor is attached.\n# It is assumed the sensor can look directly at the\
        \ target, in any direction.\n# This assumption is usually not true, but additional\
        \ PositionConstraints\n# can resolve this issue.\ngeometry_msgs/PoseStamped\
        \ sensor_pose\n\n# Even though the disc is maintained visible, the visibility\
        \ cone can be very small\n# because of the orientation of the disc with respect\
        \ to the sensor. It is possible\n# for example to view the disk almost from\
        \ a side, in which case the visibility cone \n# can end up having close to 0\
        \ volume. The view angle is defined to be the angle between\n# the normal to\
        \ the visibility disc and the direction vector from the sensor origin.\n# The\
        \ value below represents the minimum desired view angle. For a perfect view,\n\
        # this value will be 0 (the two vectors are exact opposites). For a completely\
        \ obstructed view\n# this value will be Pi/2 (the vectors are perpendicular).\
        \ This value defined below \n# is the maximum view angle to be maintained. This\
        \ should be a value in the open interval\n# (0, Pi/2). If 0 is set, the view\
        \ angle is NOT enforced.\nfloat64 max_view_angle\n\n# This angle is used similarly\
        \ to max_view_angle but limits the maximum angle\n# between the sensor origin\
        \ direction vector and the axis that connects the\n# sensor origin to the target\
        \ frame origin. The value is again in the range (0, Pi/2)\n# and is NOT enforced\
        \ if set to 0.\nfloat64 max_range_angle\n\n# The axis that is assumed to indicate\
        \ the direction of view for the sensor\n# X = 2, Y = 1, Z = 0\nuint8 SENSOR_Z=0\n\
        uint8 SENSOR_Y=1\nuint8 SENSOR_X=2\nuint8 sensor_view_direction\n\n# A weighting\
        \ factor for this constraint (denotes relative importance to other constraints.\
        \ Closer to zero means less important)\nfloat64 weight\n"
      fields:
      - name: target_radius
        type: float64
      - name: target_pose
        type: geometry_msgs/PoseStamped
      - name: cone_sides
        type: int32
      - name: sensor_pose
        type: geometry_msgs/PoseStamped
      - name: max_view_angle
        type: float64
      - name: max_range_angle
        type: float64
      - name: sensor_view_direction
        type: uint8
      - name: weight
        type: float64
      name: VisibilityConstraint
      package: moveit_msgs
    - definition: "# This message contains a set of parameters useful in\n# setting\
        \ up the volume (a box) in which the robot is allowed to move.\n# This is useful\
        \ only when planning for mobile parts of \n# the robot as well.\n\n# Define\
        \ the frame of reference for the box corners\nHeader header\n\n# The minumum\
        \ corner of the box, with respect to the robot starting pose\ngeometry_msgs/Vector3\
        \ min_corner\n\n# The maximum corner of the box, with respect to the robot starting\
        \ pose\ngeometry_msgs/Vector3 max_corner\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: min_corner
        type: geometry_msgs/Vector3
      - name: max_corner
        type: geometry_msgs/Vector3
      name: WorkspaceParameters
      package: moveit_msgs
    name: moveit_msgs
    path: /opt/ros/melodic/share/moveit_msgs
    services:
    - definition: 'PlanningScene scene

        ---

        bool success

        '
      name: ApplyPlanningScene
      package: moveit_msgs
      request:
        definition: PlanningScene scene
        fields:
        - name: scene
          type: moveit_msgs/PlanningScene
        name: ApplyPlanningSceneRequest
        package: moveit_msgs
      response:
        definition: bool success
        fields:
        - name: success
          type: bool
        name: ApplyPlanningSceneResponse
        package: moveit_msgs
    - definition: 'string name

        string robot


        ---


        bool exists

        '
      name: CheckIfRobotStateExistsInWarehouse
      package: moveit_msgs
      request:
        definition: 'string name

          string robot'
        fields:
        - name: name
          type: string
        - name: robot
          type: string
        name: CheckIfRobotStateExistsInWarehouseRequest
        package: moveit_msgs
      response:
        definition: bool exists
        fields:
        - name: exists
          type: bool
        name: CheckIfRobotStateExistsInWarehouseResponse
        package: moveit_msgs
    - definition: 'string name

        string robot


        ---

        '
      name: DeleteRobotStateFromWarehouse
      package: moveit_msgs
      request:
        definition: 'string name

          string robot'
        fields:
        - name: name
          type: string
        - name: robot
          type: string
        name: DeleteRobotStateFromWarehouseRequest
        package: moveit_msgs
    - definition: "# This service is deprecated and will go away at some point. For\
        \ new development use the ExecuteTrajectory action.\n# Effective since: Indigo\
        \ 0.7.4, Jade and Kinetic 0.8.3\n\n# The trajectory to execute \nRobotTrajectory\
        \ trajectory\n\n# Set this to true if the service should block until the execution\
        \ is complete\nbool wait_for_execution\n\n---\n\n# Error code - encodes the\
        \ overall reason for failure\nMoveItErrorCodes error_code\n"
      name: ExecuteKnownTrajectory
      package: moveit_msgs
      request:
        definition: "# This service is deprecated and will go away at some point. For\
          \ new development use the ExecuteTrajectory action.\n# Effective since: Indigo\
          \ 0.7.4, Jade and Kinetic 0.8.3\n\n# The trajectory to execute \nRobotTrajectory\
          \ trajectory\n\n# Set this to true if the service should block until the execution\
          \ is complete\nbool wait_for_execution"
        fields:
        - name: trajectory
          type: moveit_msgs/RobotTrajectory
        - name: wait_for_execution
          type: bool
        name: ExecuteKnownTrajectoryRequest
        package: moveit_msgs
      response:
        definition: '# Error code - encodes the overall reason for failure

          MoveItErrorCodes error_code'
        fields:
        - name: error_code
          type: moveit_msgs/MoveItErrorCodes
        name: ExecuteKnownTrajectoryResponse
        package: moveit_msgs
    - definition: "# Define the frame for the specified waypoints\nHeader header\n\n\
        # The start at which to start the Cartesian path\nRobotState start_state\n\n\
        # Mandatory name of group to compute the path for\nstring group_name\n\n# Optional\
        \ name of IK link for which waypoints are specified.\n# If not specified, the\
        \ tip of the group (which is assumed to be a chain)\n# is assumed to be the\
        \ link\nstring link_name\n\n# A sequence of waypoints to be followed by the\
        \ specified link, \n# while moving the specified group, such that the group\
        \ moves only\n# in a straight line between waypoints\ngeometry_msgs/Pose[] waypoints\n\
        \n# The maximum distance (in Cartesian space) between consecutive points\n#\
        \ in the returned path. This must always be specified and > 0\nfloat64 max_step\n\
        \n# If above 0, this value is assumed to be the maximum allowed distance \n\
        # (L infinity) in configuration space, between consecutive points.\n# If this\
        \ distance is found to be above the maximum threshold, the path \n# computation\
        \ fails.\nfloat64 jump_threshold\n\n# Set to true if collisions should be avoided\
        \ when possible\nbool avoid_collisions\n\n# Specify additional constraints to\
        \ be met by the Cartesian path\nConstraints path_constraints\n\n---\n\n# The\
        \ state at which the computed path starts\nRobotState start_state\n\n# The computed\
        \ solution trajectory, for the desired group, in configuration space\nRobotTrajectory\
        \ solution\n\n# If the computation was incomplete, this value indicates the\
        \ fraction of the path\n# that was in fact computed (nr of waypoints traveled\
        \ through)\nfloat64 fraction\n\n# The error code of the computation\nMoveItErrorCodes\
        \ error_code\n"
      name: GetCartesianPath
      package: moveit_msgs
      request:
        definition: "# Define the frame for the specified waypoints\nHeader header\n\
          \n# The start at which to start the Cartesian path\nRobotState start_state\n\
          \n# Mandatory name of group to compute the path for\nstring group_name\n\n\
          # Optional name of IK link for which waypoints are specified.\n# If not specified,\
          \ the tip of the group (which is assumed to be a chain)\n# is assumed to be\
          \ the link\nstring link_name\n\n# A sequence of waypoints to be followed by\
          \ the specified link, \n# while moving the specified group, such that the\
          \ group moves only\n# in a straight line between waypoints\ngeometry_msgs/Pose[]\
          \ waypoints\n\n# The maximum distance (in Cartesian space) between consecutive\
          \ points\n# in the returned path. This must always be specified and > 0\n\
          float64 max_step\n\n# If above 0, this value is assumed to be the maximum\
          \ allowed distance \n# (L infinity) in configuration space, between consecutive\
          \ points.\n# If this distance is found to be above the maximum threshold,\
          \ the path \n# computation fails.\nfloat64 jump_threshold\n\n# Set to true\
          \ if collisions should be avoided when possible\nbool avoid_collisions\n\n\
          # Specify additional constraints to be met by the Cartesian path\nConstraints\
          \ path_constraints"
        fields:
        - name: header
          type: std_msgs/Header
        - name: start_state
          type: moveit_msgs/RobotState
        - name: group_name
          type: string
        - name: link_name
          type: string
        - name: waypoints
          type: geometry_msgs/Pose[]
        - name: max_step
          type: float64
        - name: jump_threshold
          type: float64
        - name: avoid_collisions
          type: bool
        - name: path_constraints
          type: moveit_msgs/Constraints
        name: GetCartesianPathRequest
        package: moveit_msgs
      response:
        definition: '# The state at which the computed path starts

          RobotState start_state


          # The computed solution trajectory, for the desired group, in configuration
          space

          RobotTrajectory solution


          # If the computation was incomplete, this value indicates the fraction of
          the path

          # that was in fact computed (nr of waypoints traveled through)

          float64 fraction


          # The error code of the computation

          MoveItErrorCodes error_code'
        fields:
        - name: start_state
          type: moveit_msgs/RobotState
        - name: solution
          type: moveit_msgs/RobotTrajectory
        - name: fraction
          type: float64
        - name: error_code
          type: moveit_msgs/MoveItErrorCodes
        name: GetCartesianPathResponse
        package: moveit_msgs
    - definition: '# This service contains the definition for a request to the motion

        # planner and the output it provides


        MotionPlanRequest motion_plan_request


        ---


        MotionPlanResponse motion_plan_response

        '
      name: GetMotionPlan
      package: moveit_msgs
      request:
        definition: '# This service contains the definition for a request to the motion

          # planner and the output it provides


          MotionPlanRequest motion_plan_request'
        fields:
        - name: motion_plan_request
          type: moveit_msgs/MotionPlanRequest
        name: GetMotionPlanRequest
        package: moveit_msgs
      response:
        definition: MotionPlanResponse motion_plan_response
        fields:
        - name: motion_plan_response
          type: moveit_msgs/MotionPlanResponse
        name: GetMotionPlanResponse
        package: moveit_msgs
    - definition: '# Name of planning config

        string planner_config


        # Optional name of planning group (return global defaults if empty)

        string group


        ---


        # parameters as key-value pairs

        PlannerParams params

        '
      name: GetPlannerParams
      package: moveit_msgs
      request:
        definition: '# Name of planning config

          string planner_config


          # Optional name of planning group (return global defaults if empty)

          string group'
        fields:
        - name: planner_config
          type: string
        - name: group
          type: string
        name: GetPlannerParamsRequest
        package: moveit_msgs
      response:
        definition: '# parameters as key-value pairs

          PlannerParams params'
        fields:
        - name: params
          type: moveit_msgs/PlannerParams
        name: GetPlannerParamsResponse
        package: moveit_msgs
    - definition: '# Get parts of the planning scene that are of interest

        PlanningSceneComponents components

        ---

        PlanningScene scene

        '
      name: GetPlanningScene
      package: moveit_msgs
      request:
        definition: '# Get parts of the planning scene that are of interest

          PlanningSceneComponents components'
        fields:
        - name: components
          type: moveit_msgs/PlanningSceneComponents
        name: GetPlanningSceneRequest
        package: moveit_msgs
      response:
        definition: PlanningScene scene
        fields:
        - name: scene
          type: moveit_msgs/PlanningScene
        name: GetPlanningSceneResponse
        package: moveit_msgs
    - definition: "# A service definition for a standard forward kinematics service\n\
        # The frame_id in the header message is the frame in which \n# the forward kinematics\
        \ poses will be returned\nHeader header\n\n# A vector of link name for which\
        \ forward kinematics must be computed\nstring[] fk_link_names\n\n# A robot state\
        \ consisting of joint names and joint positions to be used for forward kinematics\n\
        RobotState robot_state\n---\n# The resultant vector of PoseStamped messages\
        \ that contains the (stamped) poses of the requested links\ngeometry_msgs/PoseStamped[]\
        \ pose_stamped\n\n# The list of link names corresponding to the poses\nstring[]\
        \ fk_link_names\n\nMoveItErrorCodes error_code\n"
      name: GetPositionFK
      package: moveit_msgs
      request:
        definition: "# A service definition for a standard forward kinematics service\n\
          # The frame_id in the header message is the frame in which \n# the forward\
          \ kinematics poses will be returned\nHeader header\n\n# A vector of link name\
          \ for which forward kinematics must be computed\nstring[] fk_link_names\n\n\
          # A robot state consisting of joint names and joint positions to be used for\
          \ forward kinematics\nRobotState robot_state"
        fields:
        - name: header
          type: std_msgs/Header
        - name: fk_link_names
          type: string[]
        - name: robot_state
          type: moveit_msgs/RobotState
        name: GetPositionFKRequest
        package: moveit_msgs
      response:
        definition: '# The resultant vector of PoseStamped messages that contains the
          (stamped) poses of the requested links

          geometry_msgs/PoseStamped[] pose_stamped


          # The list of link names corresponding to the poses

          string[] fk_link_names


          MoveItErrorCodes error_code'
        fields:
        - name: pose_stamped
          type: geometry_msgs/PoseStamped[]
        - name: fk_link_names
          type: string[]
        - name: error_code
          type: moveit_msgs/MoveItErrorCodes
        name: GetPositionFKResponse
        package: moveit_msgs
    - definition: "# A service call to carry out an inverse kinematics computation\n\
        # The inverse kinematics request\nPositionIKRequest ik_request\n\n---\n\n# The\
        \ returned solution \n# (in the same order as the list of joints specified in\
        \ the IKRequest message)\nRobotState solution\n\nMoveItErrorCodes error_code\n"
      name: GetPositionIK
      package: moveit_msgs
      request:
        definition: '# A service call to carry out an inverse kinematics computation

          # The inverse kinematics request

          PositionIKRequest ik_request'
        fields:
        - name: ik_request
          type: moveit_msgs/PositionIKRequest
        name: GetPositionIKRequest
        package: moveit_msgs
      response:
        definition: "# The returned solution \n# (in the same order as the list of joints\
          \ specified in the IKRequest message)\nRobotState solution\n\nMoveItErrorCodes\
          \ error_code"
        fields:
        - name: solution
          type: moveit_msgs/RobotState
        - name: error_code
          type: moveit_msgs/MoveItErrorCodes
        name: GetPositionIKResponse
        package: moveit_msgs
    - definition: 'string name

        string robot


        ---


        moveit_msgs/RobotState state

        '
      name: GetRobotStateFromWarehouse
      package: moveit_msgs
      request:
        definition: 'string name

          string robot'
        fields:
        - name: name
          type: string
        - name: robot
          type: string
        name: GetRobotStateFromWarehouseRequest
        package: moveit_msgs
      response:
        definition: moveit_msgs/RobotState state
        fields:
        - name: state
          type: moveit_msgs/RobotState
        name: GetRobotStateFromWarehouseResponse
        package: moveit_msgs
    - definition: 'RobotState robot_state

        string group_name

        Constraints constraints


        ---


        bool valid

        ContactInformation[] contacts

        CostSource[] cost_sources

        ConstraintEvalResult[] constraint_result

        '
      name: GetStateValidity
      package: moveit_msgs
      request:
        definition: 'RobotState robot_state

          string group_name

          Constraints constraints'
        fields:
        - name: robot_state
          type: moveit_msgs/RobotState
        - name: group_name
          type: string
        - name: constraints
          type: moveit_msgs/Constraints
        name: GetStateValidityRequest
        package: moveit_msgs
      response:
        definition: 'bool valid

          ContactInformation[] contacts

          CostSource[] cost_sources

          ConstraintEvalResult[] constraint_result'
        fields:
        - name: valid
          type: bool
        - name: contacts
          type: moveit_msgs/ContactInformation[]
        - name: cost_sources
          type: moveit_msgs/CostSource[]
        - name: constraint_result
          type: moveit_msgs/ConstraintEvalResult[]
        name: GetStateValidityResponse
        package: moveit_msgs
    - definition: '# Requests that grasp planning be performed for the target object

        # returns a list of candidate grasps to be tested and executed


        # the planning group used

        string group_name


        # the object to be grasped

        CollisionObject target


        # the names of the relevant support surfaces (e.g. tables) in the collision
        map

        # can be left empty if no names are available

        string[] support_surfaces


        # an optional list of grasps to be evaluated by the planner

        Grasp[] candidate_grasps


        # an optional list of obstacles that we have semantic information about

        # and that can be moved in the course of grasping

        CollisionObject[] movable_obstacles


        ---


        # the list of planned grasps

        Grasp[] grasps


        # whether an error occurred

        MoveItErrorCodes error_code

        '
      name: GraspPlanning
      package: moveit_msgs
      request:
        definition: '# Requests that grasp planning be performed for the target object

          # returns a list of candidate grasps to be tested and executed


          # the planning group used

          string group_name


          # the object to be grasped

          CollisionObject target


          # the names of the relevant support surfaces (e.g. tables) in the collision
          map

          # can be left empty if no names are available

          string[] support_surfaces


          # an optional list of grasps to be evaluated by the planner

          Grasp[] candidate_grasps


          # an optional list of obstacles that we have semantic information about

          # and that can be moved in the course of grasping

          CollisionObject[] movable_obstacles'
        fields:
        - name: group_name
          type: string
        - name: target
          type: moveit_msgs/CollisionObject
        - name: support_surfaces
          type: string[]
        - name: candidate_grasps
          type: moveit_msgs/Grasp[]
        - name: movable_obstacles
          type: moveit_msgs/CollisionObject[]
        name: GraspPlanningRequest
        package: moveit_msgs
      response:
        definition: '# the list of planned grasps

          Grasp[] grasps


          # whether an error occurred

          MoveItErrorCodes error_code'
        fields:
        - name: grasps
          type: moveit_msgs/Grasp[]
        - name: error_code
          type: moveit_msgs/MoveItErrorCodes
        name: GraspPlanningResponse
        package: moveit_msgs
    - definition: 'string regex

        string robot


        ---


        string[] states

        '
      name: ListRobotStatesInWarehouse
      package: moveit_msgs
      request:
        definition: 'string regex

          string robot'
        fields:
        - name: regex
          type: string
        - name: robot
          type: string
        name: ListRobotStatesInWarehouseRequest
        package: moveit_msgs
      response:
        definition: string[] states
        fields:
        - name: states
          type: string[]
        name: ListRobotStatesInWarehouseResponse
        package: moveit_msgs
    - definition: 'string filename

        ---

        bool success'
      name: LoadMap
      package: moveit_msgs
      request:
        definition: string filename
        fields:
        - name: filename
          type: string
        name: LoadMapRequest
        package: moveit_msgs
      response:
        definition: bool success
        fields:
        - name: success
          type: bool
        name: LoadMapResponse
        package: moveit_msgs
    - definition: '

        ---


        # The planning instances that could be used in the benchmark

        PlannerInterfaceDescription[] planner_interfaces

        '
      name: QueryPlannerInterfaces
      package: moveit_msgs
      response:
        definition: '# The planning instances that could be used in the benchmark

          PlannerInterfaceDescription[] planner_interfaces'
        fields:
        - name: planner_interfaces
          type: moveit_msgs/PlannerInterfaceDescription[]
        name: QueryPlannerInterfacesResponse
        package: moveit_msgs
    - definition: 'string old_name

        string new_name

        string robot

        ---

        '
      name: RenameRobotStateInWarehouse
      package: moveit_msgs
      request:
        definition: 'string old_name

          string new_name

          string robot'
        fields:
        - name: old_name
          type: string
        - name: new_name
          type: string
        - name: robot
          type: string
        name: RenameRobotStateInWarehouseRequest
        package: moveit_msgs
    - definition: 'string filename


        ---


        bool success



        '
      name: SaveMap
      package: moveit_msgs
      request:
        definition: string filename
        fields:
        - name: filename
          type: string
        name: SaveMapRequest
        package: moveit_msgs
      response:
        definition: bool success
        fields:
        - name: success
          type: bool
        name: SaveMapResponse
        package: moveit_msgs
    - definition: 'string name

        string robot

        moveit_msgs/RobotState state


        ---


        bool success

        '
      name: SaveRobotStateToWarehouse
      package: moveit_msgs
      request:
        definition: 'string name

          string robot

          moveit_msgs/RobotState state'
        fields:
        - name: name
          type: string
        - name: robot
          type: string
        - name: state
          type: moveit_msgs/RobotState
        name: SaveRobotStateToWarehouseRequest
        package: moveit_msgs
      response:
        definition: bool success
        fields:
        - name: success
          type: bool
        name: SaveRobotStateToWarehouseResponse
        package: moveit_msgs
    - definition: '# Name of planning config

        string planner_config


        # Optional name of planning group (set global defaults if empty)

        string group


        # parameters as key-value pairs

        PlannerParams params


        # replace params or augment existing ones?

        bool replace


        ---


        '
      name: SetPlannerParams
      package: moveit_msgs
      request:
        definition: '# Name of planning config

          string planner_config


          # Optional name of planning group (set global defaults if empty)

          string group


          # parameters as key-value pairs

          PlannerParams params


          # replace params or augment existing ones?

          bool replace'
        fields:
        - name: planner_config
          type: string
        - name: group
          type: string
        - name: params
          type: moveit_msgs/PlannerParams
        - name: replace
          type: bool
        name: SetPlannerParamsRequest
        package: moveit_msgs
  - actions: []
    messages: []
    name: genpy
    path: /opt/ros/melodic/share/genpy
    services: []
  - actions: []
    messages:
    - definition: 'Header header

        string[] joint_names

        JointTrajectoryPoint[] points'
      fields:
      - name: header
        type: std_msgs/Header
      - name: joint_names
        type: string[]
      - name: points
        type: trajectory_msgs/JointTrajectoryPoint[]
      name: JointTrajectory
      package: trajectory_msgs
    - definition: '# Each trajectory point specifies either positions[, velocities[,
        accelerations]]

        # or positions[, effort] for the trajectory to be executed.

        # All specified values are in the same order as the joint names in JointTrajectory.msg


        float64[] positions

        float64[] velocities

        float64[] accelerations

        float64[] effort

        duration time_from_start

        '
      fields:
      - name: positions
        type: float64[]
      - name: velocities
        type: float64[]
      - name: accelerations
        type: float64[]
      - name: effort
        type: float64[]
      - name: time_from_start
        type: duration
      name: JointTrajectoryPoint
      package: trajectory_msgs
    - definition: "# The header is used to specify the coordinate frame and the reference\
        \ time for the trajectory durations\nHeader header\n\n# A representation of\
        \ a multi-dof joint trajectory (each point is a transformation)\n# Each point\
        \ along the trajectory will include an array of positions/velocities/accelerations\n\
        # that has the same length as the array of joint names, and has the same order\
        \ of joints as \n# the joint names array.\n\nstring[] joint_names\nMultiDOFJointTrajectoryPoint[]\
        \ points\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: joint_names
        type: string[]
      - name: points
        type: trajectory_msgs/MultiDOFJointTrajectoryPoint[]
      name: MultiDOFJointTrajectory
      package: trajectory_msgs
    - definition: "# Each multi-dof joint can specify a transform (up to 6 DOF)\ngeometry_msgs/Transform[]\
        \ transforms\n\n# There can be a velocity specified for the origin of the joint\
        \ \ngeometry_msgs/Twist[] velocities\n\n# There can be an acceleration specified\
        \ for the origin of the joint \ngeometry_msgs/Twist[] accelerations\n\nduration\
        \ time_from_start\n"
      fields:
      - name: transforms
        type: geometry_msgs/Transform[]
      - name: velocities
        type: geometry_msgs/Twist[]
      - name: accelerations
        type: geometry_msgs/Twist[]
      - name: time_from_start
        type: duration
      name: MultiDOFJointTrajectoryPoint
      package: trajectory_msgs
    name: trajectory_msgs
    path: /opt/ros/melodic/share/trajectory_msgs
    services: []
  - actions: []
    messages: []
    name: moveit_ros_planning_interface
    path: /opt/ros/melodic/share/moveit_ros_planning_interface
    services: []
  - actions: []
    messages:
    - definition: '# Separate header for compatibility with current TimeSynchronizer.

        # Likely to be removed in a later release, use image.header instead.

        Header header


        # Floating point disparity image. The disparities are pre-adjusted for any

        # x-offset between the principal points of the two cameras (in the case

        # that they are verged). That is: d = x_l - x_r - (cx_l - cx_r)

        sensor_msgs/Image image


        # Stereo geometry. For disparity d, the depth from the camera is Z = fT/d.

        float32 f # Focal length, pixels

        float32 T # Baseline, world units


        # Subwindow of (potentially) valid disparity values.

        sensor_msgs/RegionOfInterest valid_window


        # The range of disparities searched.

        # In the disparity image, any disparity less than min_disparity is invalid.

        # The disparity search range defines the horopter, or 3D volume that the

        # stereo algorithm can "see". Points with Z outside of:

        #     Z_min = fT / max_disparity

        #     Z_max = fT / min_disparity

        # could not be found.

        float32 min_disparity

        float32 max_disparity


        # Smallest allowed disparity increment. The smallest achievable depth range

        # resolution is delta_Z = (Z^2/fT)*delta_d.

        float32 delta_d

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: image
        type: sensor_msgs/Image
      - name: f
        type: float32
      - name: T
        type: float32
      - name: valid_window
        type: sensor_msgs/RegionOfInterest
      - name: min_disparity
        type: float32
      - name: max_disparity
        type: float32
      - name: delta_d
        type: float32
      name: DisparityImage
      package: stereo_msgs
    name: stereo_msgs
    path: /opt/ros/melodic/share/stereo_msgs
    services: []
  - actions: []
    messages: []
    name: image_geometry
    path: /opt/ros/melodic/share/image_geometry
    services: []
  - actions: []
    messages: []
    name: roslang
    path: /opt/ros/melodic/share/roslang
    services: []
  - actions: []
    messages: []
    name: laser_geometry
    path: /opt/ros/melodic/share/laser_geometry
    services: []
  - actions: []
    messages: []
    name: roslib
    path: /opt/ros/melodic/share/roslib
    services: []
  - actions: []
    messages: []
    name: moveit_ros_perception
    path: /opt/ros/melodic/share/moveit_ros_perception
    services: []
  - actions: []
    messages: []
    name: roslaunch
    path: /opt/ros/melodic/share/roslaunch
    services: []
  - actions: []
    messages: []
    name: realtime_tools
    path: /opt/ros/melodic/share/realtime_tools
    services: []
  - actions: []
    messages: []
    name: urdfdom_py
    path: /opt/ros/melodic/share/urdfdom_py
    services: []
  - actions: []
    messages: []
    name: sparse_bundle_adjustment
    path: /opt/ros/melodic/share/sparse_bundle_adjustment
    services: []
  - actions: []
    messages: []
    name: genlisp
    path: /opt/ros/melodic/share/genlisp
    services: []
  - actions: []
    messages: []
    name: class_loader
    path: /opt/ros/melodic/share/class_loader
    services: []
  - actions: []
    messages: []
    name: map_server
    path: /opt/ros/melodic/share/map_server
    services: []
  - actions: []
    messages: []
    name: depth_image_proc
    path: /opt/ros/melodic/share/depth_image_proc
    services: []
  - actions: []
    messages: []
    name: rgbd_launch
    path: /opt/ros/melodic/share/rgbd_launch
    services: []
  - actions: []
    messages: []
    name: camera_info_manager
    path: /opt/ros/melodic/share/camera_info_manager
    services: []
  - actions: []
    messages: []
    name: roswtf
    path: /opt/ros/melodic/share/roswtf
    services: []
  - actions: []
    messages: []
    name: robot_state_publisher
    path: /opt/ros/melodic/share/robot_state_publisher
    services: []
  - actions: []
    messages: []
    name: rosconsole_bridge
    path: /opt/ros/melodic/share/rosconsole_bridge
    services: []
  - actions: []
    messages: []
    name: rosconsole
    path: /opt/ros/melodic/share/rosconsole
    services: []
  - actions: []
    messages: []
    name: gencpp
    path: /opt/ros/melodic/share/gencpp
    services: []
  - actions: []
    messages:
    - definition: 'string info                                   # text info on this
        contact

        string collision1_name                        # name of contact collision1

        string collision2_name                        # name of contact collision2

        geometry_msgs/Wrench[] wrenches               # list of forces/torques

        geometry_msgs/Wrench total_wrench             # sum of forces/torques in every
        DOF

        geometry_msgs/Vector3[] contact_positions     # list of contact position

        geometry_msgs/Vector3[] contact_normals       # list of contact normals

        float64[] depths                              # list of penetration depths

        '
      fields:
      - name: info
        type: string
      - name: collision1_name
        type: string
      - name: collision2_name
        type: string
      - name: wrenches
        type: geometry_msgs/Wrench[]
      - name: total_wrench
        type: geometry_msgs/Wrench
      - name: contact_positions
        type: geometry_msgs/Vector3[]
      - name: contact_normals
        type: geometry_msgs/Vector3[]
      - name: depths
        type: float64[]
      name: ContactState
      package: gazebo_msgs
    - definition: 'Header header                                   # stamp

        gazebo_msgs/ContactState[] states            # array of geom pairs in contact

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: states
        type: gazebo_msgs/ContactState[]
      name: ContactsState
      package: gazebo_msgs
    - definition: "# @todo: FIXME: sets pose and twist of a link.  All children link\
        \ poses/twists of the URDF tree are not updated accordingly, but should be.\n\
        string link_name            # link name, link_names are in gazebo scoped name\
        \ notation, [model_name::body_name]\ngeometry_msgs/Pose pose     # desired pose\
        \ in reference frame\ngeometry_msgs/Twist twist   # desired twist in reference\
        \ frame\nstring reference_frame      # set pose/twist relative to the frame\
        \ of this link/body\n                            # leave empty or \"world\"\
        \ or \"map\" defaults to world-frame\n"
      fields:
      - name: link_name
        type: string
      - name: pose
        type: geometry_msgs/Pose
      - name: twist
        type: geometry_msgs/Twist
      - name: reference_frame
        type: string
      name: LinkState
      package: gazebo_msgs
    - definition: '# broadcast all link states in world frame

        string[] name                 # link names

        geometry_msgs/Pose[] pose     # desired pose in world frame

        geometry_msgs/Twist[] twist   # desired twist in world frame

        '
      fields:
      - name: name
        type: string[]
      - name: pose
        type: geometry_msgs/Pose[]
      - name: twist
        type: geometry_msgs/Twist[]
      name: LinkStates
      package: gazebo_msgs
    - definition: "# Set Gazebo Model pose and twist\nstring model_name           #\
        \ model to set state (pose and twist)\ngeometry_msgs/Pose pose     # desired\
        \ pose in reference frame\ngeometry_msgs/Twist twist   # desired twist in reference\
        \ frame\nstring reference_frame      # set pose/twist relative to the frame\
        \ of this entity (Body/Model)\n                            # leave empty or\
        \ \"world\" or \"map\" defaults to world-frame\n\n"
      fields:
      - name: model_name
        type: string
      - name: pose
        type: geometry_msgs/Pose
      - name: twist
        type: geometry_msgs/Twist
      - name: reference_frame
        type: string
      name: ModelState
      package: gazebo_msgs
    - definition: '# broadcast all model states in world frame

        string[] name                 # model names

        geometry_msgs/Pose[] pose     # desired pose in world frame

        geometry_msgs/Twist[] twist   # desired twist in world frame

        '
      fields:
      - name: name
        type: string[]
      - name: pose
        type: geometry_msgs/Pose[]
      - name: twist
        type: geometry_msgs/Twist[]
      name: ModelStates
      package: gazebo_msgs
    - definition: '# access to low level joint properties, change these at your own
        risk

        float64[] damping             # joint damping

        float64[] hiStop              # joint limit

        float64[] loStop              # joint limit

        float64[] erp                 # set joint erp

        float64[] cfm                 # set joint cfm

        float64[] stop_erp            # set joint erp for joint limit "contact" joint

        float64[] stop_cfm            # set joint cfm for joint limit "contact" joint

        float64[] fudge_factor        # joint fudge_factor applied at limits, see ODE
        manual for info.

        float64[] fmax                # ode joint param fmax

        float64[] vel                 # ode joint param vel

        '
      fields:
      - name: damping
        type: float64[]
      - name: hiStop
        type: float64[]
      - name: loStop
        type: float64[]
      - name: erp
        type: float64[]
      - name: cfm
        type: float64[]
      - name: stop_erp
        type: float64[]
      - name: stop_cfm
        type: float64[]
      - name: fudge_factor
        type: float64[]
      - name: fmax
        type: float64[]
      - name: vel
        type: float64[]
      name: ODEJointProperties
      package: gazebo_msgs
    - definition: 'bool auto_disable_bodies           # enable auto disabling of bodies,
        default false

        uint32 sor_pgs_precon_iters        # preconditioning inner iterations when uisng
        projected Gauss Seidel

        uint32 sor_pgs_iters               # inner iterations when uisng projected Gauss
        Seidel

        float64 sor_pgs_w                  # relaxation parameter when using projected
        Gauss Seidel, 1 = no relaxation

        float64 sor_pgs_rms_error_tol      # rms error tolerance before stopping inner
        iterations

        float64 contact_surface_layer      # contact "dead-band" width

        float64 contact_max_correcting_vel # contact maximum correction velocity

        float64 cfm                        # global constraint force mixing

        float64 erp                        # global error reduction parameter

        uint32 max_contacts                # maximum contact joints between two geoms

        '
      fields:
      - name: auto_disable_bodies
        type: bool
      - name: sor_pgs_precon_iters
        type: uint32
      - name: sor_pgs_iters
        type: uint32
      - name: sor_pgs_w
        type: float64
      - name: sor_pgs_rms_error_tol
        type: float64
      - name: contact_surface_layer
        type: float64
      - name: contact_max_correcting_vel
        type: float64
      - name: cfm
        type: float64
      - name: erp
        type: float64
      - name: max_contacts
        type: uint32
      name: ODEPhysics
      package: gazebo_msgs
    - definition: '# This is a message that holds data necessary to reconstruct a snapshot
        of the world

        #

        # = Approach to Message Passing =

        # The state of the world is defined by either

        #   1. Inertial Model pose, twist

        #      * kinematic data - connectivity graph from Model to each Link

        #      * joint angles

        #      * joint velocities

        #      * Applied forces - Body wrench

        #        * relative transform from Body to each collision Geom

        # Or

        #   2. Inertial (absolute) Body pose, twist, wrench

        #      * relative transform from Body to each collision Geom - constant, so
        not sent over wire

        #      * back compute from canonical body info to get Model pose and twist.

        #

        # Chooing (2.) because it matches most physics engines out there

        #   and is simpler.

        #

        # = Future =

        # Consider impacts on using reduced coordinates / graph (parent/child links)
        approach

        #   constraint and physics solvers.

        #

        # = Application =

        # This message is used to do the following:

        #   * reconstruct the world and objects for sensor generation

        #   * stop / start simulation - need pose, twist, wrench of each body

        #   * collision detection - need pose of each collision geometry.  velocity/acceleration
        if

        #

        # = Assumptions =

        # Assuming that each (physics) processor node locally already has

        #   * collision information - Trimesh for Geoms, etc

        #   * relative transforms from Body to Geom - this is assumed to be fixed, do
        not send oved wire

        #   * inertial information - does not vary in time

        #   * visual information - does not vary in time

        #


        Header header


        string[] name

        geometry_msgs/Pose[] pose

        geometry_msgs/Twist[] twist

        geometry_msgs/Wrench[] wrench

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: name
        type: string[]
      - name: pose
        type: geometry_msgs/Pose[]
      - name: twist
        type: geometry_msgs/Twist[]
      - name: wrench
        type: geometry_msgs/Wrench[]
      name: WorldState
      package: gazebo_msgs
    name: gazebo_msgs
    path: /opt/ros/melodic/share/gazebo_msgs
    services:
    - definition: "# Apply Wrench to Gazebo Body.\n# via the callback mechanism\n# all\
        \ Gazebo operations are made in world frame\nstring body_name              \
        \            # Gazebo body to apply wrench (linear force and torque)\n     \
        \                                     # wrench is applied in the gazebo world\
        \ by default\n                                          # body names are prefixed\
        \ by model name, e.g. pr2::base_link\nstring reference_frame               \
        \     # wrench is defined in the reference frame of this entity\n          \
        \                                # use inertial frame if left empty\n      \
        \                                    # frame names are bodies prefixed by model\
        \ name, e.g. pr2::base_link\ngeometry_msgs/Point  reference_point      # wrench\
        \ is defined at this location in the reference frame\ngeometry_msgs/Wrench wrench\
        \               # wrench applied to the origin of the body\ntime start_time\
        \                           # (optional) wrench application start time (seconds)\n\
        \                                          # if start_time is not specified,\
        \ or\n                                          # start_time < current time,\
        \ start as soon as possible\nduration duration                         # optional\
        \ duration of wrench application time (seconds)\n                          \
        \                # if duration < 0, apply wrench continuously without end\n\
        \                                          # if duration = 0, do nothing\n \
        \                                         # if duration < step size, apply wrench\n\
        \                                          # for one step size\n---\nbool success\
        \                              # return true if set wrench successful\nstring\
        \ status_message                     # comments if available\n"
      name: ApplyBodyWrench
      package: gazebo_msgs
      request:
        definition: "# Apply Wrench to Gazebo Body.\n# via the callback mechanism\n\
          # all Gazebo operations are made in world frame\nstring body_name        \
          \                  # Gazebo body to apply wrench (linear force and torque)\n\
          \                                          # wrench is applied in the gazebo\
          \ world by default\n                                          # body names\
          \ are prefixed by model name, e.g. pr2::base_link\nstring reference_frame\
          \                    # wrench is defined in the reference frame of this entity\n\
          \                                          # use inertial frame if left empty\n\
          \                                          # frame names are bodies prefixed\
          \ by model name, e.g. pr2::base_link\ngeometry_msgs/Point  reference_point\
          \      # wrench is defined at this location in the reference frame\ngeometry_msgs/Wrench\
          \ wrench               # wrench applied to the origin of the body\ntime start_time\
          \                           # (optional) wrench application start time (seconds)\n\
          \                                          # if start_time is not specified,\
          \ or\n                                          # start_time < current time,\
          \ start as soon as possible\nduration duration                         # optional\
          \ duration of wrench application time (seconds)\n                        \
          \                  # if duration < 0, apply wrench continuously without end\n\
          \                                          # if duration = 0, do nothing\n\
          \                                          # if duration < step size, apply\
          \ wrench\n                                          # for one step size"
        fields:
        - name: body_name
          type: string
        - name: reference_frame
          type: string
        - name: reference_point
          type: geometry_msgs/Point
        - name: wrench
          type: geometry_msgs/Wrench
        - name: start_time
          type: time
        - name: duration
          type: duration
        name: ApplyBodyWrenchRequest
        package: gazebo_msgs
      response:
        definition: 'bool success                              # return true if set
          wrench successful

          string status_message                     # comments if available'
        fields:
        - name: success
          type: bool
        - name: status_message
          type: string
        name: ApplyBodyWrenchResponse
        package: gazebo_msgs
    - definition: "# set urdf joint effort\nstring joint_name           # joint to apply\
        \ wrench (linear force and torque)\nfloat64 effort              # effort to\
        \ apply\ntime start_time             # optional wrench application start time\
        \ (seconds)\n                            # if start_time < current time, start\
        \ as soon as possible\nduration duration           # optional duration of wrench\
        \ application time (seconds)\n                            # if duration < 0,\
        \ apply wrench continuously without end\n                            # if duration\
        \ = 0, do nothing\n                            # if duration < step size, assume\
        \ step size and\n                            #               display warning\
        \ in status_message\n---\nbool success                # return true if effort\
        \ application is successful\nstring status_message       # comments if available\n"
      name: ApplyJointEffort
      package: gazebo_msgs
      request:
        definition: "# set urdf joint effort\nstring joint_name           # joint to\
          \ apply wrench (linear force and torque)\nfloat64 effort              # effort\
          \ to apply\ntime start_time             # optional wrench application start\
          \ time (seconds)\n                            # if start_time < current time,\
          \ start as soon as possible\nduration duration           # optional duration\
          \ of wrench application time (seconds)\n                            # if duration\
          \ < 0, apply wrench continuously without end\n                           \
          \ # if duration = 0, do nothing\n                            # if duration\
          \ < step size, assume step size and\n                            #       \
          \        display warning in status_message"
        fields:
        - name: joint_name
          type: string
        - name: effort
          type: float64
        - name: start_time
          type: time
        - name: duration
          type: duration
        name: ApplyJointEffortRequest
        package: gazebo_msgs
      response:
        definition: 'bool success                # return true if effort application
          is successful

          string status_message       # comments if available'
        fields:
        - name: success
          type: bool
        - name: status_message
          type: string
        name: ApplyJointEffortResponse
        package: gazebo_msgs
    - definition: 'string body_name   # name of the body requested. body names are prefixed
        by model name, e.g. pr2::base_link

        ---

        '
      name: BodyRequest
      package: gazebo_msgs
      request:
        definition: 'string body_name   # name of the body requested. body names are
          prefixed by model name, e.g. pr2::base_link'
        fields:
        - name: body_name
          type: string
        name: BodyRequestRequest
        package: gazebo_msgs
    - definition: 'string light_name                 # name of the light to be deleted

        ---

        bool success                      # return true if deletion is successful

        string status_message             # comments if available

        '
      name: DeleteLight
      package: gazebo_msgs
      request:
        definition: 'string light_name                 # name of the light to be deleted'
        fields:
        - name: light_name
          type: string
        name: DeleteLightRequest
        package: gazebo_msgs
      response:
        definition: 'bool success                      # return true if deletion is
          successful

          string status_message             # comments if available'
        fields:
        - name: success
          type: bool
        - name: status_message
          type: string
        name: DeleteLightResponse
        package: gazebo_msgs
    - definition: 'string model_name                 # name of the Gazebo Model to be
        deleted

        ---

        bool success                      # return true if deletion is successful

        string status_message             # comments if available

        '
      name: DeleteModel
      package: gazebo_msgs
      request:
        definition: 'string model_name                 # name of the Gazebo Model to
          be deleted'
        fields:
        - name: model_name
          type: string
        name: DeleteModelRequest
        package: gazebo_msgs
      response:
        definition: 'bool success                      # return true if deletion is
          successful

          string status_message             # comments if available'
        fields:
        - name: success
          type: bool
        - name: status_message
          type: string
        name: DeleteModelResponse
        package: gazebo_msgs
    - definition: 'string joint_name                    # name of joint

        ---

        # joint type

        uint8 type

        uint8 REVOLUTE    = 0                # single DOF

        uint8 CONTINUOUS  = 1                # single DOF (revolute w/o joints)

        uint8 PRISMATIC   = 2                # single DOF

        uint8 FIXED       = 3                # 0 DOF

        uint8 BALL        = 4                # 3 DOF

        uint8 UNIVERSAL   = 5                # 2 DOF

        # dynamics properties

        float64[] damping

        # joint state

        float64[] position

        float64[] rate

        # service return status

        bool success                         # return true if get successful

        string status_message                # comments if available

        '
      name: GetJointProperties
      package: gazebo_msgs
      request:
        definition: 'string joint_name                    # name of joint'
        fields:
        - name: joint_name
          type: string
        name: GetJointPropertiesRequest
        package: gazebo_msgs
      response:
        constants:
        - name: REVOLUTE
          type: uint8
          value: '0'
        - name: CONTINUOUS
          type: uint8
          value: '1'
        - name: PRISMATIC
          type: uint8
          value: '2'
        - name: FIXED
          type: uint8
          value: '3'
        - name: BALL
          type: uint8
          value: '4'
        - name: UNIVERSAL
          type: uint8
          value: '5'
        definition: '# joint type

          uint8 type

          uint8 REVOLUTE    = 0                # single DOF

          uint8 CONTINUOUS  = 1                # single DOF (revolute w/o joints)

          uint8 PRISMATIC   = 2                # single DOF

          uint8 FIXED       = 3                # 0 DOF

          uint8 BALL        = 4                # 3 DOF

          uint8 UNIVERSAL   = 5                # 2 DOF

          # dynamics properties

          float64[] damping

          # joint state

          float64[] position

          float64[] rate

          # service return status

          bool success                         # return true if get successful

          string status_message                # comments if available'
        fields:
        - name: type
          type: uint8
        - name: damping
          type: float64[]
        - name: position
          type: float64[]
        - name: rate
          type: float64[]
        - name: success
          type: bool
        - name: status_message
          type: string
        name: GetJointPropertiesResponse
        package: gazebo_msgs
    - definition: 'string light_name                    # name of Gazebo Light

        ---

        std_msgs/ColorRGBA diffuse           # diffuse color as red, green, blue, alpha

        float64 attenuation_constant

        float64 attenuation_linear

        float64 attenuation_quadratic

        bool success                         # return true if get successful

        string status_message                # comments if available

        '
      name: GetLightProperties
      package: gazebo_msgs
      request:
        definition: 'string light_name                    # name of Gazebo Light'
        fields:
        - name: light_name
          type: string
        name: GetLightPropertiesRequest
        package: gazebo_msgs
      response:
        definition: 'std_msgs/ColorRGBA diffuse           # diffuse color as red, green,
          blue, alpha

          float64 attenuation_constant

          float64 attenuation_linear

          float64 attenuation_quadratic

          bool success                         # return true if get successful

          string status_message                # comments if available'
        fields:
        - name: diffuse
          type: std_msgs/ColorRGBA
        - name: attenuation_constant
          type: float64
        - name: attenuation_linear
          type: float64
        - name: attenuation_quadratic
          type: float64
        - name: success
          type: bool
        - name: status_message
          type: string
        name: GetLightPropertiesResponse
        package: gazebo_msgs
    - definition: "string link_name          # name of link\n                      \
        \    # link names are prefixed by model name, e.g. pr2::base_link\n---\ngeometry_msgs/Pose\
        \ com    # center of mass location in link frame\n                         \
        \ # and orientation of the moment of inertias\n                          # relative\
        \ to the link frame\nbool gravity_mode         # set gravity mode on/off\nfloat64\
        \ mass              # linear mass of link\nfloat64 ixx               # moment\
        \ of inertia\nfloat64 ixy               # moment of inertia\nfloat64 ixz   \
        \            # moment of inertia\nfloat64 iyy               # moment of inertia\n\
        float64 iyz               # moment of inertia\nfloat64 izz               # moment\
        \ of inertia\nbool success              # return true if get info is successful\n\
        string status_message     # comments if available\n"
      name: GetLinkProperties
      package: gazebo_msgs
      request:
        definition: "string link_name          # name of link\n                    \
          \      # link names are prefixed by model name, e.g. pr2::base_link"
        fields:
        - name: link_name
          type: string
        name: GetLinkPropertiesRequest
        package: gazebo_msgs
      response:
        definition: "geometry_msgs/Pose com    # center of mass location in link frame\n\
          \                          # and orientation of the moment of inertias\n \
          \                         # relative to the link frame\nbool gravity_mode\
          \         # set gravity mode on/off\nfloat64 mass              # linear mass\
          \ of link\nfloat64 ixx               # moment of inertia\nfloat64 ixy    \
          \           # moment of inertia\nfloat64 ixz               # moment of inertia\n\
          float64 iyy               # moment of inertia\nfloat64 iyz               #\
          \ moment of inertia\nfloat64 izz               # moment of inertia\nbool success\
          \              # return true if get info is successful\nstring status_message\
          \     # comments if available"
        fields:
        - name: com
          type: geometry_msgs/Pose
        - name: gravity_mode
          type: bool
        - name: mass
          type: float64
        - name: ixx
          type: float64
        - name: ixy
          type: float64
        - name: ixz
          type: float64
        - name: iyy
          type: float64
        - name: iyz
          type: float64
        - name: izz
          type: float64
        - name: success
          type: bool
        - name: status_message
          type: string
        name: GetLinkPropertiesResponse
        package: gazebo_msgs
    - definition: "string link_name          # name of link\n                      \
        \    # link names are prefixed by model name, e.g. pr2::base_link\nstring reference_frame\
        \    # reference frame of returned information, must be a valid link\n     \
        \                     # if empty, use inertial (gazebo world) frame\n      \
        \                    # reference_frame names are prefixed by model name, e.g.\
        \ pr2::base_link\n---\ngazebo_msgs/LinkState link_state\nbool success      \
        \        # return true if get info is successful\nstring status_message    \
        \ # comments if available\n"
      name: GetLinkState
      package: gazebo_msgs
      request:
        definition: "string link_name          # name of link\n                    \
          \      # link names are prefixed by model name, e.g. pr2::base_link\nstring\
          \ reference_frame    # reference frame of returned information, must be a\
          \ valid link\n                          # if empty, use inertial (gazebo world)\
          \ frame\n                          # reference_frame names are prefixed by\
          \ model name, e.g. pr2::base_link"
        fields:
        - name: link_name
          type: string
        - name: reference_frame
          type: string
        name: GetLinkStateRequest
        package: gazebo_msgs
      response:
        definition: 'gazebo_msgs/LinkState link_state

          bool success              # return true if get info is successful

          string status_message     # comments if available'
        fields:
        - name: link_state
          type: gazebo_msgs/LinkState
        - name: success
          type: bool
        - name: status_message
          type: string
        name: GetLinkStateResponse
        package: gazebo_msgs
    - definition: 'string model_name                    # name of Gazebo Model

        ---

        string parent_model_name             # parent model

        string canonical_body_name           # name of canonical body, body names are
        prefixed by model name, e.g. pr2::base_link

        string[] body_names                  # list of bodies, body names are prefixed
        by model name, e.g. pr2::base_link

        string[] geom_names                  # list of geoms

        string[] joint_names                 # list of joints attached to the model

        string[] child_model_names           # list of child models

        bool is_static                       # returns true if model is static

        bool success                         # return true if get successful

        string status_message                # comments if available

        '
      name: GetModelProperties
      package: gazebo_msgs
      request:
        definition: 'string model_name                    # name of Gazebo Model'
        fields:
        - name: model_name
          type: string
        name: GetModelPropertiesRequest
        package: gazebo_msgs
      response:
        definition: 'string parent_model_name             # parent model

          string canonical_body_name           # name of canonical body, body names
          are prefixed by model name, e.g. pr2::base_link

          string[] body_names                  # list of bodies, body names are prefixed
          by model name, e.g. pr2::base_link

          string[] geom_names                  # list of geoms

          string[] joint_names                 # list of joints attached to the model

          string[] child_model_names           # list of child models

          bool is_static                       # returns true if model is static

          bool success                         # return true if get successful

          string status_message                # comments if available'
        fields:
        - name: parent_model_name
          type: string
        - name: canonical_body_name
          type: string
        - name: body_names
          type: string[]
        - name: geom_names
          type: string[]
        - name: joint_names
          type: string[]
        - name: child_model_names
          type: string[]
        - name: is_static
          type: bool
        - name: success
          type: bool
        - name: status_message
          type: string
        name: GetModelPropertiesResponse
        package: gazebo_msgs
    - definition: "string model_name                    # name of Gazebo Model\nstring\
        \ relative_entity_name          # return pose and twist relative to this entity\n\
        \                                     # an entity can be a model, body, or geom\n\
        \                                     # be sure to use gazebo scoped naming\
        \ notation (e.g. [model_name::body_name])\n                                \
        \     # leave empty or \"world\" will use inertial world frame\n---\nHeader\
        \ header                        # Standard metadata for higher-level stamped\
        \ data types.\n                                     # * header.seq holds the\
        \ number of requests since the plugin started\n                            \
        \         # * header.stamp timestamp related to the pose\n                 \
        \                    # * header.frame_id not used but currently filled with\
        \ the relative_entity_name\ngeometry_msgs/Pose pose              # pose of model\
        \ in relative entity frame\ngeometry_msgs/Twist twist            # twist of\
        \ model in relative entity frame\nbool success                         # return\
        \ true if get successful\nstring status_message                # comments if\
        \ available\n"
      name: GetModelState
      package: gazebo_msgs
      request:
        definition: "string model_name                    # name of Gazebo Model\nstring\
          \ relative_entity_name          # return pose and twist relative to this entity\n\
          \                                     # an entity can be a model, body, or\
          \ geom\n                                     # be sure to use gazebo scoped\
          \ naming notation (e.g. [model_name::body_name])\n                       \
          \              # leave empty or \"world\" will use inertial world frame"
        fields:
        - name: model_name
          type: string
        - name: relative_entity_name
          type: string
        name: GetModelStateRequest
        package: gazebo_msgs
      response:
        definition: "Header header                        # Standard metadata for higher-level\
          \ stamped data types.\n                                     # * header.seq\
          \ holds the number of requests since the plugin started\n                \
          \                     # * header.stamp timestamp related to the pose\n   \
          \                                  # * header.frame_id not used but currently\
          \ filled with the relative_entity_name\ngeometry_msgs/Pose pose          \
          \    # pose of model in relative entity frame\ngeometry_msgs/Twist twist \
          \           # twist of model in relative entity frame\nbool success      \
          \                   # return true if get successful\nstring status_message\
          \                # comments if available"
        fields:
        - name: header
          type: std_msgs/Header
        - name: pose
          type: geometry_msgs/Pose
        - name: twist
          type: geometry_msgs/Twist
        - name: success
          type: bool
        - name: status_message
          type: string
        name: GetModelStateResponse
        package: gazebo_msgs
    - definition: '---

        # sets pose and twist of a link.  All children link poses/twists of the URDF
        tree will be updated accordingly

        float64 time_step                  # dt in seconds

        bool pause                         # true if physics engine is paused

        float64 max_update_rate            # throttle maximum physics update rate

        geometry_msgs/Vector3 gravity      # gravity vector (e.g. earth ~[0,0,-9.81])

        gazebo_msgs/ODEPhysics ode_config  # contains physics configurations pertaining
        to ODE

        bool success                       # return true if set wrench successful

        string status_message              # comments if available

        '
      name: GetPhysicsProperties
      package: gazebo_msgs
      response:
        definition: '# sets pose and twist of a link.  All children link poses/twists
          of the URDF tree will be updated accordingly

          float64 time_step                  # dt in seconds

          bool pause                         # true if physics engine is paused

          float64 max_update_rate            # throttle maximum physics update rate

          geometry_msgs/Vector3 gravity      # gravity vector (e.g. earth ~[0,0,-9.81])

          gazebo_msgs/ODEPhysics ode_config  # contains physics configurations pertaining
          to ODE

          bool success                       # return true if set wrench successful

          string status_message              # comments if available'
        fields:
        - name: time_step
          type: float64
        - name: pause
          type: bool
        - name: max_update_rate
          type: float64
        - name: gravity
          type: geometry_msgs/Vector3
        - name: ode_config
          type: gazebo_msgs/ODEPhysics
        - name: success
          type: bool
        - name: status_message
          type: string
        name: GetPhysicsPropertiesResponse
        package: gazebo_msgs
    - definition: '---

        float64 sim_time                     # current sim time

        string[] model_names                 # list of models in the world

        bool rendering_enabled               # If gazebo rendering engine is enabled,
        currently always True

        bool success                         # return true if get successful

        string status_message                # comments if available

        '
      name: GetWorldProperties
      package: gazebo_msgs
      response:
        definition: 'float64 sim_time                     # current sim time

          string[] model_names                 # list of models in the world

          bool rendering_enabled               # If gazebo rendering engine is enabled,
          currently always True

          bool success                         # return true if get successful

          string status_message                # comments if available'
        fields:
        - name: sim_time
          type: float64
        - name: model_names
          type: string[]
        - name: rendering_enabled
          type: bool
        - name: success
          type: bool
        - name: status_message
          type: string
        name: GetWorldPropertiesResponse
        package: gazebo_msgs
    - definition: 'string joint_name   # name of the joint requested

        ---


        '
      name: JointRequest
      package: gazebo_msgs
      request:
        definition: 'string joint_name   # name of the joint requested'
        fields:
        - name: joint_name
          type: string
        name: JointRequestRequest
        package: gazebo_msgs
    - definition: 'string joint_name                               # name of joint

        gazebo_msgs/ODEJointProperties ode_joint_config # access to ODE joint dynamics
        properties

        ---

        bool success                                    # return true if get successful

        string status_message                           # comments if available

        '
      name: SetJointProperties
      package: gazebo_msgs
      request:
        definition: 'string joint_name                               # name of joint

          gazebo_msgs/ODEJointProperties ode_joint_config # access to ODE joint dynamics
          properties'
        fields:
        - name: joint_name
          type: string
        - name: ode_joint_config
          type: gazebo_msgs/ODEJointProperties
        name: SetJointPropertiesRequest
        package: gazebo_msgs
      response:
        definition: 'bool success                                    # return true if
          get successful

          string status_message                           # comments if available'
        fields:
        - name: success
          type: bool
        - name: status_message
          type: string
        name: SetJointPropertiesResponse
        package: gazebo_msgs
    - definition: 'string model_name

        trajectory_msgs/JointTrajectory joint_trajectory

        geometry_msgs/Pose model_pose

        bool set_model_pose

        bool disable_physics_updates # defaults to false

        ---

        bool success                # return true if set wrench successful

        string status_message       # comments if available

        '
      name: SetJointTrajectory
      package: gazebo_msgs
      request:
        definition: 'string model_name

          trajectory_msgs/JointTrajectory joint_trajectory

          geometry_msgs/Pose model_pose

          bool set_model_pose

          bool disable_physics_updates # defaults to false'
        fields:
        - name: model_name
          type: string
        - name: joint_trajectory
          type: trajectory_msgs/JointTrajectory
        - name: model_pose
          type: geometry_msgs/Pose
        - name: set_model_pose
          type: bool
        - name: disable_physics_updates
          type: bool
        name: SetJointTrajectoryRequest
        package: gazebo_msgs
      response:
        definition: 'bool success                # return true if set wrench successful

          string status_message       # comments if available'
        fields:
        - name: success
          type: bool
        - name: status_message
          type: string
        name: SetJointTrajectoryResponse
        package: gazebo_msgs
    - definition: 'string light_name                    # name of Gazebo Light

        std_msgs/ColorRGBA diffuse           # diffuse color as red, green, blue, alpha

        float64 attenuation_constant

        float64 attenuation_linear

        float64 attenuation_quadratic

        ---

        bool success                         # return true if get successful

        string status_message                # comments if available

        '
      name: SetLightProperties
      package: gazebo_msgs
      request:
        definition: 'string light_name                    # name of Gazebo Light

          std_msgs/ColorRGBA diffuse           # diffuse color as red, green, blue,
          alpha

          float64 attenuation_constant

          float64 attenuation_linear

          float64 attenuation_quadratic'
        fields:
        - name: light_name
          type: string
        - name: diffuse
          type: std_msgs/ColorRGBA
        - name: attenuation_constant
          type: float64
        - name: attenuation_linear
          type: float64
        - name: attenuation_quadratic
          type: float64
        name: SetLightPropertiesRequest
        package: gazebo_msgs
      response:
        definition: 'bool success                         # return true if get successful

          string status_message                # comments if available'
        fields:
        - name: success
          type: bool
        - name: status_message
          type: string
        name: SetLightPropertiesResponse
        package: gazebo_msgs
    - definition: "string link_name          # name of link\n                      \
        \    # link names are prefixed by model name, e.g. pr2::base_link\ngeometry_msgs/Pose\
        \ com    # center of mass location in link frame\n                         \
        \ # and orientation of the moment of inertias\n                          # relative\
        \ to the link frame\nbool gravity_mode         # set gravity mode on/off\nfloat64\
        \ mass              # linear mass of link\nfloat64 ixx               # moment\
        \ of inertia\nfloat64 ixy               # moment of inertia\nfloat64 ixz   \
        \            # moment of inertia\nfloat64 iyy               # moment of inertia\n\
        float64 iyz               # moment of inertia\nfloat64 izz               # moment\
        \ of inertia\n---\nbool success              # return true if get info is successful\n\
        string status_message     # comments if available\n"
      name: SetLinkProperties
      package: gazebo_msgs
      request:
        definition: "string link_name          # name of link\n                    \
          \      # link names are prefixed by model name, e.g. pr2::base_link\ngeometry_msgs/Pose\
          \ com    # center of mass location in link frame\n                       \
          \   # and orientation of the moment of inertias\n                        \
          \  # relative to the link frame\nbool gravity_mode         # set gravity mode\
          \ on/off\nfloat64 mass              # linear mass of link\nfloat64 ixx   \
          \            # moment of inertia\nfloat64 ixy               # moment of inertia\n\
          float64 ixz               # moment of inertia\nfloat64 iyy               #\
          \ moment of inertia\nfloat64 iyz               # moment of inertia\nfloat64\
          \ izz               # moment of inertia"
        fields:
        - name: link_name
          type: string
        - name: com
          type: geometry_msgs/Pose
        - name: gravity_mode
          type: bool
        - name: mass
          type: float64
        - name: ixx
          type: float64
        - name: ixy
          type: float64
        - name: ixz
          type: float64
        - name: iyy
          type: float64
        - name: iyz
          type: float64
        - name: izz
          type: float64
        name: SetLinkPropertiesRequest
        package: gazebo_msgs
      response:
        definition: 'bool success              # return true if get info is successful

          string status_message     # comments if available'
        fields:
        - name: success
          type: bool
        - name: status_message
          type: string
        name: SetLinkPropertiesResponse
        package: gazebo_msgs
    - definition: 'gazebo_msgs/LinkState link_state

        ---

        bool success                # return true if set wrench successful

        string status_message       # comments if available

        '
      name: SetLinkState
      package: gazebo_msgs
      request:
        definition: gazebo_msgs/LinkState link_state
        fields:
        - name: link_state
          type: gazebo_msgs/LinkState
        name: SetLinkStateRequest
        package: gazebo_msgs
      response:
        definition: 'bool success                # return true if set wrench successful

          string status_message       # comments if available'
        fields:
        - name: success
          type: bool
        - name: status_message
          type: string
        name: SetLinkStateResponse
        package: gazebo_msgs
    - definition: '# Set joint positions for a model

        string model_name           # model to set state

        string urdf_param_name      # UNUSED


        string[] joint_names        # list of joints to set positions.  if joint is
        not listed here, preserve current position.

        float64[] joint_positions   # set to this position.

        ---

        bool success                # return true if setting state successful

        string status_message       # comments if available

        '
      name: SetModelConfiguration
      package: gazebo_msgs
      request:
        definition: '# Set joint positions for a model

          string model_name           # model to set state

          string urdf_param_name      # UNUSED


          string[] joint_names        # list of joints to set positions.  if joint is
          not listed here, preserve current position.

          float64[] joint_positions   # set to this position.'
        fields:
        - name: model_name
          type: string
        - name: urdf_param_name
          type: string
        - name: joint_names
          type: string[]
        - name: joint_positions
          type: float64[]
        name: SetModelConfigurationRequest
        package: gazebo_msgs
      response:
        definition: 'bool success                # return true if setting state successful

          string status_message       # comments if available'
        fields:
        - name: success
          type: bool
        - name: status_message
          type: string
        name: SetModelConfigurationResponse
        package: gazebo_msgs
    - definition: 'gazebo_msgs/ModelState model_state

        ---

        bool success                  # return true if setting state successful

        string status_message         # comments if available

        '
      name: SetModelState
      package: gazebo_msgs
      request:
        definition: gazebo_msgs/ModelState model_state
        fields:
        - name: model_state
          type: gazebo_msgs/ModelState
        name: SetModelStateRequest
        package: gazebo_msgs
      response:
        definition: 'bool success                  # return true if setting state successful

          string status_message         # comments if available'
        fields:
        - name: success
          type: bool
        - name: status_message
          type: string
        name: SetModelStateResponse
        package: gazebo_msgs
    - definition: '# sets pose and twist of a link.  All children link poses/twists
        of the URDF tree will be updated accordingly

        float64 time_step                  # dt in seconds

        float64 max_update_rate            # throttle maximum physics update rate

        geometry_msgs/Vector3 gravity      # gravity vector (e.g. earth ~[0,0,-9.81])

        gazebo_msgs/ODEPhysics ode_config  # configurations for ODE

        ---

        bool success                       # return true if set wrench successful

        string status_message              # comments if available

        '
      name: SetPhysicsProperties
      package: gazebo_msgs
      request:
        definition: '# sets pose and twist of a link.  All children link poses/twists
          of the URDF tree will be updated accordingly

          float64 time_step                  # dt in seconds

          float64 max_update_rate            # throttle maximum physics update rate

          geometry_msgs/Vector3 gravity      # gravity vector (e.g. earth ~[0,0,-9.81])

          gazebo_msgs/ODEPhysics ode_config  # configurations for ODE'
        fields:
        - name: time_step
          type: float64
        - name: max_update_rate
          type: float64
        - name: gravity
          type: geometry_msgs/Vector3
        - name: ode_config
          type: gazebo_msgs/ODEPhysics
        name: SetPhysicsPropertiesRequest
        package: gazebo_msgs
      response:
        definition: 'bool success                       # return true if set wrench
          successful

          string status_message              # comments if available'
        fields:
        - name: success
          type: bool
        - name: status_message
          type: string
        name: SetPhysicsPropertiesResponse
        package: gazebo_msgs
    - definition: "string model_name                 # name of the model to be spawn\n\
        string model_xml                  # this should be an urdf or gazebo xml\nstring\
        \ robot_namespace            # spawn robot and all ROS interfaces under this\
        \ namespace\ngeometry_msgs/Pose initial_pose   # only applied to canonical body\n\
        string reference_frame            # initial_pose is defined relative to the\
        \ frame of this model/body\n                                  # if left empty\
        \ or \"world\", then gazebo world frame is used\n                          \
        \        # if non-existent model/body is specified, an error is returned\n \
        \                                 #   and the model is not spawned\n---\nbool\
        \ success                      # return true if spawn successful\nstring status_message\
        \             # comments if available\n"
      name: SpawnModel
      package: gazebo_msgs
      request:
        definition: "string model_name                 # name of the model to be spawn\n\
          string model_xml                  # this should be an urdf or gazebo xml\n\
          string robot_namespace            # spawn robot and all ROS interfaces under\
          \ this namespace\ngeometry_msgs/Pose initial_pose   # only applied to canonical\
          \ body\nstring reference_frame            # initial_pose is defined relative\
          \ to the frame of this model/body\n                                  # if\
          \ left empty or \"world\", then gazebo world frame is used\n             \
          \                     # if non-existent model/body is specified, an error\
          \ is returned\n                                  #   and the model is not\
          \ spawned"
        fields:
        - name: model_name
          type: string
        - name: model_xml
          type: string
        - name: robot_namespace
          type: string
        - name: initial_pose
          type: geometry_msgs/Pose
        - name: reference_frame
          type: string
        name: SpawnModelRequest
        package: gazebo_msgs
      response:
        definition: 'bool success                      # return true if spawn successful

          string status_message             # comments if available'
        fields:
        - name: success
          type: bool
        - name: status_message
          type: string
        name: SpawnModelResponse
        package: gazebo_msgs
  - actions: []
    messages:
    - definition: 'string name

        string level

        '
      fields:
      - name: name
        type: string
      - name: level
        type: string
      name: Logger
      package: roscpp
    name: roscpp
    path: /opt/ros/melodic/share/roscpp
    services:
    - definition: '---'
      name: Empty
      package: roscpp
    - definition: '---

        Logger[] loggers'
      name: GetLoggers
      package: roscpp
      response:
        definition: Logger[] loggers
        fields:
        - name: loggers
          type: roscpp/Logger[]
        name: GetLoggersResponse
        package: roscpp
    - definition: 'string logger

        string level

        ---'
      name: SetLoggerLevel
      package: roscpp
      request:
        definition: 'string logger

          string level'
        fields:
        - name: logger
          type: string
        - name: level
          type: string
        name: SetLoggerLevelRequest
        package: roscpp
  - actions: []
    messages: []
    name: rostopic
    path: /opt/ros/melodic/share/rostopic
    services: []
  - actions: []
    messages: []
    name: ros_base
    path: /opt/ros/melodic/share/ros_base
    services: []
  - actions: []
    messages: []
    name: tf2_kdl
    path: /opt/ros/melodic/share/tf2_kdl
    services: []
  - actions: []
    messages: []
    name: rosbag_migration_rule
    path: /opt/ros/melodic/share/rosbag_migration_rule
    services: []
  - actions: []
    messages: []
    name: common_msgs
    path: /opt/ros/melodic/share/common_msgs
    services: []
  - actions: []
    messages: []
    name: rosbag
    path: /opt/ros/melodic/share/rosbag
    services: []
  - actions: []
    messages: []
    name: orocos_kdl
    path: /opt/ros/melodic/share/orocos_kdl
    services: []
  - actions: []
    messages: []
    name: rviz
    path: /opt/ros/melodic/share/rviz
    services: []
  - actions: []
    messages:
    - definition: 'int64 x

        int64 y'
      fields:
      - name: x
        type: int64
      - name: y
        type: int64
      name: Position2DInt
      package: base_local_planner
    name: base_local_planner
    path: /opt/ros/melodic/share/base_local_planner
    services: []
  - actions:
    - definition: 'geometry_msgs/PoseStamped target_pose

        ---

        ---

        geometry_msgs/PoseStamped base_position

        '
      feedback:
        definition: geometry_msgs/PoseStamped base_position
        fields:
        - name: base_position
          type: geometry_msgs/PoseStamped
        name: MoveBaseFeedback
        package: move_base_msgs
      goal:
        definition: geometry_msgs/PoseStamped target_pose
        fields:
        - name: target_pose
          type: geometry_msgs/PoseStamped
        name: MoveBaseGoal
        package: move_base_msgs
      name: MoveBase
      package: move_base_msgs
      result:
        definition: ''
        name: MoveBaseResult
        package: move_base_msgs
    messages:
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        MoveBaseActionGoal action_goal

        MoveBaseActionResult action_result

        MoveBaseActionFeedback action_feedback

        '
      fields:
      - name: action_goal
        type: move_base_msgs/MoveBaseActionGoal
      - name: action_result
        type: move_base_msgs/MoveBaseActionResult
      - name: action_feedback
        type: move_base_msgs/MoveBaseActionFeedback
      name: MoveBaseAction
      package: move_base_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        MoveBaseFeedback feedback

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: feedback
        type: move_base_msgs/MoveBaseFeedback
      name: MoveBaseActionFeedback
      package: move_base_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalID goal_id

        MoveBaseGoal goal

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: goal_id
        type: actionlib_msgs/GoalID
      - name: goal
        type: move_base_msgs/MoveBaseGoal
      name: MoveBaseActionGoal
      package: move_base_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        MoveBaseResult result

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: result
        type: move_base_msgs/MoveBaseResult
      name: MoveBaseActionResult
      package: move_base_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        geometry_msgs/PoseStamped base_position


        '
      fields:
      - name: base_position
        type: geometry_msgs/PoseStamped
      name: MoveBaseFeedback
      package: move_base_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        geometry_msgs/PoseStamped target_pose

        '
      fields:
      - name: target_pose
        type: geometry_msgs/PoseStamped
      name: MoveBaseGoal
      package: move_base_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        '
      name: MoveBaseResult
      package: move_base_msgs
    name: move_base_msgs
    path: /opt/ros/melodic/share/move_base_msgs
    services: []
  - actions: []
    messages: []
    name: srdfdom
    path: /opt/ros/melodic/share/srdfdom
    services: []
  - actions: []
    messages: []
    name: kdl_parser
    path: /opt/ros/melodic/share/kdl_parser
    services: []
  - actions: []
    messages: []
    name: polled_camera
    path: /opt/ros/melodic/share/polled_camera
    services:
    - definition: "# Namespace to publish response topics in. A polled camera driver\
        \ node\n# should publish:\n#   <response_namespace>/image_raw\n#   <response_namespace>/camera_info\n\
        string response_namespace\n\n# Timeout for attempting to capture data from the\
        \ device. This does not\n# include latency from ROS communication, post-processing\
        \ of raw camera\n# data, etc. A zero duration indicates no time limit.\nduration\
        \ timeout\n\n# Binning settings, if supported by the camera.\nuint32 binning_x\n\
        uint32 binning_y\n\n# Region of interest, if supported by the camera.\nsensor_msgs/RegionOfInterest\
        \ roi\n---\nbool success          # Could the image be captured?\nstring status_message\
        \ # Error message in case of failure\ntime stamp            # Timestamp of the\
        \ captured image. Can be matched\n                      # against incoming sensor_msgs/Image\
        \ header.\n"
      name: GetPolledImage
      package: polled_camera
      request:
        definition: '# Namespace to publish response topics in. A polled camera driver
          node

          # should publish:

          #   <response_namespace>/image_raw

          #   <response_namespace>/camera_info

          string response_namespace


          # Timeout for attempting to capture data from the device. This does not

          # include latency from ROS communication, post-processing of raw camera

          # data, etc. A zero duration indicates no time limit.

          duration timeout


          # Binning settings, if supported by the camera.

          uint32 binning_x

          uint32 binning_y


          # Region of interest, if supported by the camera.

          sensor_msgs/RegionOfInterest roi'
        fields:
        - name: response_namespace
          type: string
        - name: timeout
          type: duration
        - name: binning_x
          type: uint32
        - name: binning_y
          type: uint32
        - name: roi
          type: sensor_msgs/RegionOfInterest
        name: GetPolledImageRequest
        package: polled_camera
      response:
        definition: "bool success          # Could the image be captured?\nstring status_message\
          \ # Error message in case of failure\ntime stamp            # Timestamp of\
          \ the captured image. Can be matched\n                      # against incoming\
          \ sensor_msgs/Image header."
        fields:
        - name: success
          type: bool
        - name: status_message
          type: string
        - name: stamp
          type: time
        name: GetPolledImageResponse
        package: polled_camera
  - actions:
    - definition: '# The joint trajectory to follow

        trajectory_msgs/JointTrajectory trajectory


        # Tolerances for the trajectory.  If the measured joint values fall

        # outside the tolerances the trajectory goal is aborted.  Any

        # tolerances that are not specified (by being omitted or set to 0) are

        # set to the defaults for the action server (often taken from the

        # parameter server).


        # Tolerances applied to the joints as the trajectory is executed.  If

        # violated, the goal aborts with error_code set to

        # PATH_TOLERANCE_VIOLATED.

        JointTolerance[] path_tolerance


        # To report success, the joints must be within goal_tolerance of the

        # final trajectory value.  The goal must be achieved by time the

        # trajectory ends plus goal_time_tolerance.  (goal_time_tolerance

        # allows some leeway in time, so that the trajectory goal can still

        # succeed even if the joints reach the goal some time after the

        # precise end time of the trajectory).

        #

        # If the joints are not within goal_tolerance after "trajectory finish

        # time" + goal_time_tolerance, the goal aborts with error_code set to

        # GOAL_TOLERANCE_VIOLATED

        JointTolerance[] goal_tolerance

        duration goal_time_tolerance


        ---

        int32 error_code

        int32 SUCCESSFUL = 0

        int32 INVALID_GOAL = -1

        int32 INVALID_JOINTS = -2

        int32 OLD_HEADER_TIMESTAMP = -3

        int32 PATH_TOLERANCE_VIOLATED = -4

        int32 GOAL_TOLERANCE_VIOLATED = -5


        # Human readable description of the error code. Contains complementary

        # information that is especially useful when execution fails, for instance:

        # - INVALID_GOAL: The reason for the invalid goal (e.g., the requested

        #   trajectory is in the past).

        # - INVALID_JOINTS: The mismatch between the expected controller joints

        #   and those provided in the goal.

        # - PATH_TOLERANCE_VIOLATED and GOAL_TOLERANCE_VIOLATED: Which joint

        #   violated which tolerance, and by how much.

        string error_string


        ---

        Header header

        string[] joint_names

        trajectory_msgs/JointTrajectoryPoint desired

        trajectory_msgs/JointTrajectoryPoint actual

        trajectory_msgs/JointTrajectoryPoint error

        '
      feedback:
        definition: 'Header header

          string[] joint_names

          trajectory_msgs/JointTrajectoryPoint desired

          trajectory_msgs/JointTrajectoryPoint actual

          trajectory_msgs/JointTrajectoryPoint error'
        fields:
        - name: header
          type: std_msgs/Header
        - name: joint_names
          type: string[]
        - name: desired
          type: trajectory_msgs/JointTrajectoryPoint
        - name: actual
          type: trajectory_msgs/JointTrajectoryPoint
        - name: error
          type: trajectory_msgs/JointTrajectoryPoint
        name: FollowJointTrajectoryFeedback
        package: control_msgs
      goal:
        definition: '# The joint trajectory to follow

          trajectory_msgs/JointTrajectory trajectory


          # Tolerances for the trajectory.  If the measured joint values fall

          # outside the tolerances the trajectory goal is aborted.  Any

          # tolerances that are not specified (by being omitted or set to 0) are

          # set to the defaults for the action server (often taken from the

          # parameter server).


          # Tolerances applied to the joints as the trajectory is executed.  If

          # violated, the goal aborts with error_code set to

          # PATH_TOLERANCE_VIOLATED.

          JointTolerance[] path_tolerance


          # To report success, the joints must be within goal_tolerance of the

          # final trajectory value.  The goal must be achieved by time the

          # trajectory ends plus goal_time_tolerance.  (goal_time_tolerance

          # allows some leeway in time, so that the trajectory goal can still

          # succeed even if the joints reach the goal some time after the

          # precise end time of the trajectory).

          #

          # If the joints are not within goal_tolerance after "trajectory finish

          # time" + goal_time_tolerance, the goal aborts with error_code set to

          # GOAL_TOLERANCE_VIOLATED

          JointTolerance[] goal_tolerance

          duration goal_time_tolerance'
        fields:
        - name: trajectory
          type: trajectory_msgs/JointTrajectory
        - name: path_tolerance
          type: control_msgs/JointTolerance[]
        - name: goal_tolerance
          type: control_msgs/JointTolerance[]
        - name: goal_time_tolerance
          type: duration
        name: FollowJointTrajectoryGoal
        package: control_msgs
      name: FollowJointTrajectory
      package: control_msgs
      result:
        constants:
        - name: SUCCESSFUL
          type: int32
          value: '0'
        - name: INVALID_GOAL
          type: int32
          value: '-1'
        - name: INVALID_JOINTS
          type: int32
          value: '-2'
        - name: OLD_HEADER_TIMESTAMP
          type: int32
          value: '-3'
        - name: PATH_TOLERANCE_VIOLATED
          type: int32
          value: '-4'
        - name: GOAL_TOLERANCE_VIOLATED
          type: int32
          value: '-5'
        definition: 'int32 error_code

          int32 SUCCESSFUL = 0

          int32 INVALID_GOAL = -1

          int32 INVALID_JOINTS = -2

          int32 OLD_HEADER_TIMESTAMP = -3

          int32 PATH_TOLERANCE_VIOLATED = -4

          int32 GOAL_TOLERANCE_VIOLATED = -5


          # Human readable description of the error code. Contains complementary

          # information that is especially useful when execution fails, for instance:

          # - INVALID_GOAL: The reason for the invalid goal (e.g., the requested

          #   trajectory is in the past).

          # - INVALID_JOINTS: The mismatch between the expected controller joints

          #   and those provided in the goal.

          # - PATH_TOLERANCE_VIOLATED and GOAL_TOLERANCE_VIOLATED: Which joint

          #   violated which tolerance, and by how much.

          string error_string'
        fields:
        - name: error_code
          type: int32
        - name: error_string
          type: string
        name: FollowJointTrajectoryResult
        package: control_msgs
    - definition: 'GripperCommand command

        ---

        float64 position  # The current gripper gap size (in meters)

        float64 effort    # The current effort exerted (in Newtons)

        bool stalled      # True iff the gripper is exerting max effort and not moving

        bool reached_goal # True iff the gripper position has reached the commanded
        setpoint

        ---

        float64 position  # The current gripper gap size (in meters)

        float64 effort    # The current effort exerted (in Newtons)

        bool stalled      # True iff the gripper is exerting max effort and not moving

        bool reached_goal # True iff the gripper position has reached the commanded
        setpoint

        '
      feedback:
        definition: 'float64 position  # The current gripper gap size (in meters)

          float64 effort    # The current effort exerted (in Newtons)

          bool stalled      # True iff the gripper is exerting max effort and not moving

          bool reached_goal # True iff the gripper position has reached the commanded
          setpoint'
        fields:
        - name: position
          type: float64
        - name: effort
          type: float64
        - name: stalled
          type: bool
        - name: reached_goal
          type: bool
        name: GripperCommandFeedback
        package: control_msgs
      goal:
        definition: GripperCommand command
        fields:
        - name: command
          type: control_msgs/GripperCommand
        name: GripperCommandGoal
        package: control_msgs
      name: GripperCommand
      package: control_msgs
      result:
        definition: 'float64 position  # The current gripper gap size (in meters)

          float64 effort    # The current effort exerted (in Newtons)

          bool stalled      # True iff the gripper is exerting max effort and not moving

          bool reached_goal # True iff the gripper position has reached the commanded
          setpoint'
        fields:
        - name: position
          type: float64
        - name: effort
          type: float64
        - name: stalled
          type: bool
        - name: reached_goal
          type: bool
        name: GripperCommandResult
        package: control_msgs
    - definition: 'trajectory_msgs/JointTrajectory trajectory

        ---

        ---

        '
      feedback:
        definition: ''
        name: JointTrajectoryFeedback
        package: control_msgs
      goal:
        definition: trajectory_msgs/JointTrajectory trajectory
        fields:
        - name: trajectory
          type: trajectory_msgs/JointTrajectory
        name: JointTrajectoryGoal
        package: control_msgs
      name: JointTrajectory
      package: control_msgs
      result:
        definition: ''
        name: JointTrajectoryResult
        package: control_msgs
    - definition: 'geometry_msgs/PointStamped target

        geometry_msgs/Vector3 pointing_axis

        string pointing_frame

        duration min_duration

        float64 max_velocity

        ---

        ---

        float64 pointing_angle_error

        '
      feedback:
        definition: float64 pointing_angle_error
        fields:
        - name: pointing_angle_error
          type: float64
        name: PointHeadFeedback
        package: control_msgs
      goal:
        definition: 'geometry_msgs/PointStamped target

          geometry_msgs/Vector3 pointing_axis

          string pointing_frame

          duration min_duration

          float64 max_velocity'
        fields:
        - name: target
          type: geometry_msgs/PointStamped
        - name: pointing_axis
          type: geometry_msgs/Vector3
        - name: pointing_frame
          type: string
        - name: min_duration
          type: duration
        - name: max_velocity
          type: float64
        name: PointHeadGoal
        package: control_msgs
      name: PointHead
      package: control_msgs
      result:
        definition: ''
        name: PointHeadResult
        package: control_msgs
    - definition: 'float64 position

        duration min_duration

        float64 max_velocity

        ---

        ---

        Header header

        float64 position

        float64 velocity

        float64 error

        '
      feedback:
        definition: 'Header header

          float64 position

          float64 velocity

          float64 error'
        fields:
        - name: header
          type: std_msgs/Header
        - name: position
          type: float64
        - name: velocity
          type: float64
        - name: error
          type: float64
        name: SingleJointPositionFeedback
        package: control_msgs
      goal:
        definition: 'float64 position

          duration min_duration

          float64 max_velocity'
        fields:
        - name: position
          type: float64
        - name: min_duration
          type: duration
        - name: max_velocity
          type: float64
        name: SingleJointPositionGoal
        package: control_msgs
      name: SingleJointPosition
      package: control_msgs
      result:
        definition: ''
        name: SingleJointPositionResult
        package: control_msgs
    messages:
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        FollowJointTrajectoryActionGoal action_goal

        FollowJointTrajectoryActionResult action_result

        FollowJointTrajectoryActionFeedback action_feedback

        '
      fields:
      - name: action_goal
        type: control_msgs/FollowJointTrajectoryActionGoal
      - name: action_result
        type: control_msgs/FollowJointTrajectoryActionResult
      - name: action_feedback
        type: control_msgs/FollowJointTrajectoryActionFeedback
      name: FollowJointTrajectoryAction
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        FollowJointTrajectoryFeedback feedback

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: feedback
        type: control_msgs/FollowJointTrajectoryFeedback
      name: FollowJointTrajectoryActionFeedback
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalID goal_id

        FollowJointTrajectoryGoal goal

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: goal_id
        type: actionlib_msgs/GoalID
      - name: goal
        type: control_msgs/FollowJointTrajectoryGoal
      name: FollowJointTrajectoryActionGoal
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        FollowJointTrajectoryResult result

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: result
        type: control_msgs/FollowJointTrajectoryResult
      name: FollowJointTrajectoryActionResult
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        Header header

        string[] joint_names

        trajectory_msgs/JointTrajectoryPoint desired

        trajectory_msgs/JointTrajectoryPoint actual

        trajectory_msgs/JointTrajectoryPoint error


        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: joint_names
        type: string[]
      - name: desired
        type: trajectory_msgs/JointTrajectoryPoint
      - name: actual
        type: trajectory_msgs/JointTrajectoryPoint
      - name: error
        type: trajectory_msgs/JointTrajectoryPoint
      name: FollowJointTrajectoryFeedback
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        # The joint trajectory to follow

        trajectory_msgs/JointTrajectory trajectory


        # Tolerances for the trajectory.  If the measured joint values fall

        # outside the tolerances the trajectory goal is aborted.  Any

        # tolerances that are not specified (by being omitted or set to 0) are

        # set to the defaults for the action server (often taken from the

        # parameter server).


        # Tolerances applied to the joints as the trajectory is executed.  If

        # violated, the goal aborts with error_code set to

        # PATH_TOLERANCE_VIOLATED.

        JointTolerance[] path_tolerance


        # To report success, the joints must be within goal_tolerance of the

        # final trajectory value.  The goal must be achieved by time the

        # trajectory ends plus goal_time_tolerance.  (goal_time_tolerance

        # allows some leeway in time, so that the trajectory goal can still

        # succeed even if the joints reach the goal some time after the

        # precise end time of the trajectory).

        #

        # If the joints are not within goal_tolerance after "trajectory finish

        # time" + goal_time_tolerance, the goal aborts with error_code set to

        # GOAL_TOLERANCE_VIOLATED

        JointTolerance[] goal_tolerance

        duration goal_time_tolerance


        '
      fields:
      - name: trajectory
        type: trajectory_msgs/JointTrajectory
      - name: path_tolerance
        type: control_msgs/JointTolerance[]
      - name: goal_tolerance
        type: control_msgs/JointTolerance[]
      - name: goal_time_tolerance
        type: duration
      name: FollowJointTrajectoryGoal
      package: control_msgs
    - constants:
      - name: SUCCESSFUL
        type: int32
        value: '0'
      - name: INVALID_GOAL
        type: int32
        value: '-1'
      - name: INVALID_JOINTS
        type: int32
        value: '-2'
      - name: OLD_HEADER_TIMESTAMP
        type: int32
        value: '-3'
      - name: PATH_TOLERANCE_VIOLATED
        type: int32
        value: '-4'
      - name: GOAL_TOLERANCE_VIOLATED
        type: int32
        value: '-5'
      definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        int32 error_code

        int32 SUCCESSFUL = 0

        int32 INVALID_GOAL = -1

        int32 INVALID_JOINTS = -2

        int32 OLD_HEADER_TIMESTAMP = -3

        int32 PATH_TOLERANCE_VIOLATED = -4

        int32 GOAL_TOLERANCE_VIOLATED = -5


        # Human readable description of the error code. Contains complementary

        # information that is especially useful when execution fails, for instance:

        # - INVALID_GOAL: The reason for the invalid goal (e.g., the requested

        #   trajectory is in the past).

        # - INVALID_JOINTS: The mismatch between the expected controller joints

        #   and those provided in the goal.

        # - PATH_TOLERANCE_VIOLATED and GOAL_TOLERANCE_VIOLATED: Which joint

        #   violated which tolerance, and by how much.

        string error_string


        '
      fields:
      - name: error_code
        type: int32
      - name: error_string
        type: string
      name: FollowJointTrajectoryResult
      package: control_msgs
    - definition: 'float64 position

        float64 max_effort

        '
      fields:
      - name: position
        type: float64
      - name: max_effort
        type: float64
      name: GripperCommand
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        GripperCommandActionGoal action_goal

        GripperCommandActionResult action_result

        GripperCommandActionFeedback action_feedback

        '
      fields:
      - name: action_goal
        type: control_msgs/GripperCommandActionGoal
      - name: action_result
        type: control_msgs/GripperCommandActionResult
      - name: action_feedback
        type: control_msgs/GripperCommandActionFeedback
      name: GripperCommandAction
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        GripperCommandFeedback feedback

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: feedback
        type: control_msgs/GripperCommandFeedback
      name: GripperCommandActionFeedback
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalID goal_id

        GripperCommandGoal goal

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: goal_id
        type: actionlib_msgs/GoalID
      - name: goal
        type: control_msgs/GripperCommandGoal
      name: GripperCommandActionGoal
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        GripperCommandResult result

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: result
        type: control_msgs/GripperCommandResult
      name: GripperCommandActionResult
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        float64 position  # The current gripper gap size (in meters)

        float64 effort    # The current effort exerted (in Newtons)

        bool stalled      # True iff the gripper is exerting max effort and not moving

        bool reached_goal # True iff the gripper position has reached the commanded
        setpoint


        '
      fields:
      - name: position
        type: float64
      - name: effort
        type: float64
      - name: stalled
        type: bool
      - name: reached_goal
        type: bool
      name: GripperCommandFeedback
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        GripperCommand command

        '
      fields:
      - name: command
        type: control_msgs/GripperCommand
      name: GripperCommandGoal
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        float64 position  # The current gripper gap size (in meters)

        float64 effort    # The current effort exerted (in Newtons)

        bool stalled      # True iff the gripper is exerting max effort and not moving

        bool reached_goal # True iff the gripper position has reached the commanded
        setpoint

        '
      fields:
      - name: position
        type: float64
      - name: effort
        type: float64
      - name: stalled
        type: bool
      - name: reached_goal
        type: bool
      name: GripperCommandResult
      package: control_msgs
    - definition: '# This message presents current controller state of one joint.


        # Header timestamp should be update time of controller state

        Header header


        # The set point, that is, desired state.

        float64 set_point


        # Current value of the process (ie: latest sensor measurement on the controlled
        value).

        float64 process_value


        # First time-derivative of the process value.

        float64 process_value_dot


        # The error of the controlled value, essentially process_value - set_point (for
        a regular PID implementation).

        float64 error


        # Time between two consecutive updates/execution of the control law.

        float64 time_step


        # Current output of the controller.

        float64 command


        # Current PID parameters of the controller.

        float64 p

        float64 i

        float64 d

        float64 i_clamp

        bool antiwindup

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: set_point
        type: float64
      - name: process_value
        type: float64
      - name: process_value_dot
        type: float64
      - name: error
        type: float64
      - name: time_step
        type: float64
      - name: command
        type: float64
      - name: p
        type: float64
      - name: i
        type: float64
      - name: d
        type: float64
      - name: i_clamp
        type: float64
      - name: antiwindup
        type: bool
      name: JointControllerState
      package: control_msgs
    - definition: '# Used in time-stamping the message.

        Header header


        # Name list of the joints. You don''t need to specify all joints of the

        # robot. Joint names are case-sensitive.

        string[] joint_names


        # A position command to the joints listed in joint_names.

        # The order must be identical.

        # Units are meters or radians.

        # If displacements and velocities are filled, a profiled motion is requested.

        float64[] displacements # or position_deltas


        # A velocity command to the joints listed in joint_names.

        # The order must be identical.

        # Units are m/s or rad/s.

        # If displacements and velocities are filled, a profiled motion is requested.

        float64[] velocities


        float64 duration

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: joint_names
        type: string[]
      - name: displacements
        type: float64[]
      - name: velocities
        type: float64[]
      - name: duration
        type: float64
      name: JointJog
      package: control_msgs
    - definition: "# The tolerances specify the amount the position, velocity, and\n\
        # accelerations can vary from the setpoints.  For example, in the case\n# of\
        \ trajectory control, when the actual position varies beyond\n# (desired position\
        \ + position tolerance), the trajectory goal may\n# abort.\n# \n# There are\
        \ two special values for tolerances:\n#  * 0 - The tolerance is unspecified\
        \ and will remain at whatever the default is\n#  * -1 - The tolerance is \"\
        erased\".  If there was a default, the joint will be\n#         allowed to move\
        \ without restriction.\n\nstring name\nfloat64 position  # in radians or meters\
        \ (for a revolute or prismatic joint, respectively)\nfloat64 velocity  # in\
        \ rad/sec or m/sec\nfloat64 acceleration  # in rad/sec^2 or m/sec^2\n"
      fields:
      - name: name
        type: string
      - name: position
        type: float64
      - name: velocity
        type: float64
      - name: acceleration
        type: float64
      name: JointTolerance
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        JointTrajectoryActionGoal action_goal

        JointTrajectoryActionResult action_result

        JointTrajectoryActionFeedback action_feedback

        '
      fields:
      - name: action_goal
        type: control_msgs/JointTrajectoryActionGoal
      - name: action_result
        type: control_msgs/JointTrajectoryActionResult
      - name: action_feedback
        type: control_msgs/JointTrajectoryActionFeedback
      name: JointTrajectoryAction
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        JointTrajectoryFeedback feedback

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: feedback
        type: control_msgs/JointTrajectoryFeedback
      name: JointTrajectoryActionFeedback
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalID goal_id

        JointTrajectoryGoal goal

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: goal_id
        type: actionlib_msgs/GoalID
      - name: goal
        type: control_msgs/JointTrajectoryGoal
      name: JointTrajectoryActionGoal
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        JointTrajectoryResult result

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: result
        type: control_msgs/JointTrajectoryResult
      name: JointTrajectoryActionResult
      package: control_msgs
    - definition: 'Header header

        string[] joint_names

        trajectory_msgs/JointTrajectoryPoint desired

        trajectory_msgs/JointTrajectoryPoint actual

        trajectory_msgs/JointTrajectoryPoint error  # Redundant, but useful

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: joint_names
        type: string[]
      - name: desired
        type: trajectory_msgs/JointTrajectoryPoint
      - name: actual
        type: trajectory_msgs/JointTrajectoryPoint
      - name: error
        type: trajectory_msgs/JointTrajectoryPoint
      name: JointTrajectoryControllerState
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        '
      name: JointTrajectoryFeedback
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        trajectory_msgs/JointTrajectory trajectory

        '
      fields:
      - name: trajectory
        type: trajectory_msgs/JointTrajectory
      name: JointTrajectoryGoal
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        '
      name: JointTrajectoryResult
      package: control_msgs
    - definition: 'Header header

        duration timestep

        float64 error

        float64 error_dot

        float64 p_error

        float64 i_error

        float64 d_error

        float64 p_term

        float64 i_term

        float64 d_term

        float64 i_max

        float64 i_min

        float64 output

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: timestep
        type: duration
      - name: error
        type: float64
      - name: error_dot
        type: float64
      - name: p_error
        type: float64
      - name: i_error
        type: float64
      - name: d_error
        type: float64
      - name: p_term
        type: float64
      - name: i_term
        type: float64
      - name: d_term
        type: float64
      - name: i_max
        type: float64
      - name: i_min
        type: float64
      - name: output
        type: float64
      name: PidState
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        PointHeadActionGoal action_goal

        PointHeadActionResult action_result

        PointHeadActionFeedback action_feedback

        '
      fields:
      - name: action_goal
        type: control_msgs/PointHeadActionGoal
      - name: action_result
        type: control_msgs/PointHeadActionResult
      - name: action_feedback
        type: control_msgs/PointHeadActionFeedback
      name: PointHeadAction
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        PointHeadFeedback feedback

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: feedback
        type: control_msgs/PointHeadFeedback
      name: PointHeadActionFeedback
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalID goal_id

        PointHeadGoal goal

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: goal_id
        type: actionlib_msgs/GoalID
      - name: goal
        type: control_msgs/PointHeadGoal
      name: PointHeadActionGoal
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        PointHeadResult result

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: result
        type: control_msgs/PointHeadResult
      name: PointHeadActionResult
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        float64 pointing_angle_error


        '
      fields:
      - name: pointing_angle_error
        type: float64
      name: PointHeadFeedback
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        geometry_msgs/PointStamped target

        geometry_msgs/Vector3 pointing_axis

        string pointing_frame

        duration min_duration

        float64 max_velocity

        '
      fields:
      - name: target
        type: geometry_msgs/PointStamped
      - name: pointing_axis
        type: geometry_msgs/Vector3
      - name: pointing_frame
        type: string
      - name: min_duration
        type: duration
      - name: max_velocity
        type: float64
      name: PointHeadGoal
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        '
      name: PointHeadResult
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        SingleJointPositionActionGoal action_goal

        SingleJointPositionActionResult action_result

        SingleJointPositionActionFeedback action_feedback

        '
      fields:
      - name: action_goal
        type: control_msgs/SingleJointPositionActionGoal
      - name: action_result
        type: control_msgs/SingleJointPositionActionResult
      - name: action_feedback
        type: control_msgs/SingleJointPositionActionFeedback
      name: SingleJointPositionAction
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        SingleJointPositionFeedback feedback

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: feedback
        type: control_msgs/SingleJointPositionFeedback
      name: SingleJointPositionActionFeedback
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalID goal_id

        SingleJointPositionGoal goal

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: goal_id
        type: actionlib_msgs/GoalID
      - name: goal
        type: control_msgs/SingleJointPositionGoal
      name: SingleJointPositionActionGoal
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        SingleJointPositionResult result

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: result
        type: control_msgs/SingleJointPositionResult
      name: SingleJointPositionActionResult
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        Header header

        float64 position

        float64 velocity

        float64 error


        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: position
        type: float64
      - name: velocity
        type: float64
      - name: error
        type: float64
      name: SingleJointPositionFeedback
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        float64 position

        duration min_duration

        float64 max_velocity

        '
      fields:
      - name: position
        type: float64
      - name: min_duration
        type: duration
      - name: max_velocity
        type: float64
      name: SingleJointPositionGoal
      package: control_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        '
      name: SingleJointPositionResult
      package: control_msgs
    name: control_msgs
    path: /opt/ros/melodic/share/control_msgs
    services:
    - definition: '---

        bool is_calibrated'
      name: QueryCalibrationState
      package: control_msgs
      response:
        definition: bool is_calibrated
        fields:
        - name: is_calibrated
          type: bool
        name: QueryCalibrationStateResponse
        package: control_msgs
    - definition: 'time time

        ---

        string[] name

        float64[] position

        float64[] velocity

        float64[] acceleration

        '
      name: QueryTrajectoryState
      package: control_msgs
      request:
        definition: time time
        fields:
        - name: time
          type: time
        name: QueryTrajectoryStateRequest
        package: control_msgs
      response:
        definition: 'string[] name

          float64[] position

          float64[] velocity

          float64[] acceleration'
        fields:
        - name: name
          type: string[]
        - name: position
          type: float64[]
        - name: velocity
          type: float64[]
        - name: acceleration
          type: float64[]
        name: QueryTrajectoryStateResponse
        package: control_msgs
  - actions: []
    messages: []
    name: topic_tools
    path: /opt/ros/melodic/share/topic_tools
    services:
    - definition: 'string topic

        ---

        '
      name: DemuxAdd
      package: topic_tools
      request:
        definition: string topic
        fields:
        - name: topic
          type: string
        name: DemuxAddRequest
        package: topic_tools
    - definition: 'string topic

        ---


        '
      name: DemuxDelete
      package: topic_tools
      request:
        definition: string topic
        fields:
        - name: topic
          type: string
        name: DemuxDeleteRequest
        package: topic_tools
    - definition: '---

        string[] topics

        '
      name: DemuxList
      package: topic_tools
      response:
        definition: string[] topics
        fields:
        - name: topics
          type: string[]
        name: DemuxListResponse
        package: topic_tools
    - definition: 'string topic

        ---

        string prev_topic

        '
      name: DemuxSelect
      package: topic_tools
      request:
        definition: string topic
        fields:
        - name: topic
          type: string
        name: DemuxSelectRequest
        package: topic_tools
      response:
        definition: string prev_topic
        fields:
        - name: prev_topic
          type: string
        name: DemuxSelectResponse
        package: topic_tools
    - definition: 'string topic

        ---

        '
      name: MuxAdd
      package: topic_tools
      request:
        definition: string topic
        fields:
        - name: topic
          type: string
        name: MuxAddRequest
        package: topic_tools
    - definition: 'string topic

        ---


        '
      name: MuxDelete
      package: topic_tools
      request:
        definition: string topic
        fields:
        - name: topic
          type: string
        name: MuxDeleteRequest
        package: topic_tools
    - definition: '---

        string[] topics

        '
      name: MuxList
      package: topic_tools
      response:
        definition: string[] topics
        fields:
        - name: topics
          type: string[]
        name: MuxListResponse
        package: topic_tools
    - definition: 'string topic

        ---

        string prev_topic

        '
      name: MuxSelect
      package: topic_tools
      request:
        definition: string topic
        fields:
        - name: topic
          type: string
        name: MuxSelectRequest
        package: topic_tools
      response:
        definition: string prev_topic
        fields:
        - name: prev_topic
          type: string
        name: MuxSelectResponse
        package: topic_tools
  - actions:
    - definition: '###########################################################

        # This action is called for integrated object detection and

        #  grasp planning, such as in base_grasping_perception


        # Set to false to disable grasp planning, returning only the objects found

        bool plan_grasps

        ---

        # Graspable objects found

        GraspableObject[] objects


        # Additional, non-graspable objects which may be support surfaces

        Object[] support_surfaces

        ---

        # Publish objects as they are detected and grasp planned

        GraspableObject object

        '
      feedback:
        definition: '# Publish objects as they are detected and grasp planned

          GraspableObject object'
        fields:
        - name: object
          type: grasping_msgs/GraspableObject
        name: FindGraspableObjectsFeedback
        package: grasping_msgs
      goal:
        definition: '###########################################################

          # This action is called for integrated object detection and

          #  grasp planning, such as in base_grasping_perception


          # Set to false to disable grasp planning, returning only the objects found

          bool plan_grasps'
        fields:
        - name: plan_grasps
          type: bool
        name: FindGraspableObjectsGoal
        package: grasping_msgs
      name: FindGraspableObjects
      package: grasping_msgs
      result:
        definition: '# Graspable objects found

          GraspableObject[] objects


          # Additional, non-graspable objects which may be support surfaces

          Object[] support_surfaces'
        fields:
        - name: objects
          type: grasping_msgs/GraspableObject[]
        - name: support_surfaces
          type: grasping_msgs/Object[]
        name: FindGraspableObjectsResult
        package: grasping_msgs
    - definition: '###########################################################

        # This action is used when planning grasps for a single,

        #  already known object, one object at a time.


        # Object for which grasp planning is requested

        Object object


        # Name of group to plan with (optional)

        string group_name

        ---

        # All grasps

        moveit_msgs/Grasp[] grasps

        ---

        # Grasps found thus far

        moveit_msgs/Grasp[] grasps

        '
      feedback:
        definition: '# Grasps found thus far

          moveit_msgs/Grasp[] grasps'
        fields:
        - name: grasps
          type: moveit_msgs/Grasp[]
        name: GraspPlanningFeedback
        package: grasping_msgs
      goal:
        definition: '###########################################################

          # This action is used when planning grasps for a single,

          #  already known object, one object at a time.


          # Object for which grasp planning is requested

          Object object


          # Name of group to plan with (optional)

          string group_name'
        fields:
        - name: object
          type: grasping_msgs/Object
        - name: group_name
          type: string
        name: GraspPlanningGoal
        package: grasping_msgs
      name: GraspPlanning
      package: grasping_msgs
      result:
        definition: '# All grasps

          moveit_msgs/Grasp[] grasps'
        fields:
        - name: grasps
          type: moveit_msgs/Grasp[]
        name: GraspPlanningResult
        package: grasping_msgs
    messages:
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        FindGraspableObjectsActionGoal action_goal

        FindGraspableObjectsActionResult action_result

        FindGraspableObjectsActionFeedback action_feedback

        '
      fields:
      - name: action_goal
        type: grasping_msgs/FindGraspableObjectsActionGoal
      - name: action_result
        type: grasping_msgs/FindGraspableObjectsActionResult
      - name: action_feedback
        type: grasping_msgs/FindGraspableObjectsActionFeedback
      name: FindGraspableObjectsAction
      package: grasping_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        FindGraspableObjectsFeedback feedback

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: feedback
        type: grasping_msgs/FindGraspableObjectsFeedback
      name: FindGraspableObjectsActionFeedback
      package: grasping_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalID goal_id

        FindGraspableObjectsGoal goal

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: goal_id
        type: actionlib_msgs/GoalID
      - name: goal
        type: grasping_msgs/FindGraspableObjectsGoal
      name: FindGraspableObjectsActionGoal
      package: grasping_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        FindGraspableObjectsResult result

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: result
        type: grasping_msgs/FindGraspableObjectsResult
      name: FindGraspableObjectsActionResult
      package: grasping_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        # Publish objects as they are detected and grasp planned

        GraspableObject object


        '
      fields:
      - name: object
        type: grasping_msgs/GraspableObject
      name: FindGraspableObjectsFeedback
      package: grasping_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        ###########################################################

        # This action is called for integrated object detection and

        #  grasp planning, such as in base_grasping_perception


        # Set to false to disable grasp planning, returning only the objects found

        bool plan_grasps

        '
      fields:
      - name: plan_grasps
        type: bool
      name: FindGraspableObjectsGoal
      package: grasping_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        # Graspable objects found

        GraspableObject[] objects


        # Additional, non-graspable objects which may be support surfaces

        Object[] support_surfaces

        '
      fields:
      - name: objects
        type: grasping_msgs/GraspableObject[]
      - name: support_surfaces
        type: grasping_msgs/Object[]
      name: FindGraspableObjectsResult
      package: grasping_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        GraspPlanningActionGoal action_goal

        GraspPlanningActionResult action_result

        GraspPlanningActionFeedback action_feedback

        '
      fields:
      - name: action_goal
        type: grasping_msgs/GraspPlanningActionGoal
      - name: action_result
        type: grasping_msgs/GraspPlanningActionResult
      - name: action_feedback
        type: grasping_msgs/GraspPlanningActionFeedback
      name: GraspPlanningAction
      package: grasping_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        GraspPlanningFeedback feedback

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: feedback
        type: grasping_msgs/GraspPlanningFeedback
      name: GraspPlanningActionFeedback
      package: grasping_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalID goal_id

        GraspPlanningGoal goal

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: goal_id
        type: actionlib_msgs/GoalID
      - name: goal
        type: grasping_msgs/GraspPlanningGoal
      name: GraspPlanningActionGoal
      package: grasping_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        GraspPlanningResult result

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: result
        type: grasping_msgs/GraspPlanningResult
      name: GraspPlanningActionResult
      package: grasping_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        # Grasps found thus far

        moveit_msgs/Grasp[] grasps


        '
      fields:
      - name: grasps
        type: moveit_msgs/Grasp[]
      name: GraspPlanningFeedback
      package: grasping_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        ###########################################################

        # This action is used when planning grasps for a single,

        #  already known object, one object at a time.


        # Object for which grasp planning is requested

        Object object


        # Name of group to plan with (optional)

        string group_name

        '
      fields:
      - name: object
        type: grasping_msgs/Object
      - name: group_name
        type: string
      name: GraspPlanningGoal
      package: grasping_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        # All grasps

        moveit_msgs/Grasp[] grasps

        '
      fields:
      - name: grasps
        type: moveit_msgs/Grasp[]
      name: GraspPlanningResult
      package: grasping_msgs
    - definition: '###########################################################

        # This message describes an object + grasp data

        Object object

        moveit_msgs/Grasp[] grasps

        '
      fields:
      - name: object
        type: grasping_msgs/Object
      - name: grasps
        type: moveit_msgs/Grasp[]
      name: GraspableObject
      package: grasping_msgs
    - definition: '###########################################################

        # This message describes an object.


        # Many of the geometric items below lack a stamp/frame_id,

        # header stamp/frame_id should be used there

        std_msgs/Header header


        # An object might have a name

        string name


        # An object might have a known (named) support surface

        string support_surface


        # Objects might have properties, such as type/class, or color, etc.

        ObjectProperty[] properties


        ###########################################################

        # Objects have many possible descriptions

        #  The following are the possible description formats


        # Perception modules often represent an object as a cluster of points

        #  Is considered valid if number of points > 0

        sensor_msgs/PointCloud2 point_cluster


        # MoveIt prefers solid primitives or meshes as a description of objects

        shape_msgs/SolidPrimitive[] primitives

        geometry_msgs/Pose[] primitive_poses


        shape_msgs/Mesh[] meshes

        geometry_msgs/Pose[] mesh_poses


        # An object representing a support surface might be described by a plane

        # Is considered valid if coefficients are not all 0s.

        shape_msgs/Plane surface

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: name
        type: string
      - name: support_surface
        type: string
      - name: properties
        type: grasping_msgs/ObjectProperty[]
      - name: point_cluster
        type: sensor_msgs/PointCloud2
      - name: primitives
        type: shape_msgs/SolidPrimitive[]
      - name: primitive_poses
        type: geometry_msgs/Pose[]
      - name: meshes
        type: shape_msgs/Mesh[]
      - name: mesh_poses
        type: geometry_msgs/Pose[]
      - name: surface
        type: shape_msgs/Plane
      name: Object
      package: grasping_msgs
    - definition: '###########################################################

        # Other generic properties of an object

        string name

        string value

        '
      fields:
      - name: name
        type: string
      - name: value
        type: string
      name: ObjectProperty
      package: grasping_msgs
    name: grasping_msgs
    path: /opt/ros/melodic/share/grasping_msgs
    services: []
  - actions: []
    messages: []
    name: rostime
    path: /opt/ros/melodic/share/rostime
    services: []
  - actions: []
    messages: []
    name: rostest
    path: /opt/ros/melodic/share/rostest
    services: []
  - actions: []
    messages: []
    name: robot_controllers_interface
    path: /opt/ros/melodic/share/robot_controllers_interface
    services: []
  - actions: []
    messages: []
    name: roscpp_traits
    path: /opt/ros/melodic/share/roscpp_traits
    services: []
  - actions:
    - definition: "# This action allows one to query current information about\n# controller\
        \ state, as well as change the controller state.\n\n# Action goal:\n# Requested\
        \ changes to controller state. Each state must\n# have at least the controller\
        \ name and new state. If the\n# controller type is non-empty, then it will be\
        \ used to\n# make sure that the controller type matches. \nControllerState[]\
        \ updates\n---\n# Action result:\n# The state of ALL controllers\nControllerState[]\
        \ state\n---\n# Action feedback:\n# Status changes in controllers as they are\
        \ started/stopped\nControllerState[] state_diff\n"
      feedback:
        definition: '# Action feedback:

          # Status changes in controllers as they are started/stopped

          ControllerState[] state_diff'
        fields:
        - name: state_diff
          type: robot_controllers_msgs/ControllerState[]
        name: QueryControllerStatesFeedback
        package: robot_controllers_msgs
      goal:
        definition: "# This action allows one to query current information about\n#\
          \ controller state, as well as change the controller state.\n\n# Action goal:\n\
          # Requested changes to controller state. Each state must\n# have at least\
          \ the controller name and new state. If the\n# controller type is non-empty,\
          \ then it will be used to\n# make sure that the controller type matches. \n\
          ControllerState[] updates"
        fields:
        - name: updates
          type: robot_controllers_msgs/ControllerState[]
        name: QueryControllerStatesGoal
        package: robot_controllers_msgs
      name: QueryControllerStates
      package: robot_controllers_msgs
      result:
        definition: '# Action result:

          # The state of ALL controllers

          ControllerState[] state'
        fields:
        - name: state
          type: robot_controllers_msgs/ControllerState[]
        name: QueryControllerStatesResult
        package: robot_controllers_msgs
    messages:
    - constants:
      - name: STOPPED
        type: uint8
        value: '0'
      - name: RUNNING
        type: uint8
        value: '1'
      - name: ERROR
        type: uint8
        value: '2'
      definition: '# Valid states:


        uint8 STOPPED = 0

        uint8 RUNNING = 1

        uint8 ERROR = 2


        string name

        string type

        uint8 state

        '
      fields:
      - name: name
        type: string
      - name: type
        type: string
      - name: state
        type: uint8
      name: ControllerState
      package: robot_controllers_msgs
    - definition: "# Various parameters for diff driver base velocity and acceleration\
        \ limiter\n# This message allows limits that would imposed by diff_drive_base\n\
        # to be understood by other components without needing access to \n# same set\
        \ of rosparams, or URDF settings\n\nfloat64 max_linear_velocity\nfloat64 max_linear_acceleration\n\
        \nfloat64 max_angular_velocity\nfloat64 max_angular_acceleration\n\n# Wheel\
        \ velocity limit are linear velocity (m/s) not angular velocities (rad/s)\n\
        float64 max_wheel_velocity\n\n# distance between two wheels \n# used for calculating\
        \ wheel velocities from angular velocity\nfloat64 track_width\n\n# If true limiter\
        \ will reduce linear velocity\n# when angular velocity is beyond limit so\n\
        # so path curvature is maintained\nbool angular_velocity_limits_linear_velocity\n\
        \n# If true, linear and angular velocities will \n# scaled if wheel velocities\
        \ beyond limits\n# so path curvature is maintained\n# otherwise wheel velocities\
        \ are limited independently\nbool scale_to_wheel_velocity_limits\n"
      fields:
      - name: max_linear_velocity
        type: float64
      - name: max_linear_acceleration
        type: float64
      - name: max_angular_velocity
        type: float64
      - name: max_angular_acceleration
        type: float64
      - name: max_wheel_velocity
        type: float64
      - name: track_width
        type: float64
      - name: angular_velocity_limits_linear_velocity
        type: bool
      - name: scale_to_wheel_velocity_limits
        type: bool
      name: DiffDriveLimiterParams
      package: robot_controllers_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        QueryControllerStatesActionGoal action_goal

        QueryControllerStatesActionResult action_result

        QueryControllerStatesActionFeedback action_feedback

        '
      fields:
      - name: action_goal
        type: robot_controllers_msgs/QueryControllerStatesActionGoal
      - name: action_result
        type: robot_controllers_msgs/QueryControllerStatesActionResult
      - name: action_feedback
        type: robot_controllers_msgs/QueryControllerStatesActionFeedback
      name: QueryControllerStatesAction
      package: robot_controllers_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        QueryControllerStatesFeedback feedback

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: feedback
        type: robot_controllers_msgs/QueryControllerStatesFeedback
      name: QueryControllerStatesActionFeedback
      package: robot_controllers_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalID goal_id

        QueryControllerStatesGoal goal

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: goal_id
        type: actionlib_msgs/GoalID
      - name: goal
        type: robot_controllers_msgs/QueryControllerStatesGoal
      name: QueryControllerStatesActionGoal
      package: robot_controllers_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        QueryControllerStatesResult result

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: result
        type: robot_controllers_msgs/QueryControllerStatesResult
      name: QueryControllerStatesActionResult
      package: robot_controllers_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        # Action feedback:

        # Status changes in controllers as they are started/stopped

        ControllerState[] state_diff


        '
      fields:
      - name: state_diff
        type: robot_controllers_msgs/ControllerState[]
      name: QueryControllerStatesFeedback
      package: robot_controllers_msgs
    - definition: "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
        # This action allows one to query current information about\n# controller state,\
        \ as well as change the controller state.\n\n# Action goal:\n# Requested changes\
        \ to controller state. Each state must\n# have at least the controller name\
        \ and new state. If the\n# controller type is non-empty, then it will be used\
        \ to\n# make sure that the controller type matches. \nControllerState[] updates\n"
      fields:
      - name: updates
        type: robot_controllers_msgs/ControllerState[]
      name: QueryControllerStatesGoal
      package: robot_controllers_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        # Action result:

        # The state of ALL controllers

        ControllerState[] state

        '
      fields:
      - name: state
        type: robot_controllers_msgs/ControllerState[]
      name: QueryControllerStatesResult
      package: robot_controllers_msgs
    name: robot_controllers_msgs
    path: /opt/ros/melodic/share/robot_controllers_msgs
    services: []
  - actions: []
    messages: []
    name: navfn
    path: /opt/ros/melodic/share/navfn
    services:
    - definition: 'geometry_msgs/PoseStamped start

        geometry_msgs/PoseStamped goal

        ---


        uint8 plan_found

        string error_message


        # if plan_found is true, this is an array of waypoints from start to goal, where
        the first one equals start and the last one equals goal

        geometry_msgs/PoseStamped[] path

        '
      name: MakeNavPlan
      package: navfn
      request:
        definition: 'geometry_msgs/PoseStamped start

          geometry_msgs/PoseStamped goal'
        fields:
        - name: start
          type: geometry_msgs/PoseStamped
        - name: goal
          type: geometry_msgs/PoseStamped
        name: MakeNavPlanRequest
        package: navfn
      response:
        definition: 'uint8 plan_found

          string error_message


          # if plan_found is true, this is an array of waypoints from start to goal,
          where the first one equals start and the last one equals goal

          geometry_msgs/PoseStamped[] path'
        fields:
        - name: plan_found
          type: uint8
        - name: error_message
          type: string
        - name: path
          type: geometry_msgs/PoseStamped[]
        name: MakeNavPlanResponse
        package: navfn
    - definition: 'uint8[] costs

        uint16 height

        uint16 width

        ---'
      name: SetCostmap
      package: navfn
      request:
        definition: 'uint8[] costs

          uint16 height

          uint16 width'
        fields:
        - name: costs
          type: uint8[]
        - name: height
          type: uint16
        - name: width
          type: uint16
        name: SetCostmapRequest
        package: navfn
  - actions: []
    messages: []
    name: rosbash
    path: /opt/ros/melodic/share/rosbash
    services: []
  - actions: []
    messages: []
    name: pcl_conversions
    path: /opt/ros/melodic/share/pcl_conversions
    services: []
  - actions: []
    messages: []
    name: python_orocos_kdl
    path: /opt/ros/melodic/share/python_orocos_kdl
    services: []
  - actions: []
    messages: []
    name: message_filters
    path: /opt/ros/melodic/share/message_filters
    services: []
  - actions: []
    messages:
    - constants:
      - name: DEAD_PUBLISH_PERIOD
        type: float32
        value: '0.05'
      - name: DEFAULT_CONNECT_TIMEOUT
        type: float32
        value: '10.0'
      - name: DEFAULT_HEARTBEAT_TIMEOUT
        type: float32
        value: '4.0'
      - name: DEFAULT_DISCONNECT_TIMEOUT
        type: float32
        value: '2.0'
      - name: DEFAULT_HEARTBEAT_PERIOD
        type: float32
        value: '1.0'
      - name: DISABLE_HEARTBEAT_TIMEOUT_PARAM
        type: string
        value: /bond_disable_heartbeat_timeout
      definition: 'float32 DEAD_PUBLISH_PERIOD = 0.05

        float32 DEFAULT_CONNECT_TIMEOUT = 10.0

        float32 DEFAULT_HEARTBEAT_TIMEOUT = 4.0

        float32 DEFAULT_DISCONNECT_TIMEOUT = 2.0

        float32 DEFAULT_HEARTBEAT_PERIOD = 1.0


        string DISABLE_HEARTBEAT_TIMEOUT_PARAM=/bond_disable_heartbeat_timeout'
      name: Constants
      package: bond
    - definition: 'Header header

        string id  # ID of the bond

        string instance_id  # Unique ID for an individual in a bond

        bool active


        # Including the timeouts for the bond makes it easier to debug mis-matches

        # between the two sides.

        float32 heartbeat_timeout

        float32 heartbeat_period'
      fields:
      - name: header
        type: std_msgs/Header
      - name: id
        type: string
      - name: instance_id
        type: string
      - name: active
        type: bool
      - name: heartbeat_timeout
        type: float32
      - name: heartbeat_period
        type: float32
      name: Status
      package: bond
    name: bond
    path: /opt/ros/melodic/share/bond
    services: []
  - actions: []
    messages:
    - definition: '# This message is used to send diagnostic information about the state
        of the robot

        Header header #for timestamp

        DiagnosticStatus[] status # an array of components being reported on'
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: diagnostic_msgs/DiagnosticStatus[]
      name: DiagnosticArray
      package: diagnostic_msgs
    - constants:
      - name: OK
        type: byte
        value: '0'
      - name: WARN
        type: byte
        value: '1'
      - name: ERROR
        type: byte
        value: '2'
      - name: STALE
        type: byte
        value: '3'
      definition: "# This message holds the status of an individual component of the\
        \ robot.\n# \n\n# Possible levels of operations\nbyte OK=0\nbyte WARN=1\nbyte\
        \ ERROR=2\nbyte STALE=3\n\nbyte level # level of operation enumerated above\
        \ \nstring name # a description of the test/component reporting\nstring message\
        \ # a description of the status\nstring hardware_id # a hardware unique string\n\
        KeyValue[] values # an array of values associated with the status\n\n"
      fields:
      - name: level
        type: byte
      - name: name
        type: string
      - name: message
        type: string
      - name: hardware_id
        type: string
      - name: values
        type: diagnostic_msgs/KeyValue[]
      name: DiagnosticStatus
      package: diagnostic_msgs
    - definition: 'string key # what to label this value when viewing

        string value # a value to track over time

        '
      fields:
      - name: key
        type: string
      - name: value
        type: string
      name: KeyValue
      package: diagnostic_msgs
    name: diagnostic_msgs
    path: /opt/ros/melodic/share/diagnostic_msgs
    services:
    - definition: '# This service is used as part of the process for loading analyzers
        at runtime,

        # and should be used by a loader script or program, not as a standalone service.

        # Information about dynamic addition of analyzers can be found at

        # http://wiki.ros.org/diagnostics/Tutorials/Adding%20Analyzers%20at%20Runtime


        # The load_namespace parameter defines the namespace where parameters for the

        # initialization of analyzers in the diagnostic aggregator have been loaded.
        The

        # value should be a global name (i.e. /my/name/space), not a relative

        # (my/name/space) or private (~my/name/space) name. Analyzers will not be added

        # if a non-global name is used. The call will also fail if the namespace

        # contains parameters that follow a namespace structure that does not conform
        to

        # that expected by the analyzer definitions. See

        # http://wiki.ros.org/diagnostics/Tutorials/Configuring%20Diagnostic%20Aggregators

        # and http://wiki.ros.org/diagnostics/Tutorials/Using%20the%20GenericAnalyzer

        # for examples of the structure of yaml files which are expected to have been

        # loaded into the namespace.

        string load_namespace

        ---


        # True if diagnostic aggregator was updated with new diagnostics, False

        # otherwise. A false return value means that either there is a bond in the

        # aggregator which already used the requested namespace, or the initialization

        # of analyzers failed.

        bool success


        # Message with additional information about the success or failure

        string message

        '
      name: AddDiagnostics
      package: diagnostic_msgs
      request:
        definition: '# This service is used as part of the process for loading analyzers
          at runtime,

          # and should be used by a loader script or program, not as a standalone service.

          # Information about dynamic addition of analyzers can be found at

          # http://wiki.ros.org/diagnostics/Tutorials/Adding%20Analyzers%20at%20Runtime


          # The load_namespace parameter defines the namespace where parameters for
          the

          # initialization of analyzers in the diagnostic aggregator have been loaded.
          The

          # value should be a global name (i.e. /my/name/space), not a relative

          # (my/name/space) or private (~my/name/space) name. Analyzers will not be
          added

          # if a non-global name is used. The call will also fail if the namespace

          # contains parameters that follow a namespace structure that does not conform
          to

          # that expected by the analyzer definitions. See

          # http://wiki.ros.org/diagnostics/Tutorials/Configuring%20Diagnostic%20Aggregators

          # and http://wiki.ros.org/diagnostics/Tutorials/Using%20the%20GenericAnalyzer

          # for examples of the structure of yaml files which are expected to have been

          # loaded into the namespace.

          string load_namespace'
        fields:
        - name: load_namespace
          type: string
        name: AddDiagnosticsRequest
        package: diagnostic_msgs
      response:
        definition: '# True if diagnostic aggregator was updated with new diagnostics,
          False

          # otherwise. A false return value means that either there is a bond in the

          # aggregator which already used the requested namespace, or the initialization

          # of analyzers failed.

          bool success


          # Message with additional information about the success or failure

          string message'
        fields:
        - name: success
          type: bool
        - name: message
          type: string
        name: AddDiagnosticsResponse
        package: diagnostic_msgs
    - definition: '---

        string id

        byte passed

        DiagnosticStatus[] status

        '
      name: SelfTest
      package: diagnostic_msgs
      response:
        definition: 'string id

          byte passed

          DiagnosticStatus[] status'
        fields:
        - name: id
          type: string
        - name: passed
          type: byte
        - name: status
          type: diagnostic_msgs/DiagnosticStatus[]
        name: SelfTestResponse
        package: diagnostic_msgs
  - actions: []
    messages: []
    name: std_srvs
    path: /opt/ros/melodic/share/std_srvs
    services:
    - definition: '---'
      name: Empty
      package: std_srvs
    - definition: 'bool data # e.g. for hardware enabling / disabling

        ---

        bool success   # indicate successful run of triggered service

        string message # informational, e.g. for error messages

        '
      name: SetBool
      package: std_srvs
      request:
        definition: 'bool data # e.g. for hardware enabling / disabling'
        fields:
        - name: data
          type: bool
        name: SetBoolRequest
        package: std_srvs
      response:
        definition: 'bool success   # indicate successful run of triggered service

          string message # informational, e.g. for error messages'
        fields:
        - name: success
          type: bool
        - name: message
          type: string
        name: SetBoolResponse
        package: std_srvs
    - definition: '---

        bool success   # indicate successful run of triggered service

        string message # informational, e.g. for error messages

        '
      name: Trigger
      package: std_srvs
      response:
        definition: 'bool success   # indicate successful run of triggered service

          string message # informational, e.g. for error messages'
        fields:
        - name: success
          type: bool
        - name: message
          type: string
        name: TriggerResponse
        package: std_srvs
  - actions: []
    messages: []
    name: nav_core
    path: /opt/ros/melodic/share/nav_core
    services: []
  - actions: []
    messages:
    - definition: 'Header header

        float32[] values


        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: values
        type: float32[]
      name: ModelCoefficients
      package: pcl_msgs
    - definition: 'Header header

        int32[] indices


        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: indices
        type: int32[]
      name: PointIndices
      package: pcl_msgs
    - definition: '# Separate header for the polygonal surface

        Header header

        # Vertices of the mesh as a point cloud

        sensor_msgs/PointCloud2 cloud

        # List of polygons

        Vertices[] polygons

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: cloud
        type: sensor_msgs/PointCloud2
      - name: polygons
        type: pcl_msgs/Vertices[]
      name: PolygonMesh
      package: pcl_msgs
    - definition: '# List of point indices

        uint32[] vertices

        '
      fields:
      - name: vertices
        type: uint32[]
      name: Vertices
      package: pcl_msgs
    name: pcl_msgs
    path: /opt/ros/melodic/share/pcl_msgs
    services: []
  - actions: []
    messages: []
    name: gazebo_ros
    path: /opt/ros/melodic/share/gazebo_ros
    services: []
  - actions: []
    messages: []
    name: rospack
    path: /opt/ros/melodic/share/rospack
    services: []
  - actions: []
    messages:
    - definition: '# Definition of a mesh


        # list of triangles; the index values refer to positions in vertices[]

        MeshTriangle[] triangles


        # the actual vertices that make up the mesh

        geometry_msgs/Point[] vertices

        '
      fields:
      - name: triangles
        type: shape_msgs/MeshTriangle[]
      - name: vertices
        type: geometry_msgs/Point[]
      name: Mesh
      package: shape_msgs
    - definition: '# Definition of a triangle''s vertices

        uint32[3] vertex_indices

        '
      fields:
      - name: vertex_indices
        type: uint32[3]
      name: MeshTriangle
      package: shape_msgs
    - definition: '# Representation of a plane, using the plane equation ax + by + cz
        + d = 0


        # a := coef[0]

        # b := coef[1]

        # c := coef[2]

        # d := coef[3]


        float64[4] coef

        '
      fields:
      - name: coef
        type: float64[4]
      name: Plane
      package: shape_msgs
    - constants:
      - name: BOX
        type: uint8
        value: '1'
      - name: SPHERE
        type: uint8
        value: '2'
      - name: CYLINDER
        type: uint8
        value: '3'
      - name: CONE
        type: uint8
        value: '4'
      - name: BOX_X
        type: uint8
        value: '0'
      - name: BOX_Y
        type: uint8
        value: '1'
      - name: BOX_Z
        type: uint8
        value: '2'
      - name: SPHERE_RADIUS
        type: uint8
        value: '0'
      - name: CYLINDER_HEIGHT
        type: uint8
        value: '0'
      - name: CYLINDER_RADIUS
        type: uint8
        value: '1'
      - name: CONE_HEIGHT
        type: uint8
        value: '0'
      - name: CONE_RADIUS
        type: uint8
        value: '1'
      definition: "# Define box, sphere, cylinder, cone \n# All shapes are defined to\
        \ have their bounding boxes centered around 0,0,0.\n\nuint8 BOX=1\nuint8 SPHERE=2\n\
        uint8 CYLINDER=3\nuint8 CONE=4\n\n# The type of the shape\nuint8 type\n\n\n\
        # The dimensions of the shape\nfloat64[] dimensions\n\n# The meaning of the\
        \ shape dimensions: each constant defines the index in the 'dimensions' array\n\
        \n# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding\n\
        # sides of the box.\nuint8 BOX_X=0\nuint8 BOX_Y=1\nuint8 BOX_Z=2\n\n\n# For\
        \ the SPHERE type, only one component is used, and it gives the radius of\n\
        # the sphere.\nuint8 SPHERE_RADIUS=0\n\n\n# For the CYLINDER and CONE types,\
        \ the center line is oriented along\n# the Z axis.  Therefore the CYLINDER_HEIGHT\
        \ (CONE_HEIGHT) component\n# of dimensions gives the height of the cylinder\
        \ (cone).  The\n# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives\
        \ the\n# radius of the base of the cylinder (cone).  Cone and cylinder\n# primitives\
        \ are defined to be circular. The tip of the cone is\n# pointing up, along +Z\
        \ axis.\n\nuint8 CYLINDER_HEIGHT=0\nuint8 CYLINDER_RADIUS=1\n\nuint8 CONE_HEIGHT=0\n\
        uint8 CONE_RADIUS=1\n"
      fields:
      - name: type
        type: uint8
      - name: dimensions
        type: float64[]
      name: SolidPrimitive
      package: shape_msgs
    name: shape_msgs
    path: /opt/ros/melodic/share/shape_msgs
    services: []
  - actions: []
    messages: []
    name: eigen_conversions
    path: /opt/ros/melodic/share/eigen_conversions
    services: []
  - actions: []
    messages: []
    name: warehouse_ros
    path: /opt/ros/melodic/share/warehouse_ros
    services: []
  - actions: []
    messages: []
    name: urdf
    path: /opt/ros/melodic/share/urdf
    services: []
  - actions: []
    messages: []
    name: cpp_common
    path: /opt/ros/melodic/share/cpp_common
    services: []
  - actions: []
    messages:
    - definition: 'geometry_msgs/TransformStamped[] transforms

        '
      fields:
      - name: transforms
        type: geometry_msgs/TransformStamped[]
      name: tfMessage
      package: tf
    name: tf
    path: /opt/ros/melodic/share/tf
    services:
    - definition: '---

        string dot_graph

        '
      name: FrameGraph
      package: tf
      response:
        definition: string dot_graph
        fields:
        - name: dot_graph
          type: string
        name: FrameGraphResponse
        package: tf
  - actions: []
    messages: []
    name: amcl
    path: /opt/ros/melodic/share/amcl
    services: []
  - actions: []
    messages: []
    name: tf2
    path: /opt/ros/melodic/share/tf2
    services: []
  - actions: []
    messages: []
    name: tf2_ros
    path: /opt/ros/melodic/share/tf2_ros
    services: []
  - actions: []
    messages: []
    name: moveit_planners_ompl
    path: /opt/ros/melodic/share/moveit_planners_ompl
    services: []
  - actions: []
    messages: []
    name: clear_costmap_recovery
    path: /opt/ros/melodic/share/clear_costmap_recovery
    services: []
  - actions: []
    messages: []
    name: move_base
    path: /opt/ros/melodic/share/move_base
    services: []
  - actions: []
    messages: []
    name: media_export
    path: /opt/ros/melodic/share/media_export
    services: []
  - actions: []
    messages: []
    name: rosmaster
    path: /opt/ros/melodic/share/rosmaster
    services: []
  - actions: []
    messages: []
    name: open_karto
    path: /opt/ros/melodic/share/open_karto
    services: []
  - actions: []
    messages: []
    name: moveit_commander
    path: /opt/ros/melodic/share/moveit_commander
    services: []
  - actions: []
    messages: []
    name: gazebo_dev
    path: /opt/ros/melodic/share/gazebo_dev
    services: []
  - actions: []
    messages: []
    name: ros
    path: /opt/ros/melodic/share/ros
    services: []
  - actions: []
    messages: []
    name: moveit_ros_visualization
    path: /opt/ros/melodic/share/moveit_ros_visualization
    services: []
  - actions: []
    messages: []
    name: angles
    path: /opt/ros/melodic/share/angles
    services: []
  - actions: []
    messages: []
    name: rosclean
    path: /opt/ros/melodic/share/rosclean
    services: []
  - actions: []
    messages: []
    name: bond_core
    path: /opt/ros/melodic/share/bond_core
    services: []
  - actions: []
    messages: []
    name: rosboost_cfg
    path: /opt/ros/melodic/share/rosboost_cfg
    services: []
  - actions:
    - definition: '# Optional ROI to use for the object detection

        bool use_roi

        float32[] filter_limits

        ---

        # Send the found objects, see the msg files for docs

        object_recognition_msgs/RecognizedObjectArray recognized_objects

        ---

        #no feedback

        '
      feedback:
        definition: '#no feedback'
        name: ObjectRecognitionFeedback
        package: object_recognition_msgs
      goal:
        definition: '# Optional ROI to use for the object detection

          bool use_roi

          float32[] filter_limits'
        fields:
        - name: use_roi
          type: bool
        - name: filter_limits
          type: float32[]
        name: ObjectRecognitionGoal
        package: object_recognition_msgs
      name: ObjectRecognition
      package: object_recognition_msgs
      result:
        definition: '# Send the found objects, see the msg files for docs

          object_recognition_msgs/RecognizedObjectArray recognized_objects'
        fields:
        - name: recognized_objects
          type: object_recognition_msgs/RecognizedObjectArray
        name: ObjectRecognitionResult
        package: object_recognition_msgs
    messages:
    - definition: '############################################## VISUALIZATION INFO
        ######################################################

        ################### THIS INFO SHOULD BE OBTAINED INDEPENDENTLY FROM THE CORE,
        LIKE IN AN RVIZ PLUGIN ###################


        # The human readable name of the object

        string name


        # The full mesh of the object: this can be useful for display purposes, augmented
        reality ... but it can be big

        # Make sure the type is MESH

        shape_msgs/Mesh ground_truth_mesh


        # Sometimes, you only have a cloud in the DB

        # Make sure the type is POINTS

        sensor_msgs/PointCloud2 ground_truth_point_cloud

        '
      fields:
      - name: name
        type: string
      - name: ground_truth_mesh
        type: shape_msgs/Mesh
      - name: ground_truth_point_cloud
        type: sensor_msgs/PointCloud2
      name: ObjectInformation
      package: object_recognition_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        ObjectRecognitionActionGoal action_goal

        ObjectRecognitionActionResult action_result

        ObjectRecognitionActionFeedback action_feedback

        '
      fields:
      - name: action_goal
        type: object_recognition_msgs/ObjectRecognitionActionGoal
      - name: action_result
        type: object_recognition_msgs/ObjectRecognitionActionResult
      - name: action_feedback
        type: object_recognition_msgs/ObjectRecognitionActionFeedback
      name: ObjectRecognitionAction
      package: object_recognition_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        ObjectRecognitionFeedback feedback

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: feedback
        type: object_recognition_msgs/ObjectRecognitionFeedback
      name: ObjectRecognitionActionFeedback
      package: object_recognition_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalID goal_id

        ObjectRecognitionGoal goal

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: goal_id
        type: actionlib_msgs/GoalID
      - name: goal
        type: object_recognition_msgs/ObjectRecognitionGoal
      name: ObjectRecognitionActionGoal
      package: object_recognition_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        ObjectRecognitionResult result

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: result
        type: object_recognition_msgs/ObjectRecognitionResult
      name: ObjectRecognitionActionResult
      package: object_recognition_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        #no feedback


        '
      name: ObjectRecognitionFeedback
      package: object_recognition_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        # Optional ROI to use for the object detection

        bool use_roi

        float32[] filter_limits

        '
      fields:
      - name: use_roi
        type: bool
      - name: filter_limits
        type: float32[]
      name: ObjectRecognitionGoal
      package: object_recognition_msgs
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        # Send the found objects, see the msg files for docs

        object_recognition_msgs/RecognizedObjectArray recognized_objects

        '
      fields:
      - name: recognized_objects
        type: object_recognition_msgs/RecognizedObjectArray
      name: ObjectRecognitionResult
      package: object_recognition_msgs
    - definition: '################################################## OBJECT ID #########################################################


        # Contains information about the type of a found object. Those two sets of parameters
        together uniquely define an

        # object


        # The key of the found object: the unique identifier in the given db

        string key


        # The db parameters stored as a JSON/compressed YAML string. An object id does
        not make sense without the corresponding

        # database. E.g., in object_recognition, it can look like: "{''type'':''CouchDB'',
        ''root'':''http://localhost''}"

        # There is no conventional format for those parameters and it''s nice to keep
        that flexibility.

        # The object_recognition_core as a generic DB type that can read those fields

        # Current examples:

        # For CouchDB:

        #   type: ''CouchDB''

        #   root: ''http://localhost:5984''

        #   collection: ''object_recognition''

        # For SQL household database:

        #   type: ''SqlHousehold''

        #   host: ''wgs36''

        #   port: 5432

        #   user: ''willow''

        #   password: ''willow''

        #   name: ''household_objects''

        #   module: ''tabletop''

        string db

        '
      fields:
      - name: key
        type: string
      - name: db
        type: string
      name: ObjectType
      package: object_recognition_msgs
    - definition: '##################################################### HEADER ###########################################################


        # The header frame corresponds to the pose frame, NOT the point_cloud frame.

        Header header


        ################################################## OBJECT INFO #########################################################


        # Contains information about the type and the position of a found object

        # Some of those fields might not be filled because the used techniques do not
        fill them or because the user does not

        # request them


        # The type of the found object

        object_recognition_msgs/ObjectType type


        #confidence: how sure you are it is that object and not another one.

        # It is between 0 and 1 and the closer to one it is the better

        float32 confidence


        ################################################ OBJECT CLUSTERS #######################################################


        # Sometimes you can extract the 3d points that belong to the object, in the
        frames of the original sensors

        # (it is an array as you might have several sensors)

        sensor_msgs/PointCloud2[] point_clouds


        # Sometimes, you can only provide a bounding box/shape, even in 3d

        # This is in the pose frame

        shape_msgs/Mesh bounding_mesh


        # Sometimes, you only have 2d input so you can''t really give a pose, you just
        get a contour, or a box

        # The last point will be linked to the first one automatically

        geometry_msgs/Point[] bounding_contours


        #################################################### POSE INFO #########################################################


        # This is the result that everybody expects : the pose in some frame given with
        the input. The units are radian/meters

        # as usual

        geometry_msgs/PoseWithCovarianceStamped pose

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: type
        type: object_recognition_msgs/ObjectType
      - name: confidence
        type: float32
      - name: point_clouds
        type: sensor_msgs/PointCloud2[]
      - name: bounding_mesh
        type: shape_msgs/Mesh
      - name: bounding_contours
        type: geometry_msgs/Point[]
      - name: pose
        type: geometry_msgs/PoseWithCovarianceStamped
      name: RecognizedObject
      package: object_recognition_msgs
    - definition: '##################################################### HEADER ###########################################################

        Header header


        # This message type describes a potential scene configuration: a set of objects
        that can explain the scene

        object_recognition_msgs/RecognizedObject[] objects


        ##################################################### SEARCH ###########################################################


        # The co-occurrence matrix between the recognized objects

        float32[] cooccurrence

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: objects
        type: object_recognition_msgs/RecognizedObject[]
      - name: cooccurrence
        type: float32[]
      name: RecognizedObjectArray
      package: object_recognition_msgs
    - definition: "# Informs that a planar table has been detected at a given location\n\
        \nHeader header\n\n# The pose gives you the transform that take you to the coordinate\
        \ system\n# of the table, with the origin somewhere in the table plane and the\
        \ \n# z axis normal to the plane\ngeometry_msgs/Pose pose\n\n# There is no guarantee\
        \ that the table does NOT extend further than the\n# convex hull; this is just\
        \ as far as we've observed it.\n# The origin of the table coordinate system\
        \ is inside the convex hull\n\n# Set of points forming the convex hull of the\
        \ table\ngeometry_msgs/Point[] convex_hull\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: pose
        type: geometry_msgs/Pose
      - name: convex_hull
        type: geometry_msgs/Point[]
      name: Table
      package: object_recognition_msgs
    - definition: 'Header header


        # Just an array of tables

        object_recognition_msgs/Table[] tables

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: tables
        type: object_recognition_msgs/Table[]
      name: TableArray
      package: object_recognition_msgs
    name: object_recognition_msgs
    path: /opt/ros/melodic/share/object_recognition_msgs
    services:
    - definition: "# Retrieve extra data from the DB for a given object\n\n# The type\
        \ of the object to retrieve info from\nobject_recognition_msgs/ObjectType type\n\
        \n---\n\n# Extra object info \nobject_recognition_msgs/ObjectInformation information\n"
      name: GetObjectInformation
      package: object_recognition_msgs
      request:
        definition: '# Retrieve extra data from the DB for a given object


          # The type of the object to retrieve info from

          object_recognition_msgs/ObjectType type'
        fields:
        - name: type
          type: object_recognition_msgs/ObjectType
        name: GetObjectInformationRequest
        package: object_recognition_msgs
      response:
        definition: "# Extra object info \nobject_recognition_msgs/ObjectInformation\
          \ information"
        fields:
        - name: information
          type: object_recognition_msgs/ObjectInformation
        name: GetObjectInformationResponse
        package: object_recognition_msgs
  - actions: []
    messages: []
    name: interactive_markers
    path: /opt/ros/melodic/share/interactive_markers
    services: []
  - actions: []
    messages: []
    name: kdl_conversions
    path: /opt/ros/melodic/share/kdl_conversions
    services: []
  - actions: []
    messages: []
    name: moveit_ros_warehouse
    path: /opt/ros/melodic/share/moveit_ros_warehouse
    services: []
  - actions: []
    messages: []
    name: roslisp
    path: /opt/ros/melodic/share/roslisp
    services: []
  - actions: []
    messages: []
    name: random_numbers
    path: /opt/ros/melodic/share/random_numbers
    services: []
  - actions: []
    messages: []
    name: rosgraph
    path: /opt/ros/melodic/share/rosgraph
    services: []
  - actions: []
    messages: []
    name: geometric_shapes
    path: /opt/ros/melodic/share/geometric_shapes
    services: []
  - actions: []
    messages: []
    name: moveit_ros_planning
    path: /opt/ros/melodic/share/moveit_ros_planning
    services: []
  - actions: []
    messages: []
    name: image_proc
    path: /opt/ros/melodic/share/image_proc
    services: []
  - actions: []
    messages: []
    name: resource_retriever
    path: /opt/ros/melodic/share/resource_retriever
    services: []
  - actions: []
    messages: []
    name: eigenpy
    path: /opt/ros/melodic/share/eigenpy
    services: []
  - actions: []
    messages: []
    name: ros_core
    path: /opt/ros/melodic/share/ros_core
    services: []
  - actions: []
    messages: []
    name: rosnode
    path: /opt/ros/melodic/share/rosnode
    services: []
  - actions: []
    messages: []
    name: tf_conversions
    path: /opt/ros/melodic/share/tf_conversions
    services: []
  - actions: []
    messages:
    - definition: '# This expresses acceleration in free space broken into its linear
        and angular parts.

        Vector3  linear

        Vector3  angular

        '
      fields:
      - name: linear
        type: geometry_msgs/Vector3
      - name: angular
        type: geometry_msgs/Vector3
      name: Accel
      package: geometry_msgs
    - definition: '# An accel with reference coordinate frame and timestamp

        Header header

        Accel accel

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: accel
        type: geometry_msgs/Accel
      name: AccelStamped
      package: geometry_msgs
    - definition: '# This expresses acceleration in free space with uncertainty.


        Accel accel


        # Row-major representation of the 6x6 covariance matrix

        # The orientation parameters use a fixed-axis representation.

        # In order, the parameters are:

        # (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)

        float64[36] covariance

        '
      fields:
      - name: accel
        type: geometry_msgs/Accel
      - name: covariance
        type: float64[36]
      name: AccelWithCovariance
      package: geometry_msgs
    - definition: '# This represents an estimated accel with reference coordinate frame
        and timestamp.

        Header header

        AccelWithCovariance accel

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: accel
        type: geometry_msgs/AccelWithCovariance
      name: AccelWithCovarianceStamped
      package: geometry_msgs
    - definition: '# Mass [kg]

        float64 m


        # Center of mass [m]

        geometry_msgs/Vector3 com


        # Inertia Tensor [kg-m^2]

        #     | ixx ixy ixz |

        # I = | ixy iyy iyz |

        #     | ixz iyz izz |

        float64 ixx

        float64 ixy

        float64 ixz

        float64 iyy

        float64 iyz

        float64 izz

        '
      fields:
      - name: m
        type: float64
      - name: com
        type: geometry_msgs/Vector3
      - name: ixx
        type: float64
      - name: ixy
        type: float64
      - name: ixz
        type: float64
      - name: iyy
        type: float64
      - name: iyz
        type: float64
      - name: izz
        type: float64
      name: Inertia
      package: geometry_msgs
    - definition: 'Header header

        Inertia inertia

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: inertia
        type: geometry_msgs/Inertia
      name: InertiaStamped
      package: geometry_msgs
    - definition: '# This contains the position of a point in free space

        float64 x

        float64 y

        float64 z

        '
      fields:
      - name: x
        type: float64
      - name: y
        type: float64
      - name: z
        type: float64
      name: Point
      package: geometry_msgs
    - definition: "# This contains the position of a point in free space(with 32 bits\
        \ of precision).\n# It is recommeded to use Point wherever possible instead\
        \ of Point32.  \n# \n# This recommendation is to promote interoperability. \
        \ \n#\n# This message is designed to take up less space when sending\n# lots\
        \ of points at once, as in the case of a PointCloud.  \n\nfloat32 x\nfloat32\
        \ y\nfloat32 z"
      fields:
      - name: x
        type: float32
      - name: y
        type: float32
      - name: z
        type: float32
      name: Point32
      package: geometry_msgs
    - definition: '# This represents a Point with reference coordinate frame and timestamp

        Header header

        Point point

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: point
        type: geometry_msgs/Point
      name: PointStamped
      package: geometry_msgs
    - definition: '#A specification of a polygon where the first and last points are
        assumed to be connected

        Point32[] points

        '
      fields:
      - name: points
        type: geometry_msgs/Point32[]
      name: Polygon
      package: geometry_msgs
    - definition: '# This represents a Polygon with reference coordinate frame and timestamp

        Header header

        Polygon polygon

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: polygon
        type: geometry_msgs/Polygon
      name: PolygonStamped
      package: geometry_msgs
    - definition: "# A representation of pose in free space, composed of position and\
        \ orientation. \nPoint position\nQuaternion orientation\n"
      fields:
      - name: position
        type: geometry_msgs/Point
      - name: orientation
        type: geometry_msgs/Quaternion
      name: Pose
      package: geometry_msgs
    - definition: '# Deprecated

        # Please use the full 3D pose.


        # In general our recommendation is to use a full 3D representation of everything
        and for 2D specific applications make the appropriate projections into the plane
        for their calculations but optimally will preserve the 3D information during
        processing.


        # If we have parallel copies of 2D datatypes every UI and other pipeline will
        end up needing to have dual interfaces to plot everything. And you will end
        up with not being able to use 3D tools for 2D use cases even if they''re completely
        valid, as you''d have to reimplement it with different inputs and outputs. It''s
        not particularly hard to plot the 2D pose or compute the yaw error for the Pose
        message and there are already tools and libraries that can do this for you.



        # This expresses a position and orientation on a 2D manifold.


        float64 x

        float64 y

        float64 theta

        '
      fields:
      - name: x
        type: float64
      - name: y
        type: float64
      - name: theta
        type: float64
      name: Pose2D
      package: geometry_msgs
    - definition: '# An array of poses with a header for global reference.


        Header header


        Pose[] poses

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: poses
        type: geometry_msgs/Pose[]
      name: PoseArray
      package: geometry_msgs
    - definition: '# A Pose with reference coordinate frame and timestamp

        Header header

        Pose pose

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: pose
        type: geometry_msgs/Pose
      name: PoseStamped
      package: geometry_msgs
    - definition: '# This represents a pose in free space with uncertainty.


        Pose pose


        # Row-major representation of the 6x6 covariance matrix

        # The orientation parameters use a fixed-axis representation.

        # In order, the parameters are:

        # (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)

        float64[36] covariance

        '
      fields:
      - name: pose
        type: geometry_msgs/Pose
      - name: covariance
        type: float64[36]
      name: PoseWithCovariance
      package: geometry_msgs
    - definition: '# This expresses an estimated pose with a reference coordinate frame
        and timestamp


        Header header

        PoseWithCovariance pose

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: pose
        type: geometry_msgs/PoseWithCovariance
      name: PoseWithCovarianceStamped
      package: geometry_msgs
    - definition: '# This represents an orientation in free space in quaternion form.


        float64 x

        float64 y

        float64 z

        float64 w

        '
      fields:
      - name: x
        type: float64
      - name: y
        type: float64
      - name: z
        type: float64
      - name: w
        type: float64
      name: Quaternion
      package: geometry_msgs
    - definition: '# This represents an orientation with reference coordinate frame
        and timestamp.


        Header header

        Quaternion quaternion

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: quaternion
        type: geometry_msgs/Quaternion
      name: QuaternionStamped
      package: geometry_msgs
    - definition: '# This represents the transform between two coordinate frames in
        free space.


        Vector3 translation

        Quaternion rotation

        '
      fields:
      - name: translation
        type: geometry_msgs/Vector3
      - name: rotation
        type: geometry_msgs/Quaternion
      name: Transform
      package: geometry_msgs
    - definition: "# This expresses a transform from coordinate frame header.frame_id\n\
        # to the coordinate frame child_frame_id\n#\n# This message is mostly used by\
        \ the \n# <a href=\"http://wiki.ros.org/tf\">tf</a> package. \n# See its documentation\
        \ for more information.\n\nHeader header\nstring child_frame_id # the frame\
        \ id of the child frame\nTransform transform\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: child_frame_id
        type: string
      - name: transform
        type: geometry_msgs/Transform
      name: TransformStamped
      package: geometry_msgs
    - definition: '# This expresses velocity in free space broken into its linear and
        angular parts.

        Vector3  linear

        Vector3  angular

        '
      fields:
      - name: linear
        type: geometry_msgs/Vector3
      - name: angular
        type: geometry_msgs/Vector3
      name: Twist
      package: geometry_msgs
    - definition: '# A twist with reference coordinate frame and timestamp

        Header header

        Twist twist

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: twist
        type: geometry_msgs/Twist
      name: TwistStamped
      package: geometry_msgs
    - definition: '# This expresses velocity in free space with uncertainty.


        Twist twist


        # Row-major representation of the 6x6 covariance matrix

        # The orientation parameters use a fixed-axis representation.

        # In order, the parameters are:

        # (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)

        float64[36] covariance

        '
      fields:
      - name: twist
        type: geometry_msgs/Twist
      - name: covariance
        type: float64[36]
      name: TwistWithCovariance
      package: geometry_msgs
    - definition: '# This represents an estimated twist with reference coordinate frame
        and timestamp.

        Header header

        TwistWithCovariance twist

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: twist
        type: geometry_msgs/TwistWithCovariance
      name: TwistWithCovarianceStamped
      package: geometry_msgs
    - definition: "# This represents a vector in free space. \n# It is only meant to\
        \ represent a direction. Therefore, it does not\n# make sense to apply a translation\
        \ to it (e.g., when applying a \n# generic rigid transformation to a Vector3,\
        \ tf2 will only apply the\n# rotation). If you want your data to be translatable\
        \ too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64\
        \ y\nfloat64 z"
      fields:
      - name: x
        type: float64
      - name: y
        type: float64
      - name: z
        type: float64
      name: Vector3
      package: geometry_msgs
    - definition: '# This represents a Vector3 with reference coordinate frame and timestamp

        Header header

        Vector3 vector

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: vector
        type: geometry_msgs/Vector3
      name: Vector3Stamped
      package: geometry_msgs
    - definition: '# This represents force in free space, separated into

        # its linear and angular parts.

        Vector3  force

        Vector3  torque

        '
      fields:
      - name: force
        type: geometry_msgs/Vector3
      - name: torque
        type: geometry_msgs/Vector3
      name: Wrench
      package: geometry_msgs
    - definition: '# A wrench with reference coordinate frame and timestamp

        Header header

        Wrench wrench

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: wrench
        type: geometry_msgs/Wrench
      name: WrenchStamped
      package: geometry_msgs
    name: geometry_msgs
    path: /opt/ros/melodic/share/geometry_msgs
    services: []
  - actions: []
    messages: []
    name: ompl
    path: /opt/ros/melodic/share/ompl
    services: []
  - actions: []
    messages: []
    name: smclib
    path: /opt/ros/melodic/share/smclib
    services: []
  - actions: []
    messages: []
    name: camera_calibration_parsers
    path: /opt/ros/melodic/share/camera_calibration_parsers
    services: []
  - actions: []
    messages: []
    name: control_toolbox
    path: /opt/ros/melodic/share/control_toolbox
    services:
    - definition: 'float64 p

        float64 i

        float64 d

        float64 i_clamp

        bool antiwindup

        ---

        '
      name: SetPidGains
      package: control_toolbox
      request:
        definition: 'float64 p

          float64 i

          float64 d

          float64 i_clamp

          bool antiwindup'
        fields:
        - name: p
          type: float64
        - name: i
          type: float64
        - name: d
          type: float64
        - name: i_clamp
          type: float64
        - name: antiwindup
          type: bool
        name: SetPidGainsRequest
        package: control_toolbox
  - actions: []
    messages: []
    name: rosservice
    path: /opt/ros/melodic/share/rosservice
    services: []
  - actions: []
    messages: []
    name: roscpp_serialization
    path: /opt/ros/melodic/share/roscpp_serialization
    services: []
  - actions: []
    messages: []
    name: nodelet_core
    path: /opt/ros/melodic/share/nodelet_core
    services: []
  - actions: []
    messages: []
    name: tf2_geometry_msgs
    path: /opt/ros/melodic/share/tf2_geometry_msgs
    services: []
  - actions: []
    messages: []
    name: tf2_eigen
    path: /opt/ros/melodic/share/tf2_eigen
    services: []
  - actions: []
    messages: []
    name: robot_controllers
    path: /opt/ros/melodic/share/robot_controllers
    services: []
  - actions: []
    messages:
    - definition: '# The stamp should store the time at which this goal was requested.

        # It is used by an action server when it tries to preempt all

        # goals that were requested before a certain time

        time stamp


        # The id provides a way to associate feedback and

        # result message with specific goal requests. The id

        # specified must be unique.

        string id


        '
      fields:
      - name: stamp
        type: time
      - name: id
        type: string
      name: GoalID
      package: actionlib_msgs
    - constants:
      - name: PENDING
        type: uint8
        value: '0'
      - name: ACTIVE
        type: uint8
        value: '1'
      - name: PREEMPTED
        type: uint8
        value: '2'
      - name: SUCCEEDED
        type: uint8
        value: '3'
      - name: ABORTED
        type: uint8
        value: '4'
      - name: REJECTED
        type: uint8
        value: '5'
      - name: PREEMPTING
        type: uint8
        value: '6'
      - name: RECALLING
        type: uint8
        value: '7'
      - name: RECALLED
        type: uint8
        value: '8'
      - name: LOST
        type: uint8
        value: '9'
      definition: "GoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal\
        \ has yet to be processed by the action server\nuint8 ACTIVE          = 1  \
        \ # The goal is currently being processed by the action server\nuint8 PREEMPTED\
        \       = 2   # The goal received a cancel request after it started executing\n\
        \                            #   and has since completed its execution (Terminal\
        \ State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by\
        \ the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal\
        \ was aborted during execution by the action server due\n                  \
        \          #    to some failure (Terminal State)\nuint8 REJECTED        = 5\
        \   # The goal was rejected by the action server without being processed,\n\
        \                            #    because the goal was unattainable or invalid\
        \ (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel\
        \ request after it started executing\n                            #    and has\
        \ not yet completed execution\nuint8 RECALLING       = 7   # The goal received\
        \ a cancel request before it started executing,\n                          \
        \  #    but the action server has not yet confirmed that the goal is canceled\n\
        uint8 RECALLED        = 8   # The goal received a cancel request before it started\
        \ executing\n                            #    and was successfully cancelled\
        \ (Terminal State)\nuint8 LOST            = 9   # An action client can determine\
        \ that a goal is LOST. This should not be\n                            #   \
        \ sent over the wire by an action server\n\n#Allow for the user to associate\
        \ a string with GoalStatus for debugging\nstring text\n\n"
      fields:
      - name: goal_id
        type: actionlib_msgs/GoalID
      - name: status
        type: uint8
      - name: text
        type: string
      name: GoalStatus
      package: actionlib_msgs
    - definition: '# Stores the statuses for goals that are currently being tracked

        # by an action server

        Header header

        GoalStatus[] status_list


        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status_list
        type: actionlib_msgs/GoalStatus[]
      name: GoalStatusArray
      package: actionlib_msgs
    name: actionlib_msgs
    path: /opt/ros/melodic/share/actionlib_msgs
    services: []
  - actions: []
    messages: []
    name: moveit_ros_manipulation
    path: /opt/ros/melodic/share/moveit_ros_manipulation
    services: []
  - actions: []
    messages: []
    name: moveit_core
    path: /opt/ros/melodic/share/moveit_core
    services: []
  - actions: []
    messages:
    - definition: "# roslib/Clock is used for publishing simulated time in ROS. \n#\
        \ This message simply communicates the current time.\n# For more information,\
        \ see http://www.ros.org/wiki/Clock\ntime clock\n"
      fields:
      - name: clock
        type: time
      name: Clock
      package: rosgraph_msgs
    - constants:
      - name: DEBUG
        type: byte
        value: '1'
      - name: INFO
        type: byte
        value: '2'
      - name: WARN
        type: byte
        value: '4'
      - name: ERROR
        type: byte
        value: '8'
      - name: FATAL
        type: byte
        value: '16'
      definition: "##\n## Severity level constants\n##\nbyte DEBUG=1 #debug level\n\
        byte INFO=2  #general level\nbyte WARN=4  #warning level\nbyte ERROR=8 #error\
        \ level\nbyte FATAL=16 #fatal/critical level\n##\n## Fields\n##\nHeader header\n\
        byte level\nstring name # name of the node\nstring msg # message \nstring file\
        \ # file the message came from\nstring function # function the message came\
        \ from\nuint32 line # line the message came from\nstring[] topics # topic names\
        \ that the node publishes\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: level
        type: byte
      - name: name
        type: string
      - name: msg
        type: string
      - name: file
        type: string
      - name: function
        type: string
      - name: line
        type: uint32
      - name: topics
        type: string[]
      name: Log
      package: rosgraph_msgs
    - definition: '# name of the topic

        string topic


        # node id of the publisher

        string node_pub


        # node id of the subscriber

        string node_sub


        # the statistics apply to this time window

        time window_start

        time window_stop


        # number of messages delivered during the window

        int32 delivered_msgs

        # numbers of messages dropped during the window

        int32 dropped_msgs


        # traffic during the window, in bytes

        int32 traffic


        # mean/stddev/max period between two messages

        duration period_mean

        duration period_stddev

        duration period_max


        # mean/stddev/max age of the message based on the

        # timestamp in the message header. In case the

        # message does not have a header, it will be 0.

        duration stamp_age_mean

        duration stamp_age_stddev

        duration stamp_age_max

        '
      fields:
      - name: topic
        type: string
      - name: node_pub
        type: string
      - name: node_sub
        type: string
      - name: window_start
        type: time
      - name: window_stop
        type: time
      - name: delivered_msgs
        type: int32
      - name: dropped_msgs
        type: int32
      - name: traffic
        type: int32
      - name: period_mean
        type: duration
      - name: period_stddev
        type: duration
      - name: period_max
        type: duration
      - name: stamp_age_mean
        type: duration
      - name: stamp_age_stddev
        type: duration
      - name: stamp_age_max
        type: duration
      name: TopicStatistics
      package: rosgraph_msgs
    name: rosgraph_msgs
    path: /opt/ros/melodic/share/rosgraph_msgs
    services: []
  - actions:
    - definition: 'int32 goal

        ---

        int32 result

        ---

        int32 feedback

        '
      feedback:
        definition: int32 feedback
        fields:
        - name: feedback
          type: int32
        name: TestFeedback
        package: actionlib
      goal:
        definition: int32 goal
        fields:
        - name: goal
          type: int32
        name: TestGoal
        package: actionlib
      name: Test
      package: actionlib
      result:
        definition: int32 result
        fields:
        - name: result
          type: int32
        name: TestResult
        package: actionlib
    - definition: 'int32 TERMINATE_SUCCESS = 0

        int32 TERMINATE_ABORTED = 1

        int32 TERMINATE_REJECTED = 2

        int32 TERMINATE_LOSE = 3

        int32 TERMINATE_DROP = 4

        int32 TERMINATE_EXCEPTION = 5

        int32 terminate_status

        bool ignore_cancel  # If true, ignores requests to cancel

        string result_text

        int32 the_result    # Desired value for the_result in the Result

        bool is_simple_client

        duration delay_accept  # Delays accepting the goal by this amount of time

        duration delay_terminate  # Delays terminating for this amount of time

        duration pause_status  # Pauses the status messages for this amount of time

        ---

        int32 the_result

        bool is_simple_server

        ---

        '
      feedback:
        definition: ''
        name: TestRequestFeedback
        package: actionlib
      goal:
        constants:
        - name: TERMINATE_SUCCESS
          type: int32
          value: '0'
        - name: TERMINATE_ABORTED
          type: int32
          value: '1'
        - name: TERMINATE_REJECTED
          type: int32
          value: '2'
        - name: TERMINATE_LOSE
          type: int32
          value: '3'
        - name: TERMINATE_DROP
          type: int32
          value: '4'
        - name: TERMINATE_EXCEPTION
          type: int32
          value: '5'
        definition: 'int32 TERMINATE_SUCCESS = 0

          int32 TERMINATE_ABORTED = 1

          int32 TERMINATE_REJECTED = 2

          int32 TERMINATE_LOSE = 3

          int32 TERMINATE_DROP = 4

          int32 TERMINATE_EXCEPTION = 5

          int32 terminate_status

          bool ignore_cancel  # If true, ignores requests to cancel

          string result_text

          int32 the_result    # Desired value for the_result in the Result

          bool is_simple_client

          duration delay_accept  # Delays accepting the goal by this amount of time

          duration delay_terminate  # Delays terminating for this amount of time

          duration pause_status  # Pauses the status messages for this amount of time'
        fields:
        - name: terminate_status
          type: int32
        - name: ignore_cancel
          type: bool
        - name: result_text
          type: string
        - name: the_result
          type: int32
        - name: is_simple_client
          type: bool
        - name: delay_accept
          type: duration
        - name: delay_terminate
          type: duration
        - name: pause_status
          type: duration
        name: TestRequestGoal
        package: actionlib
      name: TestRequest
      package: actionlib
      result:
        definition: 'int32 the_result

          bool is_simple_server'
        fields:
        - name: the_result
          type: int32
        - name: is_simple_server
          type: bool
        name: TestRequestResult
        package: actionlib
    - definition: 'int64 a

        int64 b

        ---

        int64 sum

        ---

        '
      feedback:
        definition: ''
        name: TwoIntsFeedback
        package: actionlib
      goal:
        definition: 'int64 a

          int64 b'
        fields:
        - name: a
          type: int64
        - name: b
          type: int64
        name: TwoIntsGoal
        package: actionlib
      name: TwoInts
      package: actionlib
      result:
        definition: int64 sum
        fields:
        - name: sum
          type: int64
        name: TwoIntsResult
        package: actionlib
    messages:
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        TestActionGoal action_goal

        TestActionResult action_result

        TestActionFeedback action_feedback

        '
      fields:
      - name: action_goal
        type: actionlib/TestActionGoal
      - name: action_result
        type: actionlib/TestActionResult
      - name: action_feedback
        type: actionlib/TestActionFeedback
      name: TestAction
      package: actionlib
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        TestFeedback feedback

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: feedback
        type: actionlib/TestFeedback
      name: TestActionFeedback
      package: actionlib
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalID goal_id

        TestGoal goal

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: goal_id
        type: actionlib_msgs/GoalID
      - name: goal
        type: actionlib/TestGoal
      name: TestActionGoal
      package: actionlib
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        TestResult result

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: result
        type: actionlib/TestResult
      name: TestActionResult
      package: actionlib
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        int32 feedback


        '
      fields:
      - name: feedback
        type: int32
      name: TestFeedback
      package: actionlib
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        int32 goal

        '
      fields:
      - name: goal
        type: int32
      name: TestGoal
      package: actionlib
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        TestRequestActionGoal action_goal

        TestRequestActionResult action_result

        TestRequestActionFeedback action_feedback

        '
      fields:
      - name: action_goal
        type: actionlib/TestRequestActionGoal
      - name: action_result
        type: actionlib/TestRequestActionResult
      - name: action_feedback
        type: actionlib/TestRequestActionFeedback
      name: TestRequestAction
      package: actionlib
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        TestRequestFeedback feedback

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: feedback
        type: actionlib/TestRequestFeedback
      name: TestRequestActionFeedback
      package: actionlib
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalID goal_id

        TestRequestGoal goal

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: goal_id
        type: actionlib_msgs/GoalID
      - name: goal
        type: actionlib/TestRequestGoal
      name: TestRequestActionGoal
      package: actionlib
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        TestRequestResult result

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: result
        type: actionlib/TestRequestResult
      name: TestRequestActionResult
      package: actionlib
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        '
      name: TestRequestFeedback
      package: actionlib
    - constants:
      - name: TERMINATE_SUCCESS
        type: int32
        value: '0'
      - name: TERMINATE_ABORTED
        type: int32
        value: '1'
      - name: TERMINATE_REJECTED
        type: int32
        value: '2'
      - name: TERMINATE_LOSE
        type: int32
        value: '3'
      - name: TERMINATE_DROP
        type: int32
        value: '4'
      - name: TERMINATE_EXCEPTION
        type: int32
        value: '5'
      definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        int32 TERMINATE_SUCCESS = 0

        int32 TERMINATE_ABORTED = 1

        int32 TERMINATE_REJECTED = 2

        int32 TERMINATE_LOSE = 3

        int32 TERMINATE_DROP = 4

        int32 TERMINATE_EXCEPTION = 5

        int32 terminate_status

        bool ignore_cancel  # If true, ignores requests to cancel

        string result_text

        int32 the_result    # Desired value for the_result in the Result

        bool is_simple_client

        duration delay_accept  # Delays accepting the goal by this amount of time

        duration delay_terminate  # Delays terminating for this amount of time

        duration pause_status  # Pauses the status messages for this amount of time

        '
      fields:
      - name: terminate_status
        type: int32
      - name: ignore_cancel
        type: bool
      - name: result_text
        type: string
      - name: the_result
        type: int32
      - name: is_simple_client
        type: bool
      - name: delay_accept
        type: duration
      - name: delay_terminate
        type: duration
      - name: pause_status
        type: duration
      name: TestRequestGoal
      package: actionlib
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        int32 the_result

        bool is_simple_server

        '
      fields:
      - name: the_result
        type: int32
      - name: is_simple_server
        type: bool
      name: TestRequestResult
      package: actionlib
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        int32 result

        '
      fields:
      - name: result
        type: int32
      name: TestResult
      package: actionlib
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        TwoIntsActionGoal action_goal

        TwoIntsActionResult action_result

        TwoIntsActionFeedback action_feedback

        '
      fields:
      - name: action_goal
        type: actionlib/TwoIntsActionGoal
      - name: action_result
        type: actionlib/TwoIntsActionResult
      - name: action_feedback
        type: actionlib/TwoIntsActionFeedback
      name: TwoIntsAction
      package: actionlib
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        TwoIntsFeedback feedback

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: feedback
        type: actionlib/TwoIntsFeedback
      name: TwoIntsActionFeedback
      package: actionlib
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalID goal_id

        TwoIntsGoal goal

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: goal_id
        type: actionlib_msgs/GoalID
      - name: goal
        type: actionlib/TwoIntsGoal
      name: TwoIntsActionGoal
      package: actionlib
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        Header header

        actionlib_msgs/GoalStatus status

        TwoIntsResult result

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: actionlib_msgs/GoalStatus
      - name: result
        type: actionlib/TwoIntsResult
      name: TwoIntsActionResult
      package: actionlib
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


        '
      name: TwoIntsFeedback
      package: actionlib
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        int64 a

        int64 b

        '
      fields:
      - name: a
        type: int64
      - name: b
        type: int64
      name: TwoIntsGoal
      package: actionlib
    - definition: '# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

        int64 sum

        '
      fields:
      - name: sum
        type: int64
      name: TwoIntsResult
      package: actionlib
    name: actionlib
    path: /opt/ros/melodic/share/actionlib
    services: []
  - actions: []
    messages: []
    name: cv_bridge
    path: /opt/ros/melodic/share/cv_bridge
    services: []
  - actions: []
    messages: []
    name: teleop_twist_keyboard
    path: /opt/ros/melodic/share/teleop_twist_keyboard
    services: []
  - actions: []
    messages: []
    name: moveit_fake_controller_manager
    path: /opt/ros/melodic/share/moveit_fake_controller_manager
    services: []
  - actions: []
    messages: []
    name: ros_environment
    path: /opt/ros/melodic/share/ros_environment
    services: []
  - actions: []
    messages: []
    name: nodelet
    path: /opt/ros/melodic/share/nodelet
    services:
    - definition: '---

        string[] nodelets

        '
      name: NodeletList
      package: nodelet
      response:
        definition: string[] nodelets
        fields:
        - name: nodelets
          type: string[]
        name: NodeletListResponse
        package: nodelet
    - definition: 'string name

        string type

        string[] remap_source_args

        string[] remap_target_args

        string[] my_argv


        string bond_id

        ---

        bool success

        '
      name: NodeletLoad
      package: nodelet
      request:
        definition: 'string name

          string type

          string[] remap_source_args

          string[] remap_target_args

          string[] my_argv


          string bond_id'
        fields:
        - name: name
          type: string
        - name: type
          type: string
        - name: remap_source_args
          type: string[]
        - name: remap_target_args
          type: string[]
        - name: my_argv
          type: string[]
        - name: bond_id
          type: string
        name: NodeletLoadRequest
        package: nodelet
      response:
        definition: bool success
        fields:
        - name: success
          type: bool
        name: NodeletLoadResponse
        package: nodelet
    - definition: 'string name

        ---

        bool success

        '
      name: NodeletUnload
      package: nodelet
      request:
        definition: string name
        fields:
        - name: name
          type: string
        name: NodeletUnloadRequest
        package: nodelet
      response:
        definition: bool success
        fields:
        - name: success
          type: bool
        name: NodeletUnloadResponse
        package: nodelet
  - actions: []
    messages: []
    name: pcl_ros
    path: /opt/ros/melodic/share/pcl_ros
    services: []
  - actions: []
    messages: []
    name: mk
    path: /opt/ros/melodic/share/mk
    services: []
  - actions: []
    messages:
    - constants:
      - name: POWER_SUPPLY_STATUS_UNKNOWN
        type: uint8
        value: '0'
      - name: POWER_SUPPLY_STATUS_CHARGING
        type: uint8
        value: '1'
      - name: POWER_SUPPLY_STATUS_DISCHARGING
        type: uint8
        value: '2'
      - name: POWER_SUPPLY_STATUS_NOT_CHARGING
        type: uint8
        value: '3'
      - name: POWER_SUPPLY_STATUS_FULL
        type: uint8
        value: '4'
      - name: POWER_SUPPLY_HEALTH_UNKNOWN
        type: uint8
        value: '0'
      - name: POWER_SUPPLY_HEALTH_GOOD
        type: uint8
        value: '1'
      - name: POWER_SUPPLY_HEALTH_OVERHEAT
        type: uint8
        value: '2'
      - name: POWER_SUPPLY_HEALTH_DEAD
        type: uint8
        value: '3'
      - name: POWER_SUPPLY_HEALTH_OVERVOLTAGE
        type: uint8
        value: '4'
      - name: POWER_SUPPLY_HEALTH_UNSPEC_FAILURE
        type: uint8
        value: '5'
      - name: POWER_SUPPLY_HEALTH_COLD
        type: uint8
        value: '6'
      - name: POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE
        type: uint8
        value: '7'
      - name: POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE
        type: uint8
        value: '8'
      - name: POWER_SUPPLY_TECHNOLOGY_UNKNOWN
        type: uint8
        value: '0'
      - name: POWER_SUPPLY_TECHNOLOGY_NIMH
        type: uint8
        value: '1'
      - name: POWER_SUPPLY_TECHNOLOGY_LION
        type: uint8
        value: '2'
      - name: POWER_SUPPLY_TECHNOLOGY_LIPO
        type: uint8
        value: '3'
      - name: POWER_SUPPLY_TECHNOLOGY_LIFE
        type: uint8
        value: '4'
      - name: POWER_SUPPLY_TECHNOLOGY_NICD
        type: uint8
        value: '5'
      - name: POWER_SUPPLY_TECHNOLOGY_LIMN
        type: uint8
        value: '6'
      definition: "\n# Constants are chosen to match the enums in the linux kernel\n\
        # defined in include/linux/power_supply.h as of version 3.7\n# The one difference\
        \ is for style reasons the constants are\n# all uppercase not mixed case.\n\n\
        # Power supply status constants\nuint8 POWER_SUPPLY_STATUS_UNKNOWN = 0\nuint8\
        \ POWER_SUPPLY_STATUS_CHARGING = 1\nuint8 POWER_SUPPLY_STATUS_DISCHARGING =\
        \ 2\nuint8 POWER_SUPPLY_STATUS_NOT_CHARGING = 3\nuint8 POWER_SUPPLY_STATUS_FULL\
        \ = 4\n\n# Power supply health constants\nuint8 POWER_SUPPLY_HEALTH_UNKNOWN\
        \ = 0\nuint8 POWER_SUPPLY_HEALTH_GOOD = 1\nuint8 POWER_SUPPLY_HEALTH_OVERHEAT\
        \ = 2\nuint8 POWER_SUPPLY_HEALTH_DEAD = 3\nuint8 POWER_SUPPLY_HEALTH_OVERVOLTAGE\
        \ = 4\nuint8 POWER_SUPPLY_HEALTH_UNSPEC_FAILURE = 5\nuint8 POWER_SUPPLY_HEALTH_COLD\
        \ = 6\nuint8 POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE = 7\nuint8 POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE\
        \ = 8\n\n# Power supply technology (chemistry) constants\nuint8 POWER_SUPPLY_TECHNOLOGY_UNKNOWN\
        \ = 0\nuint8 POWER_SUPPLY_TECHNOLOGY_NIMH = 1\nuint8 POWER_SUPPLY_TECHNOLOGY_LION\
        \ = 2\nuint8 POWER_SUPPLY_TECHNOLOGY_LIPO = 3\nuint8 POWER_SUPPLY_TECHNOLOGY_LIFE\
        \ = 4\nuint8 POWER_SUPPLY_TECHNOLOGY_NICD = 5\nuint8 POWER_SUPPLY_TECHNOLOGY_LIMN\
        \ = 6\n\nHeader  header\nfloat32 voltage          # Voltage in Volts (Mandatory)\n\
        float32 current          # Negative when discharging (A)  (If unmeasured NaN)\n\
        float32 charge           # Current charge in Ah  (If unmeasured NaN)\nfloat32\
        \ capacity         # Capacity in Ah (last full capacity)  (If unmeasured NaN)\n\
        float32 design_capacity  # Capacity in Ah (design capacity)  (If unmeasured\
        \ NaN)\nfloat32 percentage       # Charge percentage on 0 to 1 range  (If unmeasured\
        \ NaN)\nuint8   power_supply_status     # The charging status as reported. Values\
        \ defined above\nuint8   power_supply_health     # The battery health metric.\
        \ Values defined above\nuint8   power_supply_technology # The battery chemistry.\
        \ Values defined above\nbool    present          # True if the battery is present\n\
        \nfloat32[] cell_voltage   # An array of individual cell voltages for each cell\
        \ in the pack\n                         # If individual voltages unknown but\
        \ number of cells known set each to NaN\nstring location          # The location\
        \ into which the battery is inserted. (slot number or plug)\nstring serial_number\
        \     # The best approximation of the battery serial number\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: voltage
        type: float32
      - name: current
        type: float32
      - name: charge
        type: float32
      - name: capacity
        type: float32
      - name: design_capacity
        type: float32
      - name: percentage
        type: float32
      - name: power_supply_status
        type: uint8
      - name: power_supply_health
        type: uint8
      - name: power_supply_technology
        type: uint8
      - name: present
        type: bool
      - name: cell_voltage
        type: float32[]
      - name: location
        type: string
      - name: serial_number
        type: string
      name: BatteryState
      package: sensor_msgs
    - definition: "# This message defines meta information for a camera. It should be\
        \ in a\n# camera namespace on topic \"camera_info\" and accompanied by up to\
        \ five\n# image topics named:\n#\n#   image_raw - raw data from the camera driver,\
        \ possibly Bayer encoded\n#   image            - monochrome, distorted\n#  \
        \ image_color      - color, distorted\n#   image_rect       - monochrome, rectified\n\
        #   image_rect_color - color, rectified\n#\n# The image_pipeline contains packages\
        \ (image_proc, stereo_image_proc)\n# for producing the four processed image\
        \ topics from image_raw and\n# camera_info. The meaning of the camera parameters\
        \ are described in\n# detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.\n\
        #\n# The image_geometry package provides a user-friendly interface to\n# common\
        \ operations using this meta information. If you want to, e.g.,\n# project a\
        \ 3d point into image coordinates, we strongly recommend\n# using image_geometry.\n\
        #\n# If the camera is uncalibrated, the matrices D, K, R, P should be left\n\
        # zeroed out. In particular, clients may assume that K[0] == 0.0\n# indicates\
        \ an uncalibrated camera.\n\n#######################################################################\n\
        #                     Image acquisition info                          #\n#######################################################################\n\
        \n# Time of image acquisition, camera coordinate frame ID\nHeader header   \
        \ # Header timestamp should be acquisition time of image\n                 #\
        \ Header frame_id should be optical frame of camera\n                 # origin\
        \ of frame should be optical center of camera\n                 # +x should\
        \ point to the right in the image\n                 # +y should point down in\
        \ the image\n                 # +z should point into the plane of the image\n\
        \n\n#######################################################################\n\
        #                      Calibration Parameters                         #\n#######################################################################\n\
        # These are fixed during camera calibration. Their values will be the #\n# same\
        \ in all messages until the camera is recalibrated. Note that    #\n# self-calibrating\
        \ systems may \"recalibrate\" frequently.              #\n#                \
        \                                                     #\n# The internal parameters\
        \ can be used to warp a raw (distorted) image #\n# to:                     \
        \                                            #\n#   1. An undistorted image\
        \ (requires D and K)                        #\n#   2. A rectified image (requires\
        \ D, K, R)                           #\n# The projection matrix P projects 3D\
        \ points into the rectified image.#\n#######################################################################\n\
        \n# The image dimensions with which the camera was calibrated. Normally\n# this\
        \ will be the full camera resolution in pixels.\nuint32 height\nuint32 width\n\
        \n# The distortion model used. Supported models are listed in\n# sensor_msgs/distortion_models.h.\
        \ For most cameras, \"plumb_bob\" - a\n# simple model of radial and tangential\
        \ distortion - is sufficient.\nstring distortion_model\n\n# The distortion parameters,\
        \ size depending on the distortion model.\n# For \"plumb_bob\", the 5 parameters\
        \ are: (k1, k2, t1, t2, k3).\nfloat64[] D\n\n# Intrinsic camera matrix for the\
        \ raw (distorted) images.\n#     [fx  0 cx]\n# K = [ 0 fy cy]\n#     [ 0  0\
        \  1]\n# Projects 3D points in the camera coordinate frame to 2D pixel\n# coordinates\
        \ using the focal lengths (fx, fy) and principal point\n# (cx, cy).\nfloat64[9]\
        \  K # 3x3 row-major matrix\n\n# Rectification matrix (stereo cameras only)\n\
        # A rotation matrix aligning the camera coordinate system to the ideal\n# stereo\
        \ image plane so that epipolar lines in both stereo images are\n# parallel.\n\
        float64[9]  R # 3x3 row-major matrix\n\n# Projection/camera matrix\n#     [fx'\
        \  0  cx' Tx]\n# P = [ 0  fy' cy' Ty]\n#     [ 0   0   1   0]\n# By convention,\
        \ this matrix specifies the intrinsic (camera) matrix\n#  of the processed (rectified)\
        \ image. That is, the left 3x3 portion\n#  is the normal camera intrinsic matrix\
        \ for the rectified image.\n# It projects 3D points in the camera coordinate\
        \ frame to 2D pixel\n#  coordinates using the focal lengths (fx', fy') and principal\
        \ point\n#  (cx', cy') - these may differ from the values in K.\n# For monocular\
        \ cameras, Tx = Ty = 0. Normally, monocular cameras will\n#  also have R = the\
        \ identity and P[1:3,1:3] = K.\n# For a stereo pair, the fourth column [Tx Ty\
        \ 0]' is related to the\n#  position of the optical center of the second camera\
        \ in the first\n#  camera's frame. We assume Tz = 0 so both cameras are in the\
        \ same\n#  stereo image plane. The first camera always has Tx = Ty = 0. For\n\
        #  the right (second) camera of a horizontal stereo pair, Ty = 0 and\n#  Tx\
        \ = -fx' * B, where B is the baseline between the cameras.\n# Given a 3D point\
        \ [X Y Z]', the projection (x, y) of the point onto\n#  the rectified image\
        \ is given by:\n#  [u v w]' = P * [X Y Z 1]'\n#         x = u / w\n#       \
        \  y = v / w\n#  This holds for both images of a stereo pair.\nfloat64[12] P\
        \ # 3x4 row-major matrix\n\n\n#######################################################################\n\
        #                      Operational Parameters                         #\n#######################################################################\n\
        # These define the image region actually captured by the camera       #\n# driver.\
        \ Although they affect the geometry of the output image, they #\n# may be changed\
        \ freely without recalibrating the camera.             #\n#######################################################################\n\
        \n# Binning refers here to any camera setting which combines rectangular\n#\
        \  neighborhoods of pixels into larger \"super-pixels.\" It reduces the\n# \
        \ resolution of the output image to\n#  (width / binning_x) x (height / binning_y).\n\
        # The default values binning_x = binning_y = 0 is considered the same\n#  as\
        \ binning_x = binning_y = 1 (no subsampling).\nuint32 binning_x\nuint32 binning_y\n\
        \n# Region of interest (subwindow of full camera resolution), given in\n#  full\
        \ resolution (unbinned) image coordinates. A particular ROI\n#  always denotes\
        \ the same window of pixels on the camera sensor,\n#  regardless of binning\
        \ settings.\n# The default setting of roi (all values 0) is considered the same\
        \ as\n#  full resolution (roi.width = width, roi.height = height).\nRegionOfInterest\
        \ roi\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: height
        type: uint32
      - name: width
        type: uint32
      - name: distortion_model
        type: string
      - name: D
        type: float64[]
      - name: K
        type: float64[9]
      - name: R
        type: float64[9]
      - name: P
        type: float64[12]
      - name: binning_x
        type: uint32
      - name: binning_y
        type: uint32
      - name: roi
        type: sensor_msgs/RegionOfInterest
      name: CameraInfo
      package: sensor_msgs
    - definition: '# This message is used by the PointCloud message to hold optional
        data

        # associated with each point in the cloud. The length of the values

        # array should be the same as the length of the points array in the

        # PointCloud, and each value should be associated with the corresponding

        # point.


        # Channel names in existing practice include:

        #   "u", "v" - row and column (respectively) in the left stereo image.

        #              This is opposite to usual conventions but remains for

        #              historical reasons. The newer PointCloud2 message has no

        #              such problem.

        #   "rgb" - For point clouds produced by color stereo cameras. uint8

        #           (R,G,B) values packed into the least significant 24 bits,

        #           in order.

        #   "intensity" - laser or pixel intensity.

        #   "distance"


        # The channel name should give semantics of the channel (e.g.

        # "intensity" instead of "value").

        string name


        # The values array should be 1-1 with the elements of the associated

        # PointCloud.

        float32[] values

        '
      fields:
      - name: name
        type: string
      - name: values
        type: float32[]
      name: ChannelFloat32
      package: sensor_msgs
    - definition: "# This message contains a compressed image\n\nHeader header     \
        \   # Header timestamp should be acquisition time of image\n               \
        \      # Header frame_id should be optical frame of camera\n               \
        \      # origin of frame should be optical center of camera\n              \
        \       # +x should point to the right in the image\n                     #\
        \ +y should point down in the image\n                     # +z should point\
        \ into to plane of the image\n\nstring format        # Specifies the format\
        \ of the data\n                     #   Acceptable values:\n               \
        \      #     jpeg, png\nuint8[] data         # Compressed image buffer\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: format
        type: string
      - name: data
        type: uint8[]
      name: CompressedImage
      package: sensor_msgs
    - definition: " # Single pressure reading.  This message is appropriate for measuring\
        \ the\n # pressure inside of a fluid (air, water, etc).  This also includes\n\
        \ # atmospheric or barometric pressure.\n\n # This message is not appropriate\
        \ for force/pressure contact sensors.\n\n Header header           # timestamp\
        \ of the measurement\n                         # frame_id is the location of\
        \ the pressure sensor\n\n float64 fluid_pressure  # Absolute pressure reading\
        \ in Pascals.\n\n float64 variance        # 0 is interpreted as variance unknown"
      fields:
      - name: header
        type: std_msgs/Header
      - name: fluid_pressure
        type: float64
      - name: variance
        type: float64
      name: FluidPressure
      package: sensor_msgs
    - definition: " # Single photometric illuminance measurement.  Light should be assumed\
        \ to be\n # measured along the sensor's x-axis (the area of detection is the\
        \ y-z plane).\n # The illuminance should have a 0 or positive value and be received\
        \ with\n # the sensor's +X axis pointing toward the light source.\n\n # Photometric\
        \ illuminance is the measure of the human eye's sensitivity of the\n # intensity\
        \ of light encountering or passing through a surface.\n\n # All other Photometric\
        \ and Radiometric measurements should\n # not use this message.\n # This message\
        \ cannot represent:\n # Luminous intensity (candela/light source output)\n #\
        \ Luminance (nits/light output per area)\n # Irradiance (watt/area), etc.\n\n\
        \ Header header           # timestamp is the time the illuminance was measured\n\
        \                         # frame_id is the location and direction of the reading\n\
        \n float64 illuminance     # Measurement of the Photometric Illuminance in Lux.\n\
        \n float64 variance        # 0 is interpreted as variance unknown"
      fields:
      - name: header
        type: std_msgs/Header
      - name: illuminance
        type: float64
      - name: variance
        type: float64
      name: Illuminance
      package: sensor_msgs
    - definition: "# This message contains an uncompressed image\n# (0, 0) is at top-left\
        \ corner of image\n#\n\nHeader header        # Header timestamp should be acquisition\
        \ time of image\n                     # Header frame_id should be optical frame\
        \ of camera\n                     # origin of frame should be optical center\
        \ of camera\n                     # +x should point to the right in the image\n\
        \                     # +y should point down in the image\n                \
        \     # +z should point into to plane of the image\n                     # If\
        \ the frame_id here and the frame_id of the CameraInfo\n                   \
        \  # message associated with the image conflict\n                     # the\
        \ behavior is undefined\n\nuint32 height         # image height, that is, number\
        \ of rows\nuint32 width          # image width, that is, number of columns\n\
        \n# The legal values for encoding are in file src/image_encodings.cpp\n# If\
        \ you want to standardize a new string format, join\n# ros-users@lists.sourceforge.net\
        \ and send an email proposing a new encoding.\n\nstring encoding       # Encoding\
        \ of pixels -- channel meaning, ordering, size\n                      # taken\
        \ from the list of strings in include/sensor_msgs/image_encodings.h\n\nuint8\
        \ is_bigendian    # is this data bigendian?\nuint32 step           # Full row\
        \ length in bytes\nuint8[] data          # actual matrix data, size is (step\
        \ * rows)\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: height
        type: uint32
      - name: width
        type: uint32
      - name: encoding
        type: string
      - name: is_bigendian
        type: uint8
      - name: step
        type: uint32
      - name: data
        type: uint8[]
      name: Image
      package: sensor_msgs
    - definition: "# This is a message to hold data from an IMU (Inertial Measurement\
        \ Unit)\n#\n# Accelerations should be in m/s^2 (not in g's), and rotational\
        \ velocity should be in rad/sec\n#\n# If the covariance of the measurement is\
        \ known, it should be filled in (if all you know is the \n# variance of each\
        \ measurement, e.g. from the datasheet, just put those along the diagonal)\n\
        # A covariance matrix of all zeros will be interpreted as \"covariance unknown\"\
        , and to use the\n# data a covariance will have to be assumed or gotten from\
        \ some other source\n#\n# If you have no estimate for one of the data elements\
        \ (e.g. your IMU doesn't produce an orientation \n# estimate), please set element\
        \ 0 of the associated covariance matrix to -1\n# If you are interpreting this\
        \ message, please check for a value of -1 in the first element of each \n# covariance\
        \ matrix, and disregard the associated estimate.\n\nHeader header\n\ngeometry_msgs/Quaternion\
        \ orientation\nfloat64[9] orientation_covariance # Row major about x, y, z axes\n\
        \ngeometry_msgs/Vector3 angular_velocity\nfloat64[9] angular_velocity_covariance\
        \ # Row major about x, y, z axes\n\ngeometry_msgs/Vector3 linear_acceleration\n\
        float64[9] linear_acceleration_covariance # Row major x, y z \n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: orientation
        type: geometry_msgs/Quaternion
      - name: orientation_covariance
        type: float64[9]
      - name: angular_velocity
        type: geometry_msgs/Vector3
      - name: angular_velocity_covariance
        type: float64[9]
      - name: linear_acceleration
        type: geometry_msgs/Vector3
      - name: linear_acceleration_covariance
        type: float64[9]
      name: Imu
      package: sensor_msgs
    - definition: "# This is a message that holds data to describe the state of a set\
        \ of torque controlled joints. \n#\n# The state of each joint (revolute or prismatic)\
        \ is defined by:\n#  * the position of the joint (rad or m),\n#  * the velocity\
        \ of the joint (rad/s or m/s) and \n#  * the effort that is applied in the joint\
        \ (Nm or N).\n#\n# Each joint is uniquely identified by its name\n# The header\
        \ specifies the time at which the joint states were recorded. All the joint\
        \ states\n# in one message have to be recorded at the same time.\n#\n# This\
        \ message consists of a multiple arrays, one for each part of the joint state.\
        \ \n# The goal is to make each of the fields optional. When e.g. your joints\
        \ have no\n# effort associated with them, you can leave the effort array empty.\
        \ \n#\n# All arrays in this message should have the same size, or be empty.\n\
        # This is the only way to uniquely associate the joint name with the correct\n\
        # states.\n\n\nHeader header\n\nstring[] name\nfloat64[] position\nfloat64[]\
        \ velocity\nfloat64[] effort\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: name
        type: string[]
      - name: position
        type: float64[]
      - name: velocity
        type: float64[]
      - name: effort
        type: float64[]
      name: JointState
      package: sensor_msgs
    - definition: "# Reports the state of a joysticks axes and buttons.\nHeader header\
        \           # timestamp in the header is the time the data is received from\
        \ the joystick\nfloat32[] axes          # the axes measurements from a joystick\n\
        int32[] buttons         # the buttons measurements from a joystick \n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: axes
        type: float32[]
      - name: buttons
        type: int32[]
      name: Joy
      package: sensor_msgs
    - constants:
      - name: TYPE_LED
        type: uint8
        value: '0'
      - name: TYPE_RUMBLE
        type: uint8
        value: '1'
      - name: TYPE_BUZZER
        type: uint8
        value: '2'
      definition: '# Declare of the type of feedback

        uint8 TYPE_LED    = 0

        uint8 TYPE_RUMBLE = 1

        uint8 TYPE_BUZZER = 2


        uint8 type


        # This will hold an id number for each type of each feedback.

        # Example, the first led would be id=0, the second would be id=1

        uint8 id


        # Intensity of the feedback, from 0.0 to 1.0, inclusive.  If device is

        # actually binary, driver should treat 0<=x<0.5 as off, 0.5<=x<=1 as on.

        float32 intensity


        '
      fields:
      - name: type
        type: uint8
      - name: id
        type: uint8
      - name: intensity
        type: float32
      name: JoyFeedback
      package: sensor_msgs
    - definition: "# This message publishes values for multiple feedback at once. \n\
        JoyFeedback[] array"
      fields:
      - name: array
        type: sensor_msgs/JoyFeedback[]
      name: JoyFeedbackArray
      package: sensor_msgs
    - definition: "# This message is a submessage of MultiEchoLaserScan and is not intended\n\
        # to be used separately.\n\nfloat32[] echoes  # Multiple values of ranges or\
        \ intensities.\n                  # Each array represents data from the same\
        \ angle increment."
      fields:
      - name: echoes
        type: float32[]
      name: LaserEcho
      package: sensor_msgs
    - definition: "# Single scan from a planar laser range-finder\n#\n# If you have\
        \ another ranging device with different behavior (e.g. a sonar\n# array), please\
        \ find or create a different message, since applications\n# will make fairly\
        \ laser-specific assumptions about this data\n\nHeader header            # timestamp\
        \ in the header is the acquisition time of \n                         # the\
        \ first ray in the scan.\n                         #\n                     \
        \    # in frame frame_id, angles are measured around \n                    \
        \     # the positive Z axis (counterclockwise, if Z is up)\n               \
        \          # with zero angle being forward along the x axis\n              \
        \           \nfloat32 angle_min        # start angle of the scan [rad]\nfloat32\
        \ angle_max        # end angle of the scan [rad]\nfloat32 angle_increment  #\
        \ angular distance between measurements [rad]\n\nfloat32 time_increment   #\
        \ time between measurements [seconds] - if your scanner\n                  \
        \       # is moving, this will be used in interpolating position\n         \
        \                # of 3d points\nfloat32 scan_time        # time between scans\
        \ [seconds]\n\nfloat32 range_min        # minimum range value [m]\nfloat32 range_max\
        \        # maximum range value [m]\n\nfloat32[] ranges         # range data\
        \ [m] (Note: values < range_min or > range_max should be discarded)\nfloat32[]\
        \ intensities    # intensity data [device-specific units].  If your\n      \
        \                   # device does not provide intensities, please leave\n  \
        \                       # the array empty.\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: angle_min
        type: float32
      - name: angle_max
        type: float32
      - name: angle_increment
        type: float32
      - name: time_increment
        type: float32
      - name: scan_time
        type: float32
      - name: range_min
        type: float32
      - name: range_max
        type: float32
      - name: ranges
        type: float32[]
      - name: intensities
        type: float32[]
      name: LaserScan
      package: sensor_msgs
    - definition: " # Measurement of the Magnetic Field vector at a specific location.\n\
        \n # If the covariance of the measurement is known, it should be filled in\n\
        \ # (if all you know is the variance of each measurement, e.g. from the datasheet,\n\
        \ #just put those along the diagonal)\n # A covariance matrix of all zeros will\
        \ be interpreted as \"covariance unknown\",\n # and to use the data a covariance\
        \ will have to be assumed or gotten from some\n # other source\n\n\n Header\
        \ header                        # timestamp is the time the\n              \
        \                        # field was measured\n                            \
        \          # frame_id is the location and orientation\n                    \
        \                  # of the field measurement\n\n geometry_msgs/Vector3 magnetic_field\
        \ # x, y, and z components of the\n                                      # field\
        \ vector in Tesla\n                                      # If your sensor does\
        \ not output 3 axes,\n                                      # put NaNs in the\
        \ components not reported.\n\n float64[9] magnetic_field_covariance # Row major\
        \ about x, y, z axes\n                                      # 0 is interpreted\
        \ as variance unknown"
      fields:
      - name: header
        type: std_msgs/Header
      - name: magnetic_field
        type: geometry_msgs/Vector3
      - name: magnetic_field_covariance
        type: float64[9]
      name: MagneticField
      package: sensor_msgs
    - definition: "# Representation of state for joints with multiple degrees of freedom,\
        \ \n# following the structure of JointState.\n#\n# It is assumed that a joint\
        \ in a system corresponds to a transform that gets applied \n# along the kinematic\
        \ chain. For example, a planar joint (as in URDF) is 3DOF (x, y, yaw)\n# and\
        \ those 3DOF can be expressed as a transformation matrix, and that transformation\n\
        # matrix can be converted back to (x, y, yaw)\n#\n# Each joint is uniquely identified\
        \ by its name\n# The header specifies the time at which the joint states were\
        \ recorded. All the joint states\n# in one message have to be recorded at the\
        \ same time.\n#\n# This message consists of a multiple arrays, one for each\
        \ part of the joint state. \n# The goal is to make each of the fields optional.\
        \ When e.g. your joints have no\n# wrench associated with them, you can leave\
        \ the wrench array empty. \n#\n# All arrays in this message should have the\
        \ same size, or be empty.\n# This is the only way to uniquely associate the\
        \ joint name with the correct\n# states.\n\nHeader header\n\nstring[] joint_names\n\
        geometry_msgs/Transform[] transforms\ngeometry_msgs/Twist[] twist\ngeometry_msgs/Wrench[]\
        \ wrench\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: joint_names
        type: string[]
      - name: transforms
        type: geometry_msgs/Transform[]
      - name: twist
        type: geometry_msgs/Twist[]
      - name: wrench
        type: geometry_msgs/Wrench[]
      name: MultiDOFJointState
      package: sensor_msgs
    - definition: "# Single scan from a multi-echo planar laser range-finder\n#\n# If\
        \ you have another ranging device with different behavior (e.g. a sonar\n# array),\
        \ please find or create a different message, since applications\n# will make\
        \ fairly laser-specific assumptions about this data\n\nHeader header       \
        \     # timestamp in the header is the acquisition time of \n              \
        \           # the first ray in the scan.\n                         #\n     \
        \                    # in frame frame_id, angles are measured around \n    \
        \                     # the positive Z axis (counterclockwise, if Z is up)\n\
        \                         # with zero angle being forward along the x axis\n\
        \                         \nfloat32 angle_min        # start angle of the scan\
        \ [rad]\nfloat32 angle_max        # end angle of the scan [rad]\nfloat32 angle_increment\
        \  # angular distance between measurements [rad]\n\nfloat32 time_increment \
        \  # time between measurements [seconds] - if your scanner\n               \
        \          # is moving, this will be used in interpolating position\n      \
        \                   # of 3d points\nfloat32 scan_time        # time between\
        \ scans [seconds]\n\nfloat32 range_min        # minimum range value [m]\nfloat32\
        \ range_max        # maximum range value [m]\n\nLaserEcho[] ranges       # range\
        \ data [m] (Note: NaNs, values < range_min or > range_max should be discarded)\n\
        \                         # +Inf measurements are out of range\n           \
        \              # -Inf measurements are too close to determine exact distance.\n\
        LaserEcho[] intensities  # intensity data [device-specific units].  If your\n\
        \                         # device does not provide intensities, please leave\n\
        \                         # the array empty."
      fields:
      - name: header
        type: std_msgs/Header
      - name: angle_min
        type: float32
      - name: angle_max
        type: float32
      - name: angle_increment
        type: float32
      - name: time_increment
        type: float32
      - name: scan_time
        type: float32
      - name: range_min
        type: float32
      - name: range_max
        type: float32
      - name: ranges
        type: sensor_msgs/LaserEcho[]
      - name: intensities
        type: sensor_msgs/LaserEcho[]
      name: MultiEchoLaserScan
      package: sensor_msgs
    - constants:
      - name: COVARIANCE_TYPE_UNKNOWN
        type: uint8
        value: '0'
      - name: COVARIANCE_TYPE_APPROXIMATED
        type: uint8
        value: '1'
      - name: COVARIANCE_TYPE_DIAGONAL_KNOWN
        type: uint8
        value: '2'
      - name: COVARIANCE_TYPE_KNOWN
        type: uint8
        value: '3'
      definition: '# Navigation Satellite fix for any Global Navigation Satellite System

        #

        # Specified using the WGS 84 reference ellipsoid


        # header.stamp specifies the ROS time for this measurement (the

        #        corresponding satellite time may be reported using the

        #        sensor_msgs/TimeReference message).

        #

        # header.frame_id is the frame of reference reported by the satellite

        #        receiver, usually the location of the antenna.  This is a

        #        Euclidean frame relative to the vehicle, not a reference

        #        ellipsoid.

        Header header


        # satellite fix status information

        NavSatStatus status


        # Latitude [degrees]. Positive is north of equator; negative is south.

        float64 latitude


        # Longitude [degrees]. Positive is east of prime meridian; negative is west.

        float64 longitude


        # Altitude [m]. Positive is above the WGS 84 ellipsoid

        # (quiet NaN if no altitude is available).

        float64 altitude


        # Position covariance [m^2] defined relative to a tangential plane

        # through the reported position. The components are East, North, and

        # Up (ENU), in row-major order.

        #

        # Beware: this coordinate system exhibits singularities at the poles.


        float64[9] position_covariance


        # If the covariance of the fix is known, fill it in completely. If the

        # GPS receiver provides the variance of each measurement, put them

        # along the diagonal. If only Dilution of Precision is available,

        # estimate an approximate covariance from that.


        uint8 COVARIANCE_TYPE_UNKNOWN = 0

        uint8 COVARIANCE_TYPE_APPROXIMATED = 1

        uint8 COVARIANCE_TYPE_DIAGONAL_KNOWN = 2

        uint8 COVARIANCE_TYPE_KNOWN = 3


        uint8 position_covariance_type

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: sensor_msgs/NavSatStatus
      - name: latitude
        type: float64
      - name: longitude
        type: float64
      - name: altitude
        type: float64
      - name: position_covariance
        type: float64[9]
      - name: position_covariance_type
        type: uint8
      name: NavSatFix
      package: sensor_msgs
    - constants:
      - name: STATUS_NO_FIX
        type: int8
        value: '-1'
      - name: STATUS_FIX
        type: int8
        value: '0'
      - name: STATUS_SBAS_FIX
        type: int8
        value: '1'
      - name: STATUS_GBAS_FIX
        type: int8
        value: '2'
      - name: SERVICE_GPS
        type: uint16
        value: '1'
      - name: SERVICE_GLONASS
        type: uint16
        value: '2'
      - name: SERVICE_COMPASS
        type: uint16
        value: '4'
      - name: SERVICE_GALILEO
        type: uint16
        value: '8'
      definition: '# Navigation Satellite fix status for any Global Navigation Satellite
        System


        # Whether to output an augmented fix is determined by both the fix

        # type and the last time differential corrections were received.  A

        # fix is valid when status >= STATUS_FIX.


        int8 STATUS_NO_FIX =  -1        # unable to fix position

        int8 STATUS_FIX =      0        # unaugmented fix

        int8 STATUS_SBAS_FIX = 1        # with satellite-based augmentation

        int8 STATUS_GBAS_FIX = 2        # with ground-based augmentation


        int8 status


        # Bits defining which Global Navigation Satellite System signals were

        # used by the receiver.


        uint16 SERVICE_GPS =     1

        uint16 SERVICE_GLONASS = 2

        uint16 SERVICE_COMPASS = 4      # includes BeiDou.

        uint16 SERVICE_GALILEO = 8


        uint16 service

        '
      fields:
      - name: status
        type: int8
      - name: service
        type: uint16
      name: NavSatStatus
      package: sensor_msgs
    - definition: '# This message holds a collection of 3d points, plus optional additional

        # information about each point.


        # Time of sensor data acquisition, coordinate frame ID.

        Header header


        # Array of 3d points. Each Point32 should be interpreted as a 3d point

        # in the frame given in the header.

        geometry_msgs/Point32[] points


        # Each channel should have the same number of elements as points array,

        # and the data in each channel should correspond 1:1 with each point.

        # Channel names in common practice are listed in ChannelFloat32.msg.

        ChannelFloat32[] channels

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: points
        type: geometry_msgs/Point32[]
      - name: channels
        type: sensor_msgs/ChannelFloat32[]
      name: PointCloud
      package: sensor_msgs
    - definition: '# This message holds a collection of N-dimensional points, which
        may

        # contain additional information such as normals, intensity, etc. The

        # point data is stored as a binary blob, its layout described by the

        # contents of the "fields" array.


        # The point cloud data may be organized 2d (image-like) or 1d

        # (unordered). Point clouds organized as 2d images may be produced by

        # camera depth sensors such as stereo or time-of-flight.


        # Time of sensor data acquisition, and the coordinate frame ID (for 3d

        # points).

        Header header


        # 2D structure of the point cloud. If the cloud is unordered, height is

        # 1 and width is the length of the point cloud.

        uint32 height

        uint32 width


        # Describes the channels and their layout in the binary data blob.

        PointField[] fields


        bool    is_bigendian # Is this data bigendian?

        uint32  point_step   # Length of a point in bytes

        uint32  row_step     # Length of a row in bytes

        uint8[] data         # Actual point data, size is (row_step*height)


        bool is_dense        # True if there are no invalid points

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: height
        type: uint32
      - name: width
        type: uint32
      - name: fields
        type: sensor_msgs/PointField[]
      - name: is_bigendian
        type: bool
      - name: point_step
        type: uint32
      - name: row_step
        type: uint32
      - name: data
        type: uint8[]
      - name: is_dense
        type: bool
      name: PointCloud2
      package: sensor_msgs
    - constants:
      - name: INT8
        type: uint8
        value: '1'
      - name: UINT8
        type: uint8
        value: '2'
      - name: INT16
        type: uint8
        value: '3'
      - name: UINT16
        type: uint8
        value: '4'
      - name: INT32
        type: uint8
        value: '5'
      - name: UINT32
        type: uint8
        value: '6'
      - name: FLOAT32
        type: uint8
        value: '7'
      - name: FLOAT64
        type: uint8
        value: '8'
      definition: '# This message holds the description of one point entry in the

        # PointCloud2 message format.

        uint8 INT8    = 1

        uint8 UINT8   = 2

        uint8 INT16   = 3

        uint8 UINT16  = 4

        uint8 INT32   = 5

        uint8 UINT32  = 6

        uint8 FLOAT32 = 7

        uint8 FLOAT64 = 8


        string name      # Name of field

        uint32 offset    # Offset from start of point struct

        uint8  datatype  # Datatype enumeration, see above

        uint32 count     # How many elements in the field

        '
      fields:
      - name: name
        type: string
      - name: offset
        type: uint32
      - name: datatype
        type: uint8
      - name: count
        type: uint32
      name: PointField
      package: sensor_msgs
    - constants:
      - name: ULTRASOUND
        type: uint8
        value: '0'
      - name: INFRARED
        type: uint8
        value: '1'
      definition: "# Single range reading from an active ranger that emits energy and\
        \ reports\n# one range reading that is valid along an arc at the distance measured.\
        \ \n# This message is  not appropriate for laser scanners. See the LaserScan\n\
        # message if you are working with a laser scanner.\n\n# This message also can\
        \ represent a fixed-distance (binary) ranger.  This\n# sensor will have min_range===max_range===distance\
        \ of detection.\n# These sensors follow REP 117 and will output -Inf if the\
        \ object is detected\n# and +Inf if the object is outside of the detection range.\n\
        \nHeader header           # timestamp in the header is the time the ranger\n\
        \                        # returned the distance reading\n\n# Radiation type\
        \ enums\n# If you want a value added to this list, send an email to the ros-users\
        \ list\nuint8 ULTRASOUND=0\nuint8 INFRARED=1\n\nuint8 radiation_type    # the\
        \ type of radiation used by the sensor\n                        # (sound, IR,\
        \ etc) [enum]\n\nfloat32 field_of_view   # the size of the arc that the distance\
        \ reading is\n                        # valid for [rad]\n                  \
        \      # the object causing the range reading may have\n                   \
        \     # been anywhere within -field_of_view/2 and\n                        #\
        \ field_of_view/2 at the measured range. \n                        # 0 angle\
        \ corresponds to the x-axis of the sensor.\n\nfloat32 min_range       # minimum\
        \ range value [m]\nfloat32 max_range       # maximum range value [m]\n     \
        \                   # Fixed distance rangers require min_range==max_range\n\n\
        float32 range           # range data [m]\n                        # (Note: values\
        \ < range_min or > range_max\n                        # should be discarded)\n\
        \                        # Fixed distance rangers only output -Inf or +Inf.\n\
        \                        # -Inf represents a detection within fixed distance.\n\
        \                        # (Detection too close to the sensor to quantify)\n\
        \                        # +Inf represents no detection within the fixed distance.\n\
        \                        # (Object out of range)"
      fields:
      - name: header
        type: std_msgs/Header
      - name: radiation_type
        type: uint8
      - name: field_of_view
        type: float32
      - name: min_range
        type: float32
      - name: max_range
        type: float32
      - name: range
        type: float32
      name: Range
      package: sensor_msgs
    - definition: "# This message is used to specify a region of interest within an\
        \ image.\n#\n# When used to specify the ROI setting of the camera when the image\
        \ was\n# taken, the height and width fields should either match the height and\n\
        # width fields for the associated image; or height = width = 0\n# indicates\
        \ that the full resolution image was captured.\n\nuint32 x_offset  # Leftmost\
        \ pixel of the ROI\n                 # (0 if the ROI includes the left edge\
        \ of the image)\nuint32 y_offset  # Topmost pixel of the ROI\n             \
        \    # (0 if the ROI includes the top edge of the image)\nuint32 height    #\
        \ Height of ROI\nuint32 width     # Width of ROI\n\n# True if a distinct rectified\
        \ ROI should be calculated from the \"raw\"\n# ROI in this message. Typically\
        \ this should be False if the full image\n# is captured (ROI not used), and\
        \ True if a subwindow is captured (ROI\n# used).\nbool do_rectify\n"
      fields:
      - name: x_offset
        type: uint32
      - name: y_offset
        type: uint32
      - name: height
        type: uint32
      - name: width
        type: uint32
      - name: do_rectify
        type: bool
      name: RegionOfInterest
      package: sensor_msgs
    - definition: " # Single reading from a relative humidity sensor.  Defines the ratio\
        \ of partial\n # pressure of water vapor to the saturated vapor pressure at\
        \ a temperature.\n\n Header header             # timestamp of the measurement\n\
        \                           # frame_id is the location of the humidity sensor\n\
        \n float64 relative_humidity # Expression of the relative humidity\n       \
        \                    # from 0.0 to 1.0.\n                           # 0.0 is\
        \ no partial pressure of water vapor\n                           # 1.0 represents\
        \ partial pressure of saturation\n\n float64 variance          # 0 is interpreted\
        \ as variance unknown"
      fields:
      - name: header
        type: std_msgs/Header
      - name: relative_humidity
        type: float64
      - name: variance
        type: float64
      name: RelativeHumidity
      package: sensor_msgs
    - definition: " # Single temperature reading.\n\n Header header           # timestamp\
        \ is the time the temperature was measured\n                         # frame_id\
        \ is the location of the temperature reading\n\n float64 temperature     # Measurement\
        \ of the Temperature in Degrees Celsius\n\n float64 variance        # 0 is interpreted\
        \ as variance unknown"
      fields:
      - name: header
        type: std_msgs/Header
      - name: temperature
        type: float64
      - name: variance
        type: float64
      name: Temperature
      package: sensor_msgs
    - definition: "# Measurement from an external time source not actively synchronized\
        \ with the system clock.\n\nHeader header    # stamp is system time for which\
        \ measurement was valid\n                 # frame_id is not used \n\ntime  \
        \ time_ref  # corresponding time from this external source\nstring source  \
        \  # (optional) name of time source\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: time_ref
        type: time
      - name: source
        type: string
      name: TimeReference
      package: sensor_msgs
    name: sensor_msgs
    path: /opt/ros/melodic/share/sensor_msgs
    services:
    - definition: "# This service requests that a camera stores the given CameraInfo\
        \ \n# as that camera's calibration information.\n#\n# The width and height in\
        \ the camera_info field should match what the\n# camera is currently outputting\
        \ on its camera_info topic, and the camera\n# will assume that the region of\
        \ the imager that is being referred to is\n# the region that the camera is currently\
        \ capturing.\n\nsensor_msgs/CameraInfo camera_info # The camera_info to store\n\
        ---\nbool success          # True if the call succeeded\nstring status_message\
        \ # Used to give details about success\n"
      name: SetCameraInfo
      package: sensor_msgs
      request:
        definition: "# This service requests that a camera stores the given CameraInfo\
          \ \n# as that camera's calibration information.\n#\n# The width and height\
          \ in the camera_info field should match what the\n# camera is currently outputting\
          \ on its camera_info topic, and the camera\n# will assume that the region\
          \ of the imager that is being referred to is\n# the region that the camera\
          \ is currently capturing.\n\nsensor_msgs/CameraInfo camera_info # The camera_info\
          \ to store"
        fields:
        - name: camera_info
          type: sensor_msgs/CameraInfo
        name: SetCameraInfoRequest
        package: sensor_msgs
      response:
        definition: 'bool success          # True if the call succeeded

          string status_message # Used to give details about success'
        fields:
        - name: success
          type: bool
        - name: status_message
          type: string
        name: SetCameraInfoResponse
        package: sensor_msgs
  - actions: []
    messages: []
    name: moveit_ros_robot_interaction
    path: /opt/ros/melodic/share/moveit_ros_robot_interaction
    services: []
  - actions: []
    messages: []
    name: rospy
    path: /opt/ros/melodic/share/rospy
    services: []
  - actions: []
    messages: []
    name: voxel_grid
    path: /opt/ros/melodic/share/voxel_grid
    services: []
  - actions: []
    messages: []
    name: python_qt_binding
    path: /opt/ros/melodic/share/python_qt_binding
    services: []
  sha256: 7fb8e3cc584e03ea17283f35033d256f9639070886cd5889a4efccda831fd704
  sources:
  - /opt/ros/melodic/setup.bash
  - /ros_ws/devel/setup.bash
