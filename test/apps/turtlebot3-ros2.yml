image: therobotcooperative/turtlebot3-ros2
sources:
- /opt/ros/dashing/setup.bash
- /ros_ws/install/setup.bash
description:
  packages:
  - actions: []
    messages:
    - definition: '# Goal ID

        unique_identifier_msgs/UUID goal_id


        # Time when the goal was accepted

        builtin_interfaces/Time stamp

        '
      fields:
      - name: goal_id
        type: unique_identifier_msgs/UUID
      - name: stamp
        type: builtin_interfaces/Time
      name: GoalInfo
      package: action_msgs
    - constants:
      - name: STATUS_UNKNOWN
        type: int8
        value: '0'
      - name: STATUS_ACCEPTED
        type: int8
        value: '1'
      - name: STATUS_EXECUTING
        type: int8
        value: '2'
      - name: STATUS_CANCELING
        type: int8
        value: '3'
      - name: STATUS_SUCCEEDED
        type: int8
        value: '4'
      - name: STATUS_CANCELED
        type: int8
        value: '5'
      - name: STATUS_ABORTED
        type: int8
        value: '6'
      - name: goal_inf
        type: GoalInfo
        value: o
      - name: statu
        type: int8
        value: s
      definition: '# An action goal can be in one of these states after it is accepted
        by an action server.

        # For more information, see http://design.ros2.org/articles/actions.html

        int8 STATUS_UNKNOWN   = 0

        int8 STATUS_ACCEPTED  = 1

        int8 STATUS_EXECUTING = 2

        int8 STATUS_CANCELING = 3

        int8 STATUS_SUCCEEDED = 4

        int8 STATUS_CANCELED  = 5

        int8 STATUS_ABORTED   = 6


        # Goal info (contains ID and timestamp)

        GoalInfo goal_info


        # Goal status

        int8 status

        '
      name: GoalStatus
      package: action_msgs
    - definition: '# An array of goal statuses

        GoalStatus[] status_list

        '
      fields:
      - name: status_list
        type: action_msgs/GoalStatus[]
      name: GoalStatusArray
      package: action_msgs
    name: action_msgs
    path: /opt/ros/dashing/share/action_msgs
    services:
    - definition: '# Cancel one or more goals with the following policy:

        #

        # - If the goal ID is zero and timestamp is zero, cancel all goals.

        # - If the goal ID is zero and timestamp is not zero, cancel all goals accepted

        #   at or before the timestamp.

        # - If the goal ID is not zero and timestamp is zero, cancel the goal with the

        #   given ID regardless of the time it was accepted.

        # - If the goal ID is not zero and timestamp is not zero, cancel the goal with

        #   the given ID and all goals accepted at or before the timestamp.


        # Goal info containing an ID and timestamp

        GoalInfo goal_info

        ---

        # Return codes

        # Indicates the request was accepted without any errors.

        # One or more goals have transitioned to the CANCELING state.

        # The goals_canceling list is not empty.

        int8 ERROR_NONE=0

        # Indicates the request was rejected.

        # No goals have transitioned to the CANCELING state.

        # The goals_canceling list is empty.

        int8 ERROR_REJECTED=1

        # Indicates the requested goal ID does not exist.

        # No goals have transitioned to the CANCELING state.

        # The goals_canceling list is empty.

        int8 ERROR_UNKNOWN_GOAL_ID=2

        # Indicates the goal is not cancelable because it is already in a terminal state.

        # No goals have transitioned to the CANCELING state.

        # The goals_canceling list is empty.

        int8 ERROR_GOAL_TERMINATED=3


        # Return code

        int8 return_code

        # Goals that accepted the cancel request

        GoalInfo[] goals_canceling

        '
      name: CancelGoal
      package: action_msgs
      request:
        constants:
        - name: goal_inf
          type: GoalInfo
          value: o
        definition: '# Cancel one or more goals with the following policy:

          #

          # - If the goal ID is zero and timestamp is zero, cancel all goals.

          # - If the goal ID is zero and timestamp is not zero, cancel all goals accepted

          #   at or before the timestamp.

          # - If the goal ID is not zero and timestamp is zero, cancel the goal with
          the

          #   given ID regardless of the time it was accepted.

          # - If the goal ID is not zero and timestamp is not zero, cancel the goal
          with

          #   the given ID and all goals accepted at or before the timestamp.


          # Goal info containing an ID and timestamp

          GoalInfo goal_info'
        name: CancelGoalRequest
        package: action_msgs
      response:
        constants:
        - name: ERROR_NONE
          type: int8
          value: '0'
        - name: ERROR_REJECTED
          type: int8
          value: '1'
        - name: ERROR_UNKNOWN_GOAL_ID
          type: int8
          value: '2'
        - name: ERROR_GOAL_TERMINATED
          type: int8
          value: '3'
        - name: return_cod
          type: int8
          value: e
        definition: '# Return codes

          # Indicates the request was accepted without any errors.

          # One or more goals have transitioned to the CANCELING state.

          # The goals_canceling list is not empty.

          int8 ERROR_NONE=0

          # Indicates the request was rejected.

          # No goals have transitioned to the CANCELING state.

          # The goals_canceling list is empty.

          int8 ERROR_REJECTED=1

          # Indicates the requested goal ID does not exist.

          # No goals have transitioned to the CANCELING state.

          # The goals_canceling list is empty.

          int8 ERROR_UNKNOWN_GOAL_ID=2

          # Indicates the goal is not cancelable because it is already in a terminal
          state.

          # No goals have transitioned to the CANCELING state.

          # The goals_canceling list is empty.

          int8 ERROR_GOAL_TERMINATED=3


          # Return code

          int8 return_code

          # Goals that accepted the cancel request

          GoalInfo[] goals_canceling'
        fields:
        - name: goals_canceling
          type: action_msgs/GoalInfo[]
        name: CancelGoalResponse
        package: action_msgs
  - actions: []
    messages:
    - constants:
      - name: i
        type: string
        value: d
      definition: '

        # The stamp should store the time at which this goal was requested.

        # It is used by an action server when it tries to preempt all

        # goals that were requested before a certain time

        builtin_interfaces/Time stamp


        # The id provides a way to associate feedback and

        # result message with specific goal requests. The id

        # specified must be unique.

        string id

        '
      fields:
      - name: stamp
        type: builtin_interfaces/Time
      name: GoalID
      package: actionlib_msgs
    - constants:
      - name: goal_i
        type: GoalID
        value: d
      - name: statu
        type: uint8
        value: s
      - name: PENDING
        type: uint8
        value: '0'
      - name: ACTIVE
        type: uint8
        value: '1'
      - name: PREEMPTED
        type: uint8
        value: '2'
      - name: SUCCEEDED
        type: uint8
        value: '3'
      - name: ABORTED
        type: uint8
        value: '4'
      - name: REJECTED
        type: uint8
        value: '5'
      - name: PREEMPTING
        type: uint8
        value: '6'
      - name: RECALLING
        type: uint8
        value: '7'
      - name: RECALLED
        type: uint8
        value: '8'
      - name: LOST
        type: uint8
        value: '9'
      - name: tex
        type: string
        value: t
      definition: "GoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal\
        \ has yet to be processed by the action server.\nuint8 ACTIVE          = 1 \
        \  # The goal is currently being processed by the action server.\nuint8 PREEMPTED\
        \       = 2   # The goal received a cancel request after it started executing\n\
        \                            #   and has since completed its execution (Terminal\
        \ State).\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully\
        \ by the action server\n                            #   (Terminal State).\n\
        uint8 ABORTED         = 4   # The goal was aborted during execution by the action\
        \ server due\n                            #    to some failure (Terminal State).\n\
        uint8 REJECTED        = 5   # The goal was rejected by the action server without\
        \ being processed,\n                            #    because the goal was unattainable\
        \ or invalid (Terminal State).\nuint8 PREEMPTING      = 6   # The goal received\
        \ a cancel request after it started executing\n                            #\
        \    and has not yet completed execution.\nuint8 RECALLING       = 7   # The\
        \ goal received a cancel request before it started executing, but\n        \
        \                    #    the action server has not yet confirmed that the goal\
        \ is canceled.\nuint8 RECALLED        = 8   # The goal received a cancel request\
        \ before it started executing\n                            #    and was successfully\
        \ cancelled (Terminal State).\nuint8 LOST            = 9   # An action client\
        \ can determine that a goal is LOST. This should not\n                     \
        \       #    be sent over the wire by an action server.\n\n# Allow for the user\
        \ to associate a string with GoalStatus for debugging.\nstring text\n"
      name: GoalStatus
      package: actionlib_msgs
    - definition: '# Stores the statuses for goals that are currently being tracked

        # by an action server

        std_msgs/Header header

        GoalStatus[] status_list

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status_list
        type: actionlib_msgs/GoalStatus[]
      name: GoalStatusArray
      package: actionlib_msgs
    name: actionlib_msgs
    path: /opt/ros/dashing/share/actionlib_msgs
    services: []
  - actions: []
    messages: []
    name: ament_cmake
    path: /opt/ros/dashing/share/ament_cmake
    services: []
  - actions: []
    messages: []
    name: ament_cmake_auto
    path: /opt/ros/dashing/share/ament_cmake_auto
    services: []
  - actions: []
    messages: []
    name: ament_cmake_copyright
    path: /opt/ros/dashing/share/ament_cmake_copyright
    services: []
  - actions: []
    messages: []
    name: ament_cmake_core
    path: /opt/ros/dashing/share/ament_cmake_core
    services: []
  - actions: []
    messages: []
    name: ament_cmake_cppcheck
    path: /opt/ros/dashing/share/ament_cmake_cppcheck
    services: []
  - actions: []
    messages: []
    name: ament_cmake_cpplint
    path: /opt/ros/dashing/share/ament_cmake_cpplint
    services: []
  - actions: []
    messages: []
    name: ament_cmake_export_definitions
    path: /opt/ros/dashing/share/ament_cmake_export_definitions
    services: []
  - actions: []
    messages: []
    name: ament_cmake_export_dependencies
    path: /opt/ros/dashing/share/ament_cmake_export_dependencies
    services: []
  - actions: []
    messages: []
    name: ament_cmake_export_include_directories
    path: /opt/ros/dashing/share/ament_cmake_export_include_directories
    services: []
  - actions: []
    messages: []
    name: ament_cmake_export_interfaces
    path: /opt/ros/dashing/share/ament_cmake_export_interfaces
    services: []
  - actions: []
    messages: []
    name: ament_cmake_export_libraries
    path: /opt/ros/dashing/share/ament_cmake_export_libraries
    services: []
  - actions: []
    messages: []
    name: ament_cmake_export_link_flags
    path: /opt/ros/dashing/share/ament_cmake_export_link_flags
    services: []
  - actions: []
    messages: []
    name: ament_cmake_flake8
    path: /opt/ros/dashing/share/ament_cmake_flake8
    services: []
  - actions: []
    messages: []
    name: ament_cmake_gmock
    path: /opt/ros/dashing/share/ament_cmake_gmock
    services: []
  - actions: []
    messages: []
    name: ament_cmake_gtest
    path: /opt/ros/dashing/share/ament_cmake_gtest
    services: []
  - actions: []
    messages: []
    name: ament_cmake_include_directories
    path: /opt/ros/dashing/share/ament_cmake_include_directories
    services: []
  - actions: []
    messages: []
    name: ament_cmake_libraries
    path: /opt/ros/dashing/share/ament_cmake_libraries
    services: []
  - actions: []
    messages: []
    name: ament_cmake_lint_cmake
    path: /opt/ros/dashing/share/ament_cmake_lint_cmake
    services: []
  - actions: []
    messages: []
    name: ament_cmake_pep257
    path: /opt/ros/dashing/share/ament_cmake_pep257
    services: []
  - actions: []
    messages: []
    name: ament_cmake_pytest
    path: /opt/ros/dashing/share/ament_cmake_pytest
    services: []
  - actions: []
    messages: []
    name: ament_cmake_python
    path: /opt/ros/dashing/share/ament_cmake_python
    services: []
  - actions: []
    messages: []
    name: ament_cmake_ros
    path: /opt/ros/dashing/share/ament_cmake_ros
    services: []
  - actions: []
    messages: []
    name: ament_cmake_target_dependencies
    path: /opt/ros/dashing/share/ament_cmake_target_dependencies
    services: []
  - actions: []
    messages: []
    name: ament_cmake_test
    path: /opt/ros/dashing/share/ament_cmake_test
    services: []
  - actions: []
    messages: []
    name: ament_cmake_uncrustify
    path: /opt/ros/dashing/share/ament_cmake_uncrustify
    services: []
  - actions: []
    messages: []
    name: ament_cmake_xmllint
    path: /opt/ros/dashing/share/ament_cmake_xmllint
    services: []
  - actions: []
    messages: []
    name: ament_copyright
    path: /opt/ros/dashing/share/ament_copyright
    services: []
  - actions: []
    messages: []
    name: ament_cppcheck
    path: /opt/ros/dashing/share/ament_cppcheck
    services: []
  - actions: []
    messages: []
    name: ament_cpplint
    path: /opt/ros/dashing/share/ament_cpplint
    services: []
  - actions: []
    messages: []
    name: ament_flake8
    path: /opt/ros/dashing/share/ament_flake8
    services: []
  - actions: []
    messages: []
    name: ament_index_cpp
    path: /opt/ros/dashing/share/ament_index_cpp
    services: []
  - actions: []
    messages: []
    name: ament_index_python
    path: /opt/ros/dashing/share/ament_index_python
    services: []
  - actions: []
    messages: []
    name: ament_lint
    path: /opt/ros/dashing/share/ament_lint
    services: []
  - actions: []
    messages: []
    name: ament_lint_auto
    path: /opt/ros/dashing/share/ament_lint_auto
    services: []
  - actions: []
    messages: []
    name: ament_lint_cmake
    path: /opt/ros/dashing/share/ament_lint_cmake
    services: []
  - actions: []
    messages: []
    name: ament_lint_common
    path: /opt/ros/dashing/share/ament_lint_common
    services: []
  - actions: []
    messages: []
    name: ament_package
    path: /opt/ros/dashing/share/ament_package
    services: []
  - actions: []
    messages: []
    name: ament_pep257
    path: /opt/ros/dashing/share/ament_pep257
    services: []
  - actions: []
    messages: []
    name: ament_uncrustify
    path: /opt/ros/dashing/share/ament_uncrustify
    services: []
  - actions: []
    messages: []
    name: ament_xmllint
    path: /opt/ros/dashing/share/ament_xmllint
    services: []
  - actions: []
    messages:
    - constants:
      - name: se
        type: int32
        value: c
      - name: nanose
        type: uint32
        value: c
      definition: 'int32 sec

        uint32 nanosec

        '
      name: Duration
      package: builtin_interfaces
    - constants:
      - name: se
        type: int32
        value: c
      - name: nanose
        type: uint32
        value: c
      definition: 'int32 sec

        uint32 nanosec

        '
      name: Time
      package: builtin_interfaces
    name: builtin_interfaces
    path: /opt/ros/dashing/share/builtin_interfaces
    services: []
  - actions: []
    messages: []
    name: class_loader
    path: /opt/ros/dashing/share/class_loader
    services: []
  - actions: []
    messages: []
    name: common_interfaces
    path: /opt/ros/dashing/share/common_interfaces
    services: []
  - actions: []
    messages: []
    name: composition_interfaces
    path: /opt/ros/dashing/share/composition_interfaces
    services:
    - definition: '---

        # List of full node names including namespace

        string[] full_node_names

        # corresponding unique ids (must have same length as full_node_names)

        uint64[] unique_ids'
      name: ListNodes
      package: composition_interfaces
      response:
        definition: '# List of full node names including namespace

          string[] full_node_names

          # corresponding unique ids (must have same length as full_node_names)

          uint64[] unique_ids'
        fields:
        - name: full_node_names
          type: string[]
        - name: unique_ids
          type: uint64[]
        name: ListNodesResponse
        package: composition_interfaces
    - definition: '# A ROS package the composable node can be found in

        string package_name

        # a plugin within that package

        string plugin_name


        # Name the composable node should use, or empty to use the node''s default name

        string node_name

        # Namespace the composable node should use, or empty to use the node''s default
        namespace

        string node_namespace

        # Values from message rcl_interfaces/Log

        uint8 log_level

        # Remap rules

        # TODO(sloretz) rcl_interfaces message for remap rules?

        string[] remap_rules

        # Parameters to set

        rcl_interfaces/Parameter[] parameters


        # key/value arguments that are specific to a type of container process

        rcl_interfaces/Parameter[] extra_arguments

        ---

        # True if the node was successfully loaded

        bool success

        # Human readable error message if success is false, else empty string

        string error_message

        # Name of the loaded composable node (including namespace)

        string full_node_name

        # A unique identifier for the loaded node

        uint64 unique_id

        '
      name: LoadNode
      package: composition_interfaces
      request:
        constants:
        - name: package_nam
          type: string
          value: e
        - name: plugin_nam
          type: string
          value: e
        - name: node_nam
          type: string
          value: e
        - name: node_namespac
          type: string
          value: e
        - name: log_leve
          type: uint8
          value: l
        definition: '# A ROS package the composable node can be found in

          string package_name

          # a plugin within that package

          string plugin_name


          # Name the composable node should use, or empty to use the node''s default
          name

          string node_name

          # Namespace the composable node should use, or empty to use the node''s default
          namespace

          string node_namespace

          # Values from message rcl_interfaces/Log

          uint8 log_level

          # Remap rules

          # TODO(sloretz) rcl_interfaces message for remap rules?

          string[] remap_rules

          # Parameters to set

          rcl_interfaces/Parameter[] parameters


          # key/value arguments that are specific to a type of container process

          rcl_interfaces/Parameter[] extra_arguments'
        fields:
        - name: remap_rules
          type: string[]
        - name: parameters
          type: rcl_interfaces/Parameter[]
        - name: extra_arguments
          type: rcl_interfaces/Parameter[]
        name: LoadNodeRequest
        package: composition_interfaces
      response:
        constants:
        - name: succes
          type: bool
          value: s
        - name: error_messag
          type: string
          value: e
        - name: full_node_nam
          type: string
          value: e
        - name: unique_i
          type: uint64
          value: d
        definition: '# True if the node was successfully loaded

          bool success

          # Human readable error message if success is false, else empty string

          string error_message

          # Name of the loaded composable node (including namespace)

          string full_node_name

          # A unique identifier for the loaded node

          uint64 unique_id'
        name: LoadNodeResponse
        package: composition_interfaces
    - definition: '# Container specific unique id of a loaded node

        uint64 unique_id

        ---

        # True if the node existed and was unloaded

        bool success

        # Human readable error message if success is false, else empty string

        string error_message

        '
      name: UnloadNode
      package: composition_interfaces
      request:
        constants:
        - name: unique_i
          type: uint64
          value: d
        definition: '# Container specific unique id of a loaded node

          uint64 unique_id'
        name: UnloadNodeRequest
        package: composition_interfaces
      response:
        constants:
        - name: succes
          type: bool
          value: s
        - name: error_messag
          type: string
          value: e
        definition: '# True if the node existed and was unloaded

          bool success

          # Human readable error message if success is false, else empty string

          string error_message'
        name: UnloadNodeResponse
        package: composition_interfaces
  - actions: []
    messages: []
    name: console_bridge_vendor
    path: /opt/ros/dashing/share/console_bridge_vendor
    services: []
  - actions: []
    messages:
    - definition: '# This message is used to send diagnostic information about the state
        of the robot.

        std_msgs/Header header # for timestamp

        DiagnosticStatus[] status # an array of components being reported on

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: status
        type: diagnostic_msgs/DiagnosticStatus[]
      name: DiagnosticArray
      package: diagnostic_msgs
    - constants:
      - name: OK
        type: byte
        value: '0'
      - name: WARN
        type: byte
        value: '1'
      - name: ERROR
        type: byte
        value: '2'
      - name: STALE
        type: byte
        value: '3'
      - name: leve
        type: byte
        value: l
      - name: nam
        type: string
        value: e
      - name: messag
        type: string
        value: e
      - name: hardware_i
        type: string
        value: d
      definition: '# This message holds the status of an individual component of the
        robot.


        # Possible levels of operations.

        byte OK=0

        byte WARN=1

        byte ERROR=2

        byte STALE=3


        # Level of operation enumerated above.

        byte level

        # A description of the test/component reporting.

        string name

        # A description of the status.

        string message

        # A hardware unique string.

        string hardware_id

        # An array of values associated with the status.

        KeyValue[] values


        '
      fields:
      - name: values
        type: diagnostic_msgs/KeyValue[]
      name: DiagnosticStatus
      package: diagnostic_msgs
    - constants:
      - name: ke
        type: string
        value: y
      - name: valu
        type: string
        value: e
      definition: '

        # What to label this value when viewing.

        string key

        # A value to track over time.

        string value

        '
      name: KeyValue
      package: diagnostic_msgs
    name: diagnostic_msgs
    path: /opt/ros/dashing/share/diagnostic_msgs
    services:
    - definition: '# This service is used as part of the process for loading analyzers
        at runtime,

        # and should be used by a loader script or program, not as a standalone service.

        # Information about dynamic addition of analyzers can be found at

        # http://wiki.ros.org/diagnostics/Tutorials/Adding%20Analyzers%20at%20Runtime


        # The load_namespace parameter defines the namespace where parameters for the

        # initialization of analyzers in the diagnostic aggregator have been loaded.
        The

        # value should be a global name (i.e. /my/name/space), not a relative

        # (my/name/space) or private (~my/name/space) name. Analyzers will not be added

        # if a non-global name is used. The call will also fail if the namespace

        # contains parameters that follow a namespace structure that does not conform
        to

        # that expected by the analyzer definitions. See

        # http://wiki.ros.org/diagnostics/Tutorials/Configuring%20Diagnostic%20Aggregators

        # and http://wiki.ros.org/diagnostics/Tutorials/Using%20the%20GenericAnalyzer

        # for examples of the structure of yaml files which are expected to have been

        # loaded into the namespace.

        string load_namespace

        ---


        # True if diagnostic aggregator was updated with new diagnostics, False

        # otherwise. A false return value means that either there is a bond in the

        # aggregator which already used the requested namespace, or the initialization

        # of analyzers failed.

        bool success


        # Message with additional information about the success or failure

        string message

        '
      name: AddDiagnostics
      package: diagnostic_msgs
      request:
        constants:
        - name: load_namespac
          type: string
          value: e
        definition: '# This service is used as part of the process for loading analyzers
          at runtime,

          # and should be used by a loader script or program, not as a standalone service.

          # Information about dynamic addition of analyzers can be found at

          # http://wiki.ros.org/diagnostics/Tutorials/Adding%20Analyzers%20at%20Runtime


          # The load_namespace parameter defines the namespace where parameters for
          the

          # initialization of analyzers in the diagnostic aggregator have been loaded.
          The

          # value should be a global name (i.e. /my/name/space), not a relative

          # (my/name/space) or private (~my/name/space) name. Analyzers will not be
          added

          # if a non-global name is used. The call will also fail if the namespace

          # contains parameters that follow a namespace structure that does not conform
          to

          # that expected by the analyzer definitions. See

          # http://wiki.ros.org/diagnostics/Tutorials/Configuring%20Diagnostic%20Aggregators

          # and http://wiki.ros.org/diagnostics/Tutorials/Using%20the%20GenericAnalyzer

          # for examples of the structure of yaml files which are expected to have been

          # loaded into the namespace.

          string load_namespace'
        name: AddDiagnosticsRequest
        package: diagnostic_msgs
      response:
        constants:
        - name: succes
          type: bool
          value: s
        - name: messag
          type: string
          value: e
        definition: '# True if diagnostic aggregator was updated with new diagnostics,
          False

          # otherwise. A false return value means that either there is a bond in the

          # aggregator which already used the requested namespace, or the initialization

          # of analyzers failed.

          bool success


          # Message with additional information about the success or failure

          string message'
        name: AddDiagnosticsResponse
        package: diagnostic_msgs
    - definition: '---

        string id

        byte passed

        DiagnosticStatus[] status

        '
      name: SelfTest
      package: diagnostic_msgs
      response:
        constants:
        - name: i
          type: string
          value: d
        - name: passe
          type: byte
          value: d
        definition: 'string id

          byte passed

          DiagnosticStatus[] status'
        fields:
        - name: status
          type: diagnostic_msgs/DiagnosticStatus[]
        name: SelfTestResponse
        package: diagnostic_msgs
  - actions: []
    messages: []
    name: eigen3_cmake_module
    path: /opt/ros/dashing/share/eigen3_cmake_module
    services: []
  - actions: []
    messages: []
    name: fastrtps_cmake_module
    path: /opt/ros/dashing/share/fastrtps_cmake_module
    services: []
  - actions: []
    messages:
    - constants:
      - name: linea
        type: Vector3
        value: r
      - name: angula
        type: Vector3
        value: r
      definition: '# This expresses acceleration in free space broken into its linear
        and angular parts.

        Vector3  linear

        Vector3  angular

        '
      name: Accel
      package: geometry_msgs
    - constants:
      - name: acce
        type: Accel
        value: l
      definition: '# An accel with reference coordinate frame and timestamp

        std_msgs/Header header

        Accel accel

        '
      fields:
      - name: header
        type: std_msgs/Header
      name: AccelStamped
      package: geometry_msgs
    - constants:
      - name: acce
        type: Accel
        value: l
      definition: '# This expresses acceleration in free space with uncertainty.


        Accel accel


        # Row-major representation of the 6x6 covariance matrix

        # The orientation parameters use a fixed-axis representation.

        # In order, the parameters are:

        # (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)

        float64[36] covariance

        '
      fields:
      - name: covariance
        type: float64[36]
      name: AccelWithCovariance
      package: geometry_msgs
    - constants:
      - name: acce
        type: AccelWithCovariance
        value: l
      definition: '# This represents an estimated accel with reference coordinate frame
        and timestamp.

        std_msgs/Header header

        AccelWithCovariance accel

        '
      fields:
      - name: header
        type: std_msgs/Header
      name: AccelWithCovarianceStamped
      package: geometry_msgs
    - constants:
      - name: ix
        type: float64
        value: x
      - name: ix
        type: float64
        value: y
      - name: ix
        type: float64
        value: z
      - name: iy
        type: float64
        value: y
      - name: iy
        type: float64
        value: z
      - name: iz
        type: float64
        value: z
      definition: '

        # Mass [kg]

        float64 m


        # Center of mass [m]

        geometry_msgs/Vector3 com


        # Inertia Tensor [kg-m^2]

        #     | ixx ixy ixz |

        # I = | ixy iyy iyz |

        #     | ixz iyz izz |

        float64 ixx

        float64 ixy

        float64 ixz

        float64 iyy

        float64 iyz

        float64 izz

        '
      fields:
      - name: m
        type: float64
      - name: com
        type: geometry_msgs/Vector3
      name: Inertia
      package: geometry_msgs
    - constants:
      - name: inerti
        type: Inertia
        value: a
      definition: 'std_msgs/Header header

        Inertia inertia

        '
      fields:
      - name: header
        type: std_msgs/Header
      name: InertiaStamped
      package: geometry_msgs
    - definition: '# This contains the position of a point in free space

        float64 x

        float64 y

        float64 z

        '
      fields:
      - name: x
        type: float64
      - name: y
        type: float64
      - name: z
        type: float64
      name: Point
      package: geometry_msgs
    - definition: '# This contains the position of a point in free space(with 32 bits
        of precision).

        # It is recommeded to use Point wherever possible instead of Point32.

        #

        # This recommendation is to promote interoperability.

        #

        # This message is designed to take up less space when sending

        # lots of points at once, as in the case of a PointCloud.


        float32 x

        float32 y

        float32 z'
      fields:
      - name: x
        type: float32
      - name: y
        type: float32
      - name: z
        type: float32
      name: Point32
      package: geometry_msgs
    - constants:
      - name: poin
        type: Point
        value: t
      definition: '# This represents a Point with reference coordinate frame and timestamp


        std_msgs/Header header

        Point point

        '
      fields:
      - name: header
        type: std_msgs/Header
      name: PointStamped
      package: geometry_msgs
    - definition: '# A specification of a polygon where the first and last points are
        assumed to be connected


        Point32[] points

        '
      fields:
      - name: points
        type: geometry_msgs/Point32[]
      name: Polygon
      package: geometry_msgs
    - constants:
      - name: polygo
        type: Polygon
        value: n
      definition: '# This represents a Polygon with reference coordinate frame and timestamp


        std_msgs/Header header

        Polygon polygon

        '
      fields:
      - name: header
        type: std_msgs/Header
      name: PolygonStamped
      package: geometry_msgs
    - constants:
      - name: positio
        type: Point
        value: n
      - name: orientatio
        type: Quaternion
        value: n
      definition: '# A representation of pose in free space, composed of postion and
        orientation.


        Point position

        Quaternion orientation

        '
      name: Pose
      package: geometry_msgs
    - constants:
      - name: thet
        type: float64
        value: a
      definition: '# This expresses a position and orientation on a 2D manifold.


        float64 x

        float64 y

        float64 theta

        '
      fields:
      - name: x
        type: float64
      - name: y
        type: float64
      name: Pose2D
      package: geometry_msgs
    - definition: '# An array of poses with a header for global reference.


        std_msgs/Header header


        Pose[] poses

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: poses
        type: geometry_msgs/Pose[]
      name: PoseArray
      package: geometry_msgs
    - constants:
      - name: pos
        type: Pose
        value: e
      definition: '# A Pose with reference coordinate frame and timestamp


        std_msgs/Header header

        Pose pose

        '
      fields:
      - name: header
        type: std_msgs/Header
      name: PoseStamped
      package: geometry_msgs
    - constants:
      - name: pos
        type: Pose
        value: e
      definition: '# This represents a pose in free space with uncertainty.


        Pose pose


        # Row-major representation of the 6x6 covariance matrix

        # The orientation parameters use a fixed-axis representation.

        # In order, the parameters are:

        # (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)

        float64[36] covariance

        '
      fields:
      - name: covariance
        type: float64[36]
      name: PoseWithCovariance
      package: geometry_msgs
    - constants:
      - name: pos
        type: PoseWithCovariance
        value: e
      definition: '# This expresses an estimated pose with a reference coordinate frame
        and timestamp


        std_msgs/Header header

        PoseWithCovariance pose

        '
      fields:
      - name: header
        type: std_msgs/Header
      name: PoseWithCovarianceStamped
      package: geometry_msgs
    - definition: '# This represents an orientation in free space in quaternion form.


        float64 x

        float64 y

        float64 z

        float64 w

        '
      fields:
      - name: x
        type: float64
      - name: y
        type: float64
      - name: z
        type: float64
      - name: w
        type: float64
      name: Quaternion
      package: geometry_msgs
    - constants:
      - name: quaternio
        type: Quaternion
        value: n
      definition: '# This represents an orientation with reference coordinate frame
        and timestamp.


        std_msgs/Header header

        Quaternion quaternion

        '
      fields:
      - name: header
        type: std_msgs/Header
      name: QuaternionStamped
      package: geometry_msgs
    - constants:
      - name: translatio
        type: Vector3
        value: n
      - name: rotatio
        type: Quaternion
        value: n
      definition: '# This represents the transform between two coordinate frames in
        free space.


        Vector3 translation

        Quaternion rotation

        '
      name: Transform
      package: geometry_msgs
    - constants:
      - name: child_frame_id
        type: string
        value: '#'
      - name: transfor
        type: Transform
        value: m
      definition: '# This expresses a transform from coordinate frame header.frame_id

        # to the coordinate frame child_frame_id

        #

        # This message is mostly used by the

        # <a href="http://www.ros.org/wiki/tf">tf</a> package.

        # See its documentation for more information.


        std_msgs/Header header

        string child_frame_id # the frame id of the child frame

        Transform transform

        '
      fields:
      - name: header
        type: std_msgs/Header
      name: TransformStamped
      package: geometry_msgs
    - constants:
      - name: linea
        type: Vector3
        value: r
      - name: angula
        type: Vector3
        value: r
      definition: '# This expresses velocity in free space broken into its linear and
        angular parts.


        Vector3  linear

        Vector3  angular

        '
      name: Twist
      package: geometry_msgs
    - constants:
      - name: twis
        type: Twist
        value: t
      definition: '# A twist with reference coordinate frame and timestamp


        std_msgs/Header header

        Twist twist

        '
      fields:
      - name: header
        type: std_msgs/Header
      name: TwistStamped
      package: geometry_msgs
    - constants:
      - name: twis
        type: Twist
        value: t
      definition: '# This expresses velocity in free space with uncertainty.


        Twist twist


        # Row-major representation of the 6x6 covariance matrix

        # The orientation parameters use a fixed-axis representation.

        # In order, the parameters are:

        # (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)

        float64[36] covariance

        '
      fields:
      - name: covariance
        type: float64[36]
      name: TwistWithCovariance
      package: geometry_msgs
    - constants:
      - name: twis
        type: TwistWithCovariance
        value: t
      definition: '# This represents an estimated twist with reference coordinate frame
        and timestamp.


        std_msgs/Header header

        TwistWithCovariance twist

        '
      fields:
      - name: header
        type: std_msgs/Header
      name: TwistWithCovarianceStamped
      package: geometry_msgs
    - definition: '# This represents a vector in free space.


        float64 x

        float64 y

        float64 z

        '
      fields:
      - name: x
        type: float64
      - name: y
        type: float64
      - name: z
        type: float64
      name: Vector3
      package: geometry_msgs
    - constants:
      - name: vecto
        type: Vector3
        value: r
      definition: '# This represents a Vector3 with reference coordinate frame and timestamp


        std_msgs/Header header

        Vector3 vector

        '
      fields:
      - name: header
        type: std_msgs/Header
      name: Vector3Stamped
      package: geometry_msgs
    - constants:
      - name: forc
        type: Vector3
        value: e
      - name: torqu
        type: Vector3
        value: e
      definition: '# This represents force in free space, separated into its linear
        and angular parts.


        Vector3  force

        Vector3  torque

        '
      name: Wrench
      package: geometry_msgs
    - constants:
      - name: wrenc
        type: Wrench
        value: h
      definition: '# A wrench with reference coordinate frame and timestamp


        std_msgs/Header header

        Wrench wrench

        '
      fields:
      - name: header
        type: std_msgs/Header
      name: WrenchStamped
      package: geometry_msgs
    name: geometry_msgs
    path: /opt/ros/dashing/share/geometry_msgs
    services: []
  - actions: []
    messages: []
    name: kdl_parser
    path: /opt/ros/dashing/share/kdl_parser
    services: []
  - actions: []
    messages: []
    name: launch
    path: /opt/ros/dashing/share/launch
    services: []
  - actions: []
    messages: []
    name: launch_ros
    path: /opt/ros/dashing/share/launch_ros
    services: []
  - actions: []
    messages: []
    name: libyaml_vendor
    path: /opt/ros/dashing/share/libyaml_vendor
    services: []
  - actions: []
    messages:
    - constants:
      - name: PRIMARY_STATE_UNKNOWN
        type: uint8
        value: '0'
      - name: PRIMARY_STATE_UNCONFIGURED
        type: uint8
        value: '1'
      - name: PRIMARY_STATE_INACTIVE
        type: uint8
        value: '2'
      - name: PRIMARY_STATE_ACTIVE
        type: uint8
        value: '3'
      - name: PRIMARY_STATE_FINALIZED
        type: uint8
        value: '4'
      - name: TRANSITION_STATE_CONFIGURING
        type: uint8
        value: '10'
      - name: TRANSITION_STATE_CLEANINGUP
        type: uint8
        value: '11'
      - name: TRANSITION_STATE_SHUTTINGDOWN
        type: uint8
        value: '12'
      - name: TRANSITION_STATE_ACTIVATING
        type: uint8
        value: '13'
      - name: TRANSITION_STATE_DEACTIVATING
        type: uint8
        value: '14'
      - name: TRANSITION_STATE_ERRORPROCESSING
        type: uint8
        value: '15'
      - name: i
        type: uint8
        value: d
      - name: labe
        type: string
        value: l
      definition: '# Primary state definitions

        # as depicted in

        # http://design.ros2.org/articles/node_lifecycle.html


        # These are the primary states

        # State changes can only be requested

        # when the node is in one of these states.

        uint8 PRIMARY_STATE_UNKNOWN = 0

        uint8 PRIMARY_STATE_UNCONFIGURED = 1

        uint8 PRIMARY_STATE_INACTIVE = 2

        uint8 PRIMARY_STATE_ACTIVE = 3

        uint8 PRIMARY_STATE_FINALIZED = 4


        # Temporary intermediate states

        # When a transition is requested, the

        # node changes its state into one

        # of these states.

        uint8 TRANSITION_STATE_CONFIGURING = 10

        uint8 TRANSITION_STATE_CLEANINGUP = 11

        uint8 TRANSITION_STATE_SHUTTINGDOWN = 12

        uint8 TRANSITION_STATE_ACTIVATING = 13

        uint8 TRANSITION_STATE_DEACTIVATING = 14

        uint8 TRANSITION_STATE_ERRORPROCESSING = 15


        uint8 id

        string label

        '
      name: State
      package: lifecycle_msgs
    - constants:
      - name: TRANSITION_CREATE
        type: uint8
        value: '0'
      - name: TRANSITION_CONFIGURE
        type: uint8
        value: '1'
      - name: TRANSITION_CLEANUP
        type: uint8
        value: '2'
      - name: TRANSITION_ACTIVATE
        type: uint8
        value: '3'
      - name: TRANSITION_DEACTIVATE
        type: uint8
        value: '4'
      - name: TRANSITION_UNCONFIGURED_SHUTDOWN
        type: uint8
        value: '5'
      - name: TRANSITION_INACTIVE_SHUTDOWN
        type: uint8
        value: '6'
      - name: TRANSITION_ACTIVE_SHUTDOWN
        type: uint8
        value: '7'
      - name: TRANSITION_DESTROY
        type: uint8
        value: '8'
      - name: TRANSITION_ON_CONFIGURE_SUCCESS
        type: uint8
        value: '10'
      - name: TRANSITION_ON_CONFIGURE_FAILURE
        type: uint8
        value: '11'
      - name: TRANSITION_ON_CONFIGURE_ERROR
        type: uint8
        value: '12'
      - name: TRANSITION_ON_CLEANUP_SUCCESS
        type: uint8
        value: '20'
      - name: TRANSITION_ON_CLEANUP_FAILURE
        type: uint8
        value: '21'
      - name: TRANSITION_ON_CLEANUP_ERROR
        type: uint8
        value: '22'
      - name: TRANSITION_ON_ACTIVATE_SUCCESS
        type: uint8
        value: '30'
      - name: TRANSITION_ON_ACTIVATE_FAILURE
        type: uint8
        value: '31'
      - name: TRANSITION_ON_ACTIVATE_ERROR
        type: uint8
        value: '32'
      - name: TRANSITION_ON_DEACTIVATE_SUCCESS
        type: uint8
        value: '40'
      - name: TRANSITION_ON_DEACTIVATE_FAILURE
        type: uint8
        value: '41'
      - name: TRANSITION_ON_DEACTIVATE_ERROR
        type: uint8
        value: '42'
      - name: TRANSITION_ON_SHUTDOWN_SUCCESS
        type: uint8
        value: '50'
      - name: TRANSITION_ON_SHUTDOWN_FAILURE
        type: uint8
        value: '51'
      - name: TRANSITION_ON_SHUTDOWN_ERROR
        type: uint8
        value: '52'
      - name: TRANSITION_ON_ERROR_SUCCESS
        type: uint8
        value: '60'
      - name: TRANSITION_ON_ERROR_FAILURE
        type: uint8
        value: '61'
      - name: TRANSITION_ON_ERROR_ERROR
        type: uint8
        value: '62'
      - name: TRANSITION_CALLBACK_SUCCESS
        type: uint8
        value: '97'
      - name: TRANSITION_CALLBACK_FAILURE
        type: uint8
        value: '98'
      - name: TRANSITION_CALLBACK_ERROR
        type: uint8
        value: '99'
      - name: i
        type: uint8
        value: d
      - name: labe
        type: string
        value: l
      definition: '# Default values for transitions

        # as described on

        # http://design.ros2.org/articles/node_lifecycle.html


        # Externally available transitions.

        # When a node is in one of these primary states,

        # these transitions can be invoked.

        uint8 TRANSITION_CREATE = 0

        uint8 TRANSITION_CONFIGURE = 1

        uint8 TRANSITION_CLEANUP = 2

        uint8 TRANSITION_ACTIVATE = 3

        uint8 TRANSITION_DEACTIVATE = 4

        uint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5

        uint8 TRANSITION_INACTIVE_SHUTDOWN = 6

        uint8 TRANSITION_ACTIVE_SHUTDOWN = 7

        uint8 TRANSITION_DESTROY = 8


        # These transitions are not publically

        # available and cannot be invoked by a user.

        # The following transitions are implicitly

        # invoked based on the callback feedback

        # of the intermediate transition states.

        uint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10

        uint8 TRANSITION_ON_CONFIGURE_FAILURE = 11

        uint8 TRANSITION_ON_CONFIGURE_ERROR = 12


        uint8 TRANSITION_ON_CLEANUP_SUCCESS = 20

        uint8 TRANSITION_ON_CLEANUP_FAILURE = 21

        uint8 TRANSITION_ON_CLEANUP_ERROR = 22


        uint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30

        uint8 TRANSITION_ON_ACTIVATE_FAILURE = 31

        uint8 TRANSITION_ON_ACTIVATE_ERROR = 32


        uint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40

        uint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41

        uint8 TRANSITION_ON_DEACTIVATE_ERROR = 42


        uint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50

        uint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51

        uint8 TRANSITION_ON_SHUTDOWN_ERROR = 52


        uint8 TRANSITION_ON_ERROR_SUCCESS = 60

        uint8 TRANSITION_ON_ERROR_FAILURE = 61

        uint8 TRANSITION_ON_ERROR_ERROR = 62


        # These return values ought to be set

        # as a return value for each callback.

        # Depending on which return value,

        # the transition will be executed correctly

        # or fallback/error callbacks will be triggered.

        uint8 TRANSITION_CALLBACK_SUCCESS = 97

        uint8 TRANSITION_CALLBACK_FAILURE = 98

        uint8 TRANSITION_CALLBACK_ERROR = 99


        uint8 id

        string label

        '
      name: Transition
      package: lifecycle_msgs
    - constants:
      - name: transitio
        type: Transition
        value: n
      - name: start_stat
        type: State
        value: e
      - name: goal_stat
        type: State
        value: e
      definition: 'Transition transition

        State start_state

        State goal_state

        '
      name: TransitionDescription
      package: lifecycle_msgs
    - constants:
      - name: timestam
        type: uint64
        value: p
      - name: transitio
        type: Transition
        value: n
      - name: start_stat
        type: State
        value: e
      - name: goal_stat
        type: State
        value: e
      definition: 'uint64 timestamp

        Transition transition

        State start_state

        State goal_state

        '
      name: TransitionEvent
      package: lifecycle_msgs
    name: lifecycle_msgs
    path: /opt/ros/dashing/share/lifecycle_msgs
    services:
    - definition: 'Transition transition

        ---

        bool success

        '
      name: ChangeState
      package: lifecycle_msgs
      request:
        constants:
        - name: transitio
          type: Transition
          value: n
        definition: Transition transition
        name: ChangeStateRequest
        package: lifecycle_msgs
      response:
        constants:
        - name: succes
          type: bool
          value: s
        definition: bool success
        name: ChangeStateResponse
        package: lifecycle_msgs
    - definition: '---

        State[] available_states

        '
      name: GetAvailableStates
      package: lifecycle_msgs
      response:
        definition: State[] available_states
        fields:
        - name: available_states
          type: lifecycle_msgs/State[]
        name: GetAvailableStatesResponse
        package: lifecycle_msgs
    - definition: '---

        TransitionDescription[] available_transitions

        '
      name: GetAvailableTransitions
      package: lifecycle_msgs
      response:
        definition: TransitionDescription[] available_transitions
        fields:
        - name: available_transitions
          type: lifecycle_msgs/TransitionDescription[]
        name: GetAvailableTransitionsResponse
        package: lifecycle_msgs
    - definition: '---

        State current_state

        '
      name: GetState
      package: lifecycle_msgs
      response:
        constants:
        - name: current_stat
          type: State
          value: e
        definition: State current_state
        name: GetStateResponse
        package: lifecycle_msgs
  - actions: []
    messages: []
    name: message_filters
    path: /opt/ros/dashing/share/message_filters
    services: []
  - actions: []
    messages:
    - constants:
      - name: cell_widt
        type: float32
        value: h
      - name: cell_heigh
        type: float32
        value: t
      definition: '# An array of cells in a 2D grid


        std_msgs/Header header

        float32 cell_width

        float32 cell_height

        geometry_msgs/Point[] cells

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: cells
        type: geometry_msgs/Point[]
      name: GridCells
      package: nav_msgs
    - constants:
      - name: resolutio
        type: float32
        value: n
      - name: widt
        type: uint32
        value: h
      - name: heigh
        type: uint32
        value: t
      definition: '# This hold basic information about the characterists of the OccupancyGrid


        # The time at which the map was loaded

        builtin_interfaces/Time map_load_time


        # The map resolution [m/cell]

        float32 resolution


        # Map width [cells]

        uint32 width


        # Map height [cells]

        uint32 height


        # The origin of the map [m, m, rad].  This is the real-world pose of the

        # cell (0,0) in the map.

        geometry_msgs/Pose origin

        '
      fields:
      - name: map_load_time
        type: builtin_interfaces/Time
      - name: origin
        type: geometry_msgs/Pose
      name: MapMetaData
      package: nav_msgs
    - constants:
      - name: inf
        type: MapMetaData
        value: o
      definition: '# This represents a 2-D grid map, in which each cell represents the
        probability of occupancy.


        std_msgs/Header header


        # MetaData for the map

        MapMetaData info


        # The map data, in row-major order, starting with (0,0).  Occupancy

        # probabilities are in the range [0,100].  Unknown is -1.

        int8[] data

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: data
        type: int8[]
      name: OccupancyGrid
      package: nav_msgs
    - constants:
      - name: child_frame_i
        type: string
        value: d
      definition: '# This represents an estimate of a position and velocity in free
        space.

        # The pose in this message should be specified in the coordinate frame given
        by header.frame_id

        # The twist in this message should be specified in the coordinate frame given
        by the child_frame_id


        std_msgs/Header header

        string child_frame_id

        geometry_msgs/PoseWithCovariance pose

        geometry_msgs/TwistWithCovariance twist

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: pose
        type: geometry_msgs/PoseWithCovariance
      - name: twist
        type: geometry_msgs/TwistWithCovariance
      name: Odometry
      package: nav_msgs
    - definition: '# An array of poses that represents a Path for a robot to follow.


        std_msgs/Header header

        geometry_msgs/PoseStamped[] poses

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: poses
        type: geometry_msgs/PoseStamped[]
      name: Path
      package: nav_msgs
    name: nav_msgs
    path: /opt/ros/dashing/share/nav_msgs
    services:
    - definition: '# Get the map as a nav_msgs/OccupancyGrid

        ---

        OccupancyGrid map

        '
      name: GetMap
      package: nav_msgs
      request:
        definition: '# Get the map as a nav_msgs/OccupancyGrid'
        name: GetMapRequest
        package: nav_msgs
      response:
        constants:
        - name: ma
          type: OccupancyGrid
          value: p
        definition: OccupancyGrid map
        name: GetMapResponse
        package: nav_msgs
    - definition: '# Get a plan from the current position to the goal Pose


        # The start pose for the plan

        geometry_msgs/PoseStamped start


        # The final pose of the goal position

        geometry_msgs/PoseStamped goal


        # If the goal is obstructed, how many meters the planner can

        # relax the constraint in x and y before failing.

        float32 tolerance

        ---

        Path plan

        '
      name: GetPlan
      package: nav_msgs
      request:
        constants:
        - name: toleranc
          type: float32
          value: e
        definition: '# Get a plan from the current position to the goal Pose


          # The start pose for the plan

          geometry_msgs/PoseStamped start


          # The final pose of the goal position

          geometry_msgs/PoseStamped goal


          # If the goal is obstructed, how many meters the planner can

          # relax the constraint in x and y before failing.

          float32 tolerance'
        fields:
        - name: start
          type: geometry_msgs/PoseStamped
        - name: goal
          type: geometry_msgs/PoseStamped
        name: GetPlanRequest
        package: nav_msgs
      response:
        constants:
        - name: pla
          type: Path
          value: n
        definition: Path plan
        name: GetPlanResponse
        package: nav_msgs
    - definition: '# Set a new map together with an initial pose

        nav_msgs/OccupancyGrid map

        geometry_msgs/PoseWithCovarianceStamped initial_pose

        ---

        bool success


        '
      name: SetMap
      package: nav_msgs
      request:
        definition: '# Set a new map together with an initial pose

          nav_msgs/OccupancyGrid map

          geometry_msgs/PoseWithCovarianceStamped initial_pose'
        fields:
        - name: map
          type: nav_msgs/OccupancyGrid
        - name: initial_pose
          type: geometry_msgs/PoseWithCovarianceStamped
        name: SetMapRequest
        package: nav_msgs
      response:
        constants:
        - name: succes
          type: bool
          value: s
        definition: bool success
        name: SetMapResponse
        package: nav_msgs
  - actions: []
    messages: []
    name: osrf_pycommon
    path: /opt/ros/dashing/share/osrf_pycommon
    services: []
  - actions: []
    messages: []
    name: pluginlib
    path: /opt/ros/dashing/share/pluginlib
    services: []
  - actions: []
    messages: []
    name: python_cmake_module
    path: /opt/ros/dashing/share/python_cmake_module
    services: []
  - actions: []
    messages: []
    name: rcl
    path: /opt/ros/dashing/share/rcl
    services: []
  - actions: []
    messages: []
    name: rcl_action
    path: /opt/ros/dashing/share/rcl_action
    services: []
  - actions: []
    messages:
    - constants:
      - name: from_valu
        type: float64
        value: e
      - name: to_valu
        type: float64
        value: e
      - name: ste
        type: float64
        value: p
      definition: '# Represents bounds and a step value for a floating point typed parameter.


        # Start value for valid values, inclusive.

        float64 from_value


        # End value for valid values, inclusive.

        float64 to_value


        # Size of valid steps between the from and to bound.

        # Step is considered to be a magnitude, therefore negative values are treated
        the

        # same as positive values, and a step value of zero implies a continuous range
        of

        # values.

        # Ideally, the step would be less than or equal to the distance between the

        # bounds, as well as an even multiple of the distance between the bounds, but

        # neither are required.

        # If the absolute value of the step is larger than or equal to the distance

        # between the two bounds, then the bounds will be the only valid values,

        # e.g. if the range is defined as {from_value: 1.0, to_value: 2.0, step: 5.0}
        then

        # the valid values will be 1.0 and 2.0.

        # If the step is less than the distance between the bounds, but the distance
        is

        # not a multiple of the step, then the "to" bound will always be a valid value,

        # e.g. if the range is defined as {from_value: 2.0, to_value: 5.0, step: 2.0}
        then

        # the valid values will be 2.0, 4.0, and 5.0.

        float64 step

        '
      name: FloatingPointRange
      package: rcl_interfaces
    - constants:
      - name: from_valu
        type: int64
        value: e
      - name: to_valu
        type: int64
        value: e
      - name: ste
        type: uint64
        value: p
      definition: '# Represents bounds and a step value for an integer typed parameter.


        # Start value for valid values, inclusive.

        int64 from_value


        # End value for valid values, inclusive.

        int64 to_value


        # Size of valid steps between the from and to bound.

        # A step value of zero implies a continuous range of values.

        # Ideally, the step would be less than or equal to the distance between the

        # bounds, as well as an even multiple of the distance between the bounds, but

        # neither are required.

        # If the absolute value of the step is larger than or equal to the distance

        # between the two bounds, then the bounds will be the only valid values,

        # e.g. if the range is defined as {from_value: 1, to_value: 2, step: 5} then

        # the valid values will be 1 and 2.

        # If the step is less than the distance between the bounds, but the distance
        is

        # not a multiple of the step, then the "to" bound will always be a valid value,

        # e.g. if the range is defined as {from_value: 2, to_value: 5, step: 2} then

        # the valid values will be 2, 4, and 5.

        uint64 step

        '
      name: IntegerRange
      package: rcl_interfaces
    - constants:
      - name: publisher_i
        type: uint64
        value: d
      - name: message_sequenc
        type: uint64
        value: e
      definition: 'uint64 publisher_id

        uint64 message_sequence

        '
      name: IntraProcessMessage
      package: rcl_interfaces
    - definition: '# All parameters under the given prefixes.

        string[] names

        # All prefixes under the given prefixes.

        # TODO(wjwwood): link to prefix definition and rules.

        string[] prefixes

        '
      fields:
      - name: names
        type: string[]
      - name: prefixes
        type: string[]
      name: ListParametersResult
      package: rcl_interfaces
    - constants:
      - name: DEBUG
        type: byte
        value: '10'
      - name: INFO
        type: byte
        value: '20'
      - name: WARN
        type: byte
        value: '30'
      - name: ERROR
        type: byte
        value: '40'
      - name: FATAL
        type: byte
        value: '50'
      - name: leve
        type: uint8
        value: l
      - name: name
        type: string
        value: '#'
      - name: msg
        type: string
        value: '#'
      - name: file
        type: string
        value: '#'
      - name: function
        type: string
        value: '#'
      - name: line
        type: uint32
        value: '#'
      definition: '##

        ## Severity level constants

        ##

        byte DEBUG=10 #debug level

        byte INFO=20  #general level

        byte WARN=30  #warning level

        byte ERROR=40 #error level

        byte FATAL=50 #fatal/critical level


        ##

        ## Fields

        ##

        builtin_interfaces/Time stamp

        uint8 level

        string name # the name representing the logger this message came from

        string msg # message

        string file # file the message came from

        string function # function the message came from

        uint32 line # line the message came from

        '
      fields:
      - name: stamp
        type: builtin_interfaces/Time
      name: Log
      package: rcl_interfaces
    - constants:
      - name: nam
        type: string
        value: e
      - name: valu
        type: ParameterValue
        value: e
      definition: '# This is the message to communicate a parameter.

        # It is an open struct with an enum in the descriptor to select which value
        is active.


        string name


        ParameterValue value

        '
      name: Parameter
      package: rcl_interfaces
    - constants:
      - name: nam
        type: string
        value: e
      - name: typ
        type: uint8
        value: e
      - name: descriptio
        type: string
        value: n
      - name: additional_constraint
        type: string
        value: s
      - name: read_only
        type: bool
        value: 'false'
      definition: '# This is the message to communicate a parameter''s descriptor.


        string name


        # Enum values are defined in the `ParameterType.msg` message.

        uint8 type


        # Description of the parameter, visible from introspection tools.

        string description


        # Parameter constraints


        # Plain English description of additional constraints which cannot be expressed

        # with the available constraints, e.g. "only prime numbers".

        # By convention, this should only be used to clarify constraints which cannot

        # be completely expressed with the parameter constraints below.

        string additional_constraints


        # If ''true'' then the value cannot change after it has been initialized.

        bool read_only false



        # If any of the following sequences are not empty, then the constraint inside
        of

        # them apply to this parameter.


        # FloatingPointRange consists of a from_value, a to_value, and a step.

        # FloatingPointRange and IntegerRange are mutually exclusive.

        FloatingPointRange[<=1] floating_point_range


        # IntegerRange consists of a from_value, a to_value, and a step.

        # FloatingPointRange and IntegerRange are mutually exclusive.

        IntegerRange[<=1] integer_range

        '
      fields:
      - name: floating_point_range
        type: rcl_interfaces/FloatingPointRange[<=1]
      - name: integer_range
        type: rcl_interfaces/IntegerRange[<=1]
      name: ParameterDescriptor
      package: rcl_interfaces
    - constants:
      - name: nod
        type: string
        value: e
      definition: '# This message contains a parameter event.

        # It was an atomic update.

        # A specific parameter name can only be in one of the three sets.


        builtin_interfaces/Time stamp


        # Fully qualified ROS path to node

        string node


        Parameter[] new_parameters

        Parameter[] changed_parameters

        Parameter[] deleted_parameters

        '
      fields:
      - name: stamp
        type: builtin_interfaces/Time
      - name: new_parameters
        type: rcl_interfaces/Parameter[]
      - name: changed_parameters
        type: rcl_interfaces/Parameter[]
      - name: deleted_parameters
        type: rcl_interfaces/Parameter[]
      name: ParameterEvent
      package: rcl_interfaces
    - definition: '# This message contains descriptors of a parameter event.

        # It was an atomic update.

        # A specific parameter name can only be in one of the three sets.


        ParameterDescriptor[] new_parameters

        ParameterDescriptor[] changed_parameters

        ParameterDescriptor[] deleted_parameters

        '
      fields:
      - name: new_parameters
        type: rcl_interfaces/ParameterDescriptor[]
      - name: changed_parameters
        type: rcl_interfaces/ParameterDescriptor[]
      - name: deleted_parameters
        type: rcl_interfaces/ParameterDescriptor[]
      name: ParameterEventDescriptors
      package: rcl_interfaces
    - constants:
      - name: PARAMETER_NOT_SET
        type: uint8
        value: '0'
      - name: PARAMETER_BOOL
        type: uint8
        value: '1'
      - name: PARAMETER_INTEGER
        type: uint8
        value: '2'
      - name: PARAMETER_DOUBLE
        type: uint8
        value: '3'
      - name: PARAMETER_STRING
        type: uint8
        value: '4'
      - name: PARAMETER_BYTE_ARRAY
        type: uint8
        value: '5'
      - name: PARAMETER_BOOL_ARRAY
        type: uint8
        value: '6'
      - name: PARAMETER_INTEGER_ARRAY
        type: uint8
        value: '7'
      - name: PARAMETER_DOUBLE_ARRAY
        type: uint8
        value: '8'
      - name: PARAMETER_STRING_ARRAY
        type: uint8
        value: '9'
      definition: 'uint8 PARAMETER_NOT_SET=0

        uint8 PARAMETER_BOOL=1

        uint8 PARAMETER_INTEGER=2

        uint8 PARAMETER_DOUBLE=3

        uint8 PARAMETER_STRING=4

        uint8 PARAMETER_BYTE_ARRAY=5

        uint8 PARAMETER_BOOL_ARRAY=6

        uint8 PARAMETER_INTEGER_ARRAY=7

        uint8 PARAMETER_DOUBLE_ARRAY=8

        uint8 PARAMETER_STRING_ARRAY=9

        '
      name: ParameterType
      package: rcl_interfaces
    - constants:
      - name: typ
        type: uint8
        value: e
      - name: bool_valu
        type: bool
        value: e
      - name: integer_valu
        type: int64
        value: e
      - name: double_valu
        type: float64
        value: e
      - name: string_valu
        type: string
        value: e
      definition: '# Used to determine which of the next *_value fields are set.

        # ParameterType.PARAMETER_NOT_SET indicates that the parameter was not set

        # (if gotten) or is uninitialized.

        # Values are enumerated in ParameterType.msg


        uint8 type


        # "Variant" style storage of the parameter value.

        bool bool_value

        int64 integer_value

        float64 double_value

        string string_value

        byte[] byte_array_value

        bool[] bool_array_value

        int64[] integer_array_value

        float64[] double_array_value

        string[] string_array_value

        '
      fields:
      - name: byte_array_value
        type: byte[]
      - name: bool_array_value
        type: bool[]
      - name: integer_array_value
        type: int64[]
      - name: double_array_value
        type: float64[]
      - name: string_array_value
        type: string[]
      name: ParameterValue
      package: rcl_interfaces
    - constants:
      - name: successfu
        type: bool
        value: l
      - name: reaso
        type: string
        value: n
      definition: '# A true value of the same index indicates that the parameter was
        set successfully.

        # A false value indicates the change was rejected.

        bool successful

        # Reason why the setting was either successful or a failure.

        # Should only be used for logging and user interfaces.

        string reason

        '
      name: SetParametersResult
      package: rcl_interfaces
    name: rcl_interfaces
    path: /opt/ros/dashing/share/rcl_interfaces
    services:
    - definition: '# A list of parameters of which to get the descriptor.

        string[] names


        ---


        # A list of the descriptors of all parameters requested in the same order

        # as they were requested.

        # This list has the same length as the list of parameters requested.

        ParameterDescriptor[] descriptors

        '
      name: DescribeParameters
      package: rcl_interfaces
      request:
        definition: '# A list of parameters of which to get the descriptor.

          string[] names'
        fields:
        - name: names
          type: string[]
        name: DescribeParametersRequest
        package: rcl_interfaces
      response:
        definition: '# A list of the descriptors of all parameters requested in the
          same order

          # as they were requested.

          # This list has the same length as the list of parameters requested.

          ParameterDescriptor[] descriptors'
        fields:
        - name: descriptors
          type: rcl_interfaces/ParameterDescriptor[]
        name: DescribeParametersResponse
        package: rcl_interfaces
    - definition: '# A list of parameter names.

        # TODO(wjwwood): link to parameter naming rules.

        string[] names


        ---


        # List of types which is the same length and order as the provided names.

        # Type enum defined in ParameterType.msg

        # ParameterType.PARAMETER_NOT_SET indicates that the parameter is not currently
        set.

        uint8[] types

        '
      name: GetParameterTypes
      package: rcl_interfaces
      request:
        definition: '# A list of parameter names.

          # TODO(wjwwood): link to parameter naming rules.

          string[] names'
        fields:
        - name: names
          type: string[]
        name: GetParameterTypesRequest
        package: rcl_interfaces
      response:
        definition: '# List of types which is the same length and order as the provided
          names.

          # Type enum defined in ParameterType.msg

          # ParameterType.PARAMETER_NOT_SET indicates that the parameter is not currently
          set.

          uint8[] types'
        fields:
        - name: types
          type: uint8[]
        name: GetParameterTypesResponse
        package: rcl_interfaces
    - definition: '# A list of parameter names to get.

        # TODO(wjwwood): Decide on the rules for grouping, nodes, and parameter "names"
        in general, then link to that.

        string[] names


        ---


        # List of values which is the same length and order as the provided names.

        # If a parameter was not set yet, the value will have PARAMETER_NOT_SET as the
        type.

        ParameterValue[] values

        '
      name: GetParameters
      package: rcl_interfaces
      request:
        definition: '# A list of parameter names to get.

          # TODO(wjwwood): Decide on the rules for grouping, nodes, and parameter "names"
          in general, then link to that.

          string[] names'
        fields:
        - name: names
          type: string[]
        name: GetParametersRequest
        package: rcl_interfaces
      response:
        definition: '# List of values which is the same length and order as the provided
          names.

          # If a parameter was not set yet, the value will have PARAMETER_NOT_SET as
          the type.

          ParameterValue[] values'
        fields:
        - name: values
          type: rcl_interfaces/ParameterValue[]
        name: GetParametersResponse
        package: rcl_interfaces
    - definition: 'uint64 DEPTH_RECURSIVE=0


        # The list of parameter prefixes to query.

        string[] prefixes

        # Relative depth from given prefixes to return.

        # Use DEPTH_RECURSIVE to get the recursive parameters and prefixes for each
        prefix.

        uint64 depth


        ---


        ListParametersResult result

        '
      name: ListParameters
      package: rcl_interfaces
      request:
        constants:
        - name: DEPTH_RECURSIVE
          type: uint64
          value: '0'
        - name: dept
          type: uint64
          value: h
        definition: 'uint64 DEPTH_RECURSIVE=0


          # The list of parameter prefixes to query.

          string[] prefixes

          # Relative depth from given prefixes to return.

          # Use DEPTH_RECURSIVE to get the recursive parameters and prefixes for each
          prefix.

          uint64 depth'
        fields:
        - name: prefixes
          type: string[]
        name: ListParametersRequest
        package: rcl_interfaces
      response:
        constants:
        - name: resul
          type: ListParametersResult
          value: t
        definition: ListParametersResult result
        name: ListParametersResponse
        package: rcl_interfaces
    - definition: '# A list of parameters to set

        Parameter[] parameters


        ---


        SetParametersResult[] results

        '
      name: SetParameters
      package: rcl_interfaces
      request:
        definition: '# A list of parameters to set

          Parameter[] parameters'
        fields:
        - name: parameters
          type: rcl_interfaces/Parameter[]
        name: SetParametersRequest
        package: rcl_interfaces
      response:
        definition: SetParametersResult[] results
        fields:
        - name: results
          type: rcl_interfaces/SetParametersResult[]
        name: SetParametersResponse
        package: rcl_interfaces
    - definition: '# A list of parameters to set atomically.

        # This call will either set all values, or none of the values.

        Parameter[] parameters


        ---


        SetParametersResult result

        '
      name: SetParametersAtomically
      package: rcl_interfaces
      request:
        definition: '# A list of parameters to set atomically.

          # This call will either set all values, or none of the values.

          Parameter[] parameters'
        fields:
        - name: parameters
          type: rcl_interfaces/Parameter[]
        name: SetParametersAtomicallyRequest
        package: rcl_interfaces
      response:
        constants:
        - name: resul
          type: SetParametersResult
          value: t
        definition: SetParametersResult result
        name: SetParametersAtomicallyResponse
        package: rcl_interfaces
  - actions: []
    messages: []
    name: rcl_lifecycle
    path: /opt/ros/dashing/share/rcl_lifecycle
    services: []
  - actions: []
    messages: []
    name: rcl_logging_noop
    path: /opt/ros/dashing/share/rcl_logging_noop
    services: []
  - actions: []
    messages: []
    name: rcl_yaml_param_parser
    path: /opt/ros/dashing/share/rcl_yaml_param_parser
    services: []
  - actions: []
    messages: []
    name: rclcpp
    path: /opt/ros/dashing/share/rclcpp
    services: []
  - actions: []
    messages: []
    name: rclcpp_components
    path: /opt/ros/dashing/share/rclcpp_components
    services: []
  - actions: []
    messages: []
    name: rclcpp_lifecycle
    path: /opt/ros/dashing/share/rclcpp_lifecycle
    services: []
  - actions: []
    messages: []
    name: rclpy
    path: /opt/ros/dashing/share/rclpy
    services: []
  - actions: []
    messages: []
    name: rcpputils
    path: /opt/ros/dashing/share/rcpputils
    services: []
  - actions: []
    messages: []
    name: rcutils
    path: /opt/ros/dashing/share/rcutils
    services: []
  - actions: []
    messages: []
    name: rmw
    path: /opt/ros/dashing/share/rmw
    services: []
  - actions: []
    messages: []
    name: rmw_fastrtps_cpp
    path: /opt/ros/dashing/share/rmw_fastrtps_cpp
    services: []
  - actions: []
    messages: []
    name: rmw_fastrtps_shared_cpp
    path: /opt/ros/dashing/share/rmw_fastrtps_shared_cpp
    services: []
  - actions: []
    messages: []
    name: rmw_implementation
    path: /opt/ros/dashing/share/rmw_implementation
    services: []
  - actions: []
    messages: []
    name: rmw_implementation_cmake
    path: /opt/ros/dashing/share/rmw_implementation_cmake
    services: []
  - actions: []
    messages: []
    name: robot_state_publisher
    path: /opt/ros/dashing/share/robot_state_publisher
    services: []
  - actions: []
    messages: []
    name: ros2action
    path: /opt/ros/dashing/share/ros2action
    services: []
  - actions: []
    messages: []
    name: ros2cli
    path: /opt/ros/dashing/share/ros2cli
    services: []
  - actions: []
    messages: []
    name: ros2component
    path: /opt/ros/dashing/share/ros2component
    services: []
  - actions: []
    messages: []
    name: ros2launch
    path: /opt/ros/dashing/share/ros2launch
    services: []
  - actions: []
    messages: []
    name: ros2lifecycle
    path: /opt/ros/dashing/share/ros2lifecycle
    services: []
  - actions: []
    messages: []
    name: ros2msg
    path: /opt/ros/dashing/share/ros2msg
    services: []
  - actions: []
    messages: []
    name: ros2multicast
    path: /opt/ros/dashing/share/ros2multicast
    services: []
  - actions: []
    messages: []
    name: ros2node
    path: /opt/ros/dashing/share/ros2node
    services: []
  - actions: []
    messages: []
    name: ros2param
    path: /opt/ros/dashing/share/ros2param
    services: []
  - actions: []
    messages: []
    name: ros2pkg
    path: /opt/ros/dashing/share/ros2pkg
    services: []
  - actions: []
    messages: []
    name: ros2run
    path: /opt/ros/dashing/share/ros2run
    services: []
  - actions: []
    messages: []
    name: ros2service
    path: /opt/ros/dashing/share/ros2service
    services: []
  - actions: []
    messages: []
    name: ros2srv
    path: /opt/ros/dashing/share/ros2srv
    services: []
  - actions: []
    messages: []
    name: ros2topic
    path: /opt/ros/dashing/share/ros2topic
    services: []
  - actions: []
    messages: []
    name: ros_base
    path: /opt/ros/dashing/share/ros_base
    services: []
  - actions: []
    messages: []
    name: ros_core
    path: /opt/ros/dashing/share/ros_core
    services: []
  - actions: []
    messages: []
    name: ros_environment
    path: /opt/ros/dashing/share/ros_environment
    services: []
  - actions: []
    messages: []
    name: ros_workspace
    path: /opt/ros/dashing/share/ros_workspace
    services: []
  - actions: []
    messages:
    - definition: '# This message simply communicates the current time.

        # For more information, see http://www.ros.org/wiki/Clock

        builtin_interfaces/Time clock

        '
      fields:
      - name: clock
        type: builtin_interfaces/Time
      name: Clock
      package: rosgraph_msgs
    name: rosgraph_msgs
    path: /opt/ros/dashing/share/rosgraph_msgs
    services: []
  - actions: []
    messages: []
    name: rosidl_adapter
    path: /opt/ros/dashing/share/rosidl_adapter
    services: []
  - actions: []
    messages: []
    name: rosidl_cmake
    path: /opt/ros/dashing/share/rosidl_cmake
    services: []
  - actions: []
    messages: []
    name: rosidl_default_generators
    path: /opt/ros/dashing/share/rosidl_default_generators
    services: []
  - actions: []
    messages: []
    name: rosidl_default_runtime
    path: /opt/ros/dashing/share/rosidl_default_runtime
    services: []
  - actions: []
    messages: []
    name: rosidl_generator_c
    path: /opt/ros/dashing/share/rosidl_generator_c
    services: []
  - actions: []
    messages: []
    name: rosidl_generator_cpp
    path: /opt/ros/dashing/share/rosidl_generator_cpp
    services: []
  - actions: []
    messages: []
    name: rosidl_generator_py
    path: /opt/ros/dashing/share/rosidl_generator_py
    services: []
  - actions: []
    messages: []
    name: rosidl_parser
    path: /opt/ros/dashing/share/rosidl_parser
    services: []
  - actions: []
    messages: []
    name: rosidl_runtime_py
    path: /opt/ros/dashing/share/rosidl_runtime_py
    services: []
  - actions: []
    messages: []
    name: rosidl_typesupport_c
    path: /opt/ros/dashing/share/rosidl_typesupport_c
    services: []
  - actions: []
    messages: []
    name: rosidl_typesupport_cpp
    path: /opt/ros/dashing/share/rosidl_typesupport_cpp
    services: []
  - actions: []
    messages: []
    name: rosidl_typesupport_fastrtps_c
    path: /opt/ros/dashing/share/rosidl_typesupport_fastrtps_c
    services: []
  - actions: []
    messages: []
    name: rosidl_typesupport_fastrtps_cpp
    path: /opt/ros/dashing/share/rosidl_typesupport_fastrtps_cpp
    services: []
  - actions: []
    messages: []
    name: rosidl_typesupport_interface
    path: /opt/ros/dashing/share/rosidl_typesupport_interface
    services: []
  - actions: []
    messages: []
    name: rosidl_typesupport_introspection_c
    path: /opt/ros/dashing/share/rosidl_typesupport_introspection_c
    services: []
  - actions: []
    messages: []
    name: rosidl_typesupport_introspection_cpp
    path: /opt/ros/dashing/share/rosidl_typesupport_introspection_cpp
    services: []
  - actions: []
    messages:
    - constants:
      - name: POWER_SUPPLY_STATUS_UNKNOWN
        type: uint8
        value: '0'
      - name: POWER_SUPPLY_STATUS_CHARGING
        type: uint8
        value: '1'
      - name: POWER_SUPPLY_STATUS_DISCHARGING
        type: uint8
        value: '2'
      - name: POWER_SUPPLY_STATUS_NOT_CHARGING
        type: uint8
        value: '3'
      - name: POWER_SUPPLY_STATUS_FULL
        type: uint8
        value: '4'
      - name: POWER_SUPPLY_HEALTH_UNKNOWN
        type: uint8
        value: '0'
      - name: POWER_SUPPLY_HEALTH_GOOD
        type: uint8
        value: '1'
      - name: POWER_SUPPLY_HEALTH_OVERHEAT
        type: uint8
        value: '2'
      - name: POWER_SUPPLY_HEALTH_DEAD
        type: uint8
        value: '3'
      - name: POWER_SUPPLY_HEALTH_OVERVOLTAGE
        type: uint8
        value: '4'
      - name: POWER_SUPPLY_HEALTH_UNSPEC_FAILURE
        type: uint8
        value: '5'
      - name: POWER_SUPPLY_HEALTH_COLD
        type: uint8
        value: '6'
      - name: POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE
        type: uint8
        value: '7'
      - name: POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE
        type: uint8
        value: '8'
      - name: POWER_SUPPLY_TECHNOLOGY_UNKNOWN
        type: uint8
        value: '0'
      - name: POWER_SUPPLY_TECHNOLOGY_NIMH
        type: uint8
        value: '1'
      - name: POWER_SUPPLY_TECHNOLOGY_LION
        type: uint8
        value: '2'
      - name: POWER_SUPPLY_TECHNOLOGY_LIPO
        type: uint8
        value: '3'
      - name: POWER_SUPPLY_TECHNOLOGY_LIFE
        type: uint8
        value: '4'
      - name: POWER_SUPPLY_TECHNOLOGY_NICD
        type: uint8
        value: '5'
      - name: POWER_SUPPLY_TECHNOLOGY_LIMN
        type: uint8
        value: '6'
      - name: voltage
        type: float32
        value: '#'
      - name: temperature
        type: float32
        value: '#'
      - name: current
        type: float32
        value: '#'
      - name: charge
        type: float32
        value: '#'
      - name: capacity
        type: float32
        value: '#'
      - name: design_capacity
        type: float32
        value: '#'
      - name: percentage
        type: float32
        value: '#'
      - name: power_supply_status
        type: uint8
        value: '#'
      - name: power_supply_health
        type: uint8
        value: '#'
      - name: power_supply_technology
        type: uint8
        value: '#'
      - name: present
        type: bool
        value: '#'
      - name: location
        type: string
        value: '#'
      - name: serial_number
        type: string
        value: '#'
      definition: "\n# Constants are chosen to match the enums in the linux kernel\n\
        # defined in include/linux/power_supply.h as of version 3.7\n# The one difference\
        \ is for style reasons the constants are\n# all uppercase not mixed case.\n\n\
        # Power supply status constants\nuint8 POWER_SUPPLY_STATUS_UNKNOWN = 0\nuint8\
        \ POWER_SUPPLY_STATUS_CHARGING = 1\nuint8 POWER_SUPPLY_STATUS_DISCHARGING =\
        \ 2\nuint8 POWER_SUPPLY_STATUS_NOT_CHARGING = 3\nuint8 POWER_SUPPLY_STATUS_FULL\
        \ = 4\n\n# Power supply health constants\nuint8 POWER_SUPPLY_HEALTH_UNKNOWN\
        \ = 0\nuint8 POWER_SUPPLY_HEALTH_GOOD = 1\nuint8 POWER_SUPPLY_HEALTH_OVERHEAT\
        \ = 2\nuint8 POWER_SUPPLY_HEALTH_DEAD = 3\nuint8 POWER_SUPPLY_HEALTH_OVERVOLTAGE\
        \ = 4\nuint8 POWER_SUPPLY_HEALTH_UNSPEC_FAILURE = 5\nuint8 POWER_SUPPLY_HEALTH_COLD\
        \ = 6\nuint8 POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE = 7\nuint8 POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE\
        \ = 8\n\n# Power supply technology (chemistry) constants\nuint8 POWER_SUPPLY_TECHNOLOGY_UNKNOWN\
        \ = 0\nuint8 POWER_SUPPLY_TECHNOLOGY_NIMH = 1\nuint8 POWER_SUPPLY_TECHNOLOGY_LION\
        \ = 2\nuint8 POWER_SUPPLY_TECHNOLOGY_LIPO = 3\nuint8 POWER_SUPPLY_TECHNOLOGY_LIFE\
        \ = 4\nuint8 POWER_SUPPLY_TECHNOLOGY_NICD = 5\nuint8 POWER_SUPPLY_TECHNOLOGY_LIMN\
        \ = 6\n\nstd_msgs/Header  header\nfloat32 voltage          # Voltage in Volts\
        \ (Mandatory)\nfloat32 temperature      # Temperature in Degrees Celsius (If\
        \ unmeasured NaN)\nfloat32 current          # Negative when discharging (A)\
        \  (If unmeasured NaN)\nfloat32 charge           # Current charge in Ah  (If\
        \ unmeasured NaN)\nfloat32 capacity         # Capacity in Ah (last full capacity)\
        \  (If unmeasured NaN)\nfloat32 design_capacity  # Capacity in Ah (design capacity)\
        \  (If unmeasured NaN)\nfloat32 percentage       # Charge percentage on 0 to\
        \ 1 range  (If unmeasured NaN)\nuint8   power_supply_status     # The charging\
        \ status as reported. Values defined above\nuint8   power_supply_health    \
        \ # The battery health metric. Values defined above\nuint8   power_supply_technology\
        \ # The battery chemistry. Values defined above\nbool    present          #\
        \ True if the battery is present\n\nfloat32[] cell_voltage   # An array of individual\
        \ cell voltages for each cell in the pack\n                         # If individual\
        \ voltages unknown but number of cells known set each to NaN\nfloat32[] cell_temperature\
        \ # An array of individual cell temperatures for each cell in the pack\n   \
        \                        # If individual temperatures unknown but number of\
        \ cells known set each to NaN\nstring location          # The location into\
        \ which the battery is inserted. (slot number or plug)\nstring serial_number\
        \     # The best approximation of the battery serial number\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: cell_voltage
        type: float32[]
      - name: cell_temperature
        type: float32[]
      name: BatteryState
      package: sensor_msgs
    - constants:
      - name: heigh
        type: uint32
        value: t
      - name: widt
        type: uint32
        value: h
      - name: distortion_mode
        type: string
        value: l
      - name: binning_
        type: uint32
        value: x
      - name: binning_
        type: uint32
        value: y
      - name: ro
        type: RegionOfInterest
        value: i
      definition: "# This message defines meta information for a camera. It should be\
        \ in a\n# camera namespace on topic \"camera_info\" and accompanied by up to\
        \ five\n# image topics named:\n#\n#   image_raw - raw data from the camera driver,\
        \ possibly Bayer encoded\n#   image            - monochrome, distorted\n#  \
        \ image_color      - color, distorted\n#   image_rect       - monochrome, rectified\n\
        #   image_rect_color - color, rectified\n#\n# The image_pipeline contains packages\
        \ (image_proc, stereo_image_proc)\n# for producing the four processed image\
        \ topics from image_raw and\n# camera_info. The meaning of the camera parameters\
        \ are described in\n# detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.\n\
        #\n# The image_geometry package provides a user-friendly interface to\n# common\
        \ operations using this meta information. If you want to, e.g.,\n# project a\
        \ 3d point into image coordinates, we strongly recommend\n# using image_geometry.\n\
        #\n# If the camera is uncalibrated, the matrices D, K, R, P should be left\n\
        # zeroed out. In particular, clients may assume that K[0] == 0.0\n# indicates\
        \ an uncalibrated camera.\n\n#######################################################################\n\
        #                     Image acquisition info                          #\n#######################################################################\n\
        \n# Time of image acquisition, camera coordinate frame ID\nstd_msgs/Header header\
        \ # Header timestamp should be acquisition time of image\n                 \
        \            # Header frame_id should be optical frame of camera\n         \
        \                    # origin of frame should be optical center of camera\n\
        \                             # +x should point to the right in the image\n\
        \                             # +y should point down in the image\n        \
        \                     # +z should point into the plane of the image\n\n\n#######################################################################\n\
        #                      Calibration Parameters                         #\n#######################################################################\n\
        # These are fixed during camera calibration. Their values will be the #\n# same\
        \ in all messages until the camera is recalibrated. Note that    #\n# self-calibrating\
        \ systems may \"recalibrate\" frequently.              #\n#                \
        \                                                     #\n# The internal parameters\
        \ can be used to warp a raw (distorted) image #\n# to:                     \
        \                                            #\n#   1. An undistorted image\
        \ (requires D and K)                        #\n#   2. A rectified image (requires\
        \ D, K, R)                           #\n# The projection matrix P projects 3D\
        \ points into the rectified image.#\n#######################################################################\n\
        \n# The image dimensions with which the camera was calibrated.\n# Normally this\
        \ will be the full camera resolution in pixels.\nuint32 height\nuint32 width\n\
        \n# The distortion model used. Supported models are listed in\n# sensor_msgs/distortion_models.h.\
        \ For most cameras, \"plumb_bob\" - a\n# simple model of radial and tangential\
        \ distortion - is sufficent.\nstring distortion_model\n\n# The distortion parameters,\
        \ size depending on the distortion model.\n# For \"plumb_bob\", the 5 parameters\
        \ are: (k1, k2, t1, t2, k3).\nfloat64[] d\n\n# Intrinsic camera matrix for the\
        \ raw (distorted) images.\n#     [fx  0 cx]\n# K = [ 0 fy cy]\n#     [ 0  0\
        \  1]\n# Projects 3D points in the camera coordinate frame to 2D pixel\n# coordinates\
        \ using the focal lengths (fx, fy) and principal point\n# (cx, cy).\nfloat64[9]\
        \  k # 3x3 row-major matrix\n\n# Rectification matrix (stereo cameras only)\n\
        # A rotation matrix aligning the camera coordinate system to the ideal\n# stereo\
        \ image plane so that epipolar lines in both stereo images are\n# parallel.\n\
        float64[9]  r # 3x3 row-major matrix\n\n# Projection/camera matrix\n#     [fx'\
        \  0  cx' Tx]\n# P = [ 0  fy' cy' Ty]\n#     [ 0   0   1   0]\n# By convention,\
        \ this matrix specifies the intrinsic (camera) matrix\n#  of the processed (rectified)\
        \ image. That is, the left 3x3 portion\n#  is the normal camera intrinsic matrix\
        \ for the rectified image.\n# It projects 3D points in the camera coordinate\
        \ frame to 2D pixel\n#  coordinates using the focal lengths (fx', fy') and principal\
        \ point\n#  (cx', cy') - these may differ from the values in K.\n# For monocular\
        \ cameras, Tx = Ty = 0. Normally, monocular cameras will\n#  also have R = the\
        \ identity and P[1:3,1:3] = K.\n# For a stereo pair, the fourth column [Tx Ty\
        \ 0]' is related to the\n#  position of the optical center of the second camera\
        \ in the first\n#  camera's frame. We assume Tz = 0 so both cameras are in the\
        \ same\n#  stereo image plane. The first camera always has Tx = Ty = 0. For\n\
        #  the right (second) camera of a horizontal stereo pair, Ty = 0 and\n#  Tx\
        \ = -fx' * B, where B is the baseline between the cameras.\n# Given a 3D point\
        \ [X Y Z]', the projection (x, y) of the point onto\n#  the rectified image\
        \ is given by:\n#  [u v w]' = P * [X Y Z 1]'\n#         x = u / w\n#       \
        \  y = v / w\n#  This holds for both images of a stereo pair.\nfloat64[12] p\
        \ # 3x4 row-major matrix\n\n\n#######################################################################\n\
        #                      Operational Parameters                         #\n#######################################################################\n\
        # These define the image region actually captured by the camera       #\n# driver.\
        \ Although they affect the geometry of the output image, they #\n# may be changed\
        \ freely without recalibrating the camera.             #\n#######################################################################\n\
        \n# Binning refers here to any camera setting which combines rectangular\n#\
        \  neighborhoods of pixels into larger \"super-pixels.\" It reduces the\n# \
        \ resolution of the output image to\n#  (width / binning_x) x (height / binning_y).\n\
        # The default values binning_x = binning_y = 0 is considered the same\n#  as\
        \ binning_x = binning_y = 1 (no subsampling).\nuint32 binning_x\nuint32 binning_y\n\
        \n# Region of interest (subwindow of full camera resolution), given in\n#  full\
        \ resolution (unbinned) image coordinates. A particular ROI\n#  always denotes\
        \ the same window of pixels on the camera sensor,\n#  regardless of binning\
        \ settings.\n# The default setting of roi (all values 0) is considered the same\
        \ as\n#  full resolution (roi.width = width, roi.height = height).\nRegionOfInterest\
        \ roi\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: d
        type: float64[]
      - name: k
        type: float64[9]
      - name: r
        type: float64[9]
      - name: p
        type: float64[12]
      name: CameraInfo
      package: sensor_msgs
    - constants:
      - name: nam
        type: string
        value: e
      definition: '# This message is used by the PointCloud message to hold optional
        data

        # associated with each point in the cloud. The length of the values

        # array should be the same as the length of the points array in the

        # PointCloud, and each value should be associated with the corresponding

        # point.

        #

        # Channel names in existing practice include:

        #   "u", "v" - row and column (respectively) in the left stereo image.

        #              This is opposite to usual conventions but remains for

        #              historical reasons. The newer PointCloud2 message has no

        #              such problem.

        #   "rgb" - For point clouds produced by color stereo cameras. uint8

        #           (R,G,B) values packed into the least significant 24 bits,

        #           in order.

        #   "intensity" - laser or pixel intensity.

        #   "distance"


        # The channel name should give semantics of the channel (e.g.

        # "intensity" instead of "value").

        string name


        # The values array should be 1-1 with the elements of the associated

        # PointCloud.

        float32[] values

        '
      fields:
      - name: values
        type: float32[]
      name: ChannelFloat32
      package: sensor_msgs
    - constants:
      - name: format
        type: string
        value: '#'
      definition: "# This message contains a compressed image.\n\nstd_msgs/Header header\
        \ # Header timestamp should be acquisition time of image\n                 \
        \            # Header frame_id should be optical frame of camera\n         \
        \                    # origin of frame should be optical center of cameara\n\
        \                             # +x should point to the right in the image\n\
        \                             # +y should point down in the image\n        \
        \                     # +z should point into to plane of the image\n\nstring\
        \ format                # Specifies the format of the data\n               \
        \              #   Acceptable values:\n                             #     jpeg,\
        \ png\n\nuint8[] data                 # Compressed image buffer\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: data
        type: uint8[]
      name: CompressedImage
      package: sensor_msgs
    - constants:
      - name: fluid_pressure
        type: float64
        value: '#'
      - name: variance
        type: float64
        value: '#'
      definition: "# Single pressure reading.  This message is appropriate for measuring\
        \ the\n# pressure inside of a fluid (air, water, etc).  This also includes\n\
        # atmospheric or barometric pressure.\n#\n# This message is not appropriate\
        \ for force/pressure contact sensors.\n\nstd_msgs/Header header # timestamp\
        \ of the measurement\n                             # frame_id is the location\
        \ of the pressure sensor\n\nfloat64 fluid_pressure       # Absolute pressure\
        \ reading in Pascals.\n\nfloat64 variance             # 0 is interpreted as\
        \ variance unknown\n"
      fields:
      - name: header
        type: std_msgs/Header
      name: FluidPressure
      package: sensor_msgs
    - constants:
      - name: illuminance
        type: float64
        value: '#'
      - name: variance
        type: float64
        value: '#'
      definition: "# Single photometric illuminance measurement.  Light should be assumed\
        \ to be\n# measured along the sensor's x-axis (the area of detection is the\
        \ y-z plane).\n# The illuminance should have a 0 or positive value and be received\
        \ with\n# the sensor's +X axis pointing toward the light source.\n#\n# Photometric\
        \ illuminance is the measure of the human eye's sensitivity of the\n# intensity\
        \ of light encountering or passing through a surface.\n#\n# All other Photometric\
        \ and Radiometric measurements should not use this message.\n# This message\
        \ cannot represent:\n#  - Luminous intensity (candela/light source output)\n\
        #  - Luminance (nits/light output per area)\n#  - Irradiance (watt/area), etc.\n\
        \nstd_msgs/Header header # timestamp is the time the illuminance was measured\n\
        \                             # frame_id is the location and direction of the\
        \ reading\n\nfloat64 illuminance          # Measurement of the Photometric Illuminance\
        \ in Lux.\n\nfloat64 variance             # 0 is interpreted as variance unknown\n"
      fields:
      - name: header
        type: std_msgs/Header
      name: Illuminance
      package: sensor_msgs
    - constants:
      - name: height
        type: uint32
        value: '#'
      - name: width
        type: uint32
        value: '#'
      - name: encoding
        type: string
        value: '#'
      - name: is_bigendian
        type: uint8
        value: '#'
      - name: step
        type: uint32
        value: '#'
      definition: "# This message contains an uncompressed image\n# (0, 0) is at top-left\
        \ corner of image\n\nstd_msgs/Header header # Header timestamp should be acquisition\
        \ time of image\n                             # Header frame_id should be optical\
        \ frame of camera\n                             # origin of frame should be\
        \ optical center of cameara\n                             # +x should point\
        \ to the right in the image\n                             # +y should point\
        \ down in the image\n                             # +z should point into to\
        \ plane of the image\n                             # If the frame_id here and\
        \ the frame_id of the CameraInfo\n                             # message associated\
        \ with the image conflict\n                             # the behavior is undefined\n\
        \nuint32 height                # image height, that is, number of rows\nuint32\
        \ width                 # image width, that is, number of columns\n\n# The legal\
        \ values for encoding are in file src/image_encodings.cpp\n# If you want to\
        \ standardize a new string format, join\n# ros-users@lists.ros.org and send\
        \ an email proposing a new encoding.\n\nstring encoding       # Encoding of\
        \ pixels -- channel meaning, ordering, size\n                      # taken from\
        \ the list of strings in include/sensor_msgs/image_encodings.h\n\nuint8 is_bigendian\
        \    # is this data bigendian?\nuint32 step           # Full row length in bytes\n\
        uint8[] data          # actual matrix data, size is (step * rows)\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: data
        type: uint8[]
      name: Image
      package: sensor_msgs
    - definition: '# This is a message to hold data from an IMU (Inertial Measurement
        Unit)

        #

        # Accelerations should be in m/s^2 (not in g''s), and rotational velocity should
        be in rad/sec

        #

        # If the covariance of the measurement is known, it should be filled in (if
        all you know is the

        # variance of each measurement, e.g. from the datasheet, just put those along
        the diagonal)

        # A covariance matrix of all zeros will be interpreted as "covariance unknown",
        and to use the

        # data a covariance will have to be assumed or gotten from some other source

        #

        # If you have no estimate for one of the data elements (e.g. your IMU doesn''t
        produce an

        # orientation estimate), please set element 0 of the associated covariance matrix
        to -1

        # If you are interpreting this message, please check for a value of -1 in the
        first element of each

        # covariance matrix, and disregard the associated estimate.


        std_msgs/Header header


        geometry_msgs/Quaternion orientation

        float64[9] orientation_covariance # Row major about x, y, z axes


        geometry_msgs/Vector3 angular_velocity

        float64[9] angular_velocity_covariance # Row major about x, y, z axes


        geometry_msgs/Vector3 linear_acceleration

        float64[9] linear_acceleration_covariance # Row major x, y z

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: orientation
        type: geometry_msgs/Quaternion
      - name: orientation_covariance
        type: float64[9]
      - name: angular_velocity
        type: geometry_msgs/Vector3
      - name: angular_velocity_covariance
        type: float64[9]
      - name: linear_acceleration
        type: geometry_msgs/Vector3
      - name: linear_acceleration_covariance
        type: float64[9]
      name: Imu
      package: sensor_msgs
    - definition: '# This is a message that holds data to describe the state of a set
        of torque controlled joints.

        #

        # The state of each joint (revolute or prismatic) is defined by:

        #  * the position of the joint (rad or m),

        #  * the velocity of the joint (rad/s or m/s) and

        #  * the effort that is applied in the joint (Nm or N).

        #

        # Each joint is uniquely identified by its name

        # The header specifies the time at which the joint states were recorded. All
        the joint states

        # in one message have to be recorded at the same time.

        #

        # This message consists of a multiple arrays, one for each part of the joint
        state.

        # The goal is to make each of the fields optional. When e.g. your joints have
        no

        # effort associated with them, you can leave the effort array empty.

        #

        # All arrays in this message should have the same size, or be empty.

        # This is the only way to uniquely associate the joint name with the correct

        # states.


        std_msgs/Header header


        string[] name

        float64[] position

        float64[] velocity

        float64[] effort

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: name
        type: string[]
      - name: position
        type: float64[]
      - name: velocity
        type: float64[]
      - name: effort
        type: float64[]
      name: JointState
      package: sensor_msgs
    - definition: '# Reports the state of a joystick''s axes and buttons.


        # The timestamp is the time at which data is received from the joystick.

        std_msgs/Header header


        # The axes measurements from a joystick.

        float32[] axes


        # The buttons measurements from a joystick.

        int32[] buttons

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: axes
        type: float32[]
      - name: buttons
        type: int32[]
      name: Joy
      package: sensor_msgs
    - constants:
      - name: TYPE_LED
        type: uint8
        value: '0'
      - name: TYPE_RUMBLE
        type: uint8
        value: '1'
      - name: TYPE_BUZZER
        type: uint8
        value: '2'
      - name: typ
        type: uint8
        value: e
      - name: i
        type: uint8
        value: d
      - name: intensit
        type: float32
        value: y
      definition: '

        # Declare of the type of feedback

        uint8 TYPE_LED    = 0

        uint8 TYPE_RUMBLE = 1

        uint8 TYPE_BUZZER = 2


        uint8 type


        # This will hold an id number for each type of each feedback.

        # Example, the first led would be id=0, the second would be id=1

        uint8 id


        # Intensity of the feedback, from 0.0 to 1.0, inclusive.  If device is

        # actually binary, driver should treat 0<=x<0.5 as off, 0.5<=x<=1 as on.

        float32 intensity

        '
      name: JoyFeedback
      package: sensor_msgs
    - definition: '# This message publishes values for multiple feedback at once.

        JoyFeedback[] array

        '
      fields:
      - name: array
        type: sensor_msgs/JoyFeedback[]
      name: JoyFeedbackArray
      package: sensor_msgs
    - definition: "# This message is a submessage of MultiEchoLaserScan and is not intended\n\
        # to be used separately.\n\nfloat32[] echoes  # Multiple values of ranges or\
        \ intensities.\n                  # Each array represents data from the same\
        \ angle increment.\n"
      fields:
      - name: echoes
        type: float32[]
      name: LaserEcho
      package: sensor_msgs
    - constants:
      - name: angle_min
        type: float32
        value: '#'
      - name: angle_max
        type: float32
        value: '#'
      - name: angle_increment
        type: float32
        value: '#'
      - name: time_increment
        type: float32
        value: '#'
      - name: scan_time
        type: float32
        value: '#'
      - name: range_min
        type: float32
        value: '#'
      - name: range_max
        type: float32
        value: '#'
      definition: "# Single scan from a planar laser range-finder\n#\n# If you have\
        \ another ranging device with different behavior (e.g. a sonar\n# array), please\
        \ find or create a different message, since applications\n# will make fairly\
        \ laser-specific assumptions about this data\n\nstd_msgs/Header header # timestamp\
        \ in the header is the acquisition time of\n                             # the\
        \ first ray in the scan.\n                             #\n                 \
        \            # in frame frame_id, angles are measured around\n             \
        \                # the positive Z axis (counterclockwise, if Z is up)\n    \
        \                         # with zero angle being forward along the x axis\n\
        \nfloat32 angle_min            # start angle of the scan [rad]\nfloat32 angle_max\
        \            # end angle of the scan [rad]\nfloat32 angle_increment      # angular\
        \ distance between measurements [rad]\n\nfloat32 time_increment       # time\
        \ between measurements [seconds] - if your scanner\n                       \
        \      # is moving, this will be used in interpolating position\n          \
        \                   # of 3d points\nfloat32 scan_time            # time between\
        \ scans [seconds]\n\nfloat32 range_min            # minimum range value [m]\n\
        float32 range_max            # maximum range value [m]\n\nfloat32[] ranges \
        \            # range data [m]\n                             # (Note: values\
        \ < range_min or > range_max should be discarded)\nfloat32[] intensities   \
        \     # intensity data [device-specific units].  If your\n                 \
        \            # device does not provide intensities, please leave\n         \
        \                    # the array empty.\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: ranges
        type: float32[]
      - name: intensities
        type: float32[]
      name: LaserScan
      package: sensor_msgs
    - definition: "# Measurement of the Magnetic Field vector at a specific location.\n\
        #\n# If the covariance of the measurement is known, it should be filled in.\n\
        # If all you know is the variance of each measurement, e.g. from the datasheet,\n\
        # just put those along the diagonal.\n# A covariance matrix of all zeros will\
        \ be interpreted as \"covariance unknown\",\n# and to use the data a covariance\
        \ will have to be assumed or gotten from some\n# other source.\n\nstd_msgs/Header\
        \ header               # timestamp is the time the\n                       \
        \                    # field was measured\n                                \
        \           # frame_id is the location and orientation\n                   \
        \                        # of the field measurement\n\ngeometry_msgs/Vector3\
        \ magnetic_field # x, y, and z components of the\n                         \
        \                  # field vector in Tesla\n                               \
        \            # If your sensor does not output 3 axes,\n                    \
        \                       # put NaNs in the components not reported.\n\nfloat64[9]\
        \ magnetic_field_covariance       # Row major about x, y, z axes\n         \
        \                                  # 0 is interpreted as variance unknown"
      fields:
      - name: header
        type: std_msgs/Header
      - name: magnetic_field
        type: geometry_msgs/Vector3
      - name: magnetic_field_covariance
        type: float64[9]
      name: MagneticField
      package: sensor_msgs
    - definition: '# Representation of state for joints with multiple degrees of freedom,

        # following the structure of JointState.

        #

        # It is assumed that a joint in a system corresponds to a transform that gets
        applied

        # along the kinematic chain. For example, a planar joint (as in URDF) is 3DOF
        (x, y, yaw)

        # and those 3DOF can be expressed as a transformation matrix, and that transformation

        # matrix can be converted back to (x, y, yaw)

        #

        # Each joint is uniquely identified by its name

        # The header specifies the time at which the joint states were recorded. All
        the joint states

        # in one message have to be recorded at the same time.

        #

        # This message consists of a multiple arrays, one for each part of the joint
        state.

        # The goal is to make each of the fields optional. When e.g. your joints have
        no

        # wrench associated with them, you can leave the wrench array empty.

        #

        # All arrays in this message should have the same size, or be empty.

        # This is the only way to uniquely associate the joint name with the correct

        # states.


        std_msgs/Header header


        string[] joint_names

        geometry_msgs/Transform[] transforms

        geometry_msgs/Twist[] twist

        geometry_msgs/Wrench[] wrench

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: joint_names
        type: string[]
      - name: transforms
        type: geometry_msgs/Transform[]
      - name: twist
        type: geometry_msgs/Twist[]
      - name: wrench
        type: geometry_msgs/Wrench[]
      name: MultiDOFJointState
      package: sensor_msgs
    - constants:
      - name: angle_min
        type: float32
        value: '#'
      - name: angle_max
        type: float32
        value: '#'
      - name: angle_increment
        type: float32
        value: '#'
      - name: time_increment
        type: float32
        value: '#'
      - name: scan_time
        type: float32
        value: '#'
      - name: range_min
        type: float32
        value: '#'
      - name: range_max
        type: float32
        value: '#'
      definition: "# Single scan from a multi-echo planar laser range-finder\n#\n# If\
        \ you have another ranging device with different behavior (e.g. a sonar\n# array),\
        \ please find or create a different message, since applications\n# will make\
        \ fairly laser-specific assumptions about this data\n\nstd_msgs/Header header\
        \ # timestamp in the header is the acquisition time of\n                   \
        \          # the first ray in the scan.\n                             #\n  \
        \                           # in frame frame_id, angles are measured around\n\
        \                             # the positive Z axis (counterclockwise, if Z\
        \ is up)\n                             # with zero angle being forward along\
        \ the x axis\n\nfloat32 angle_min            # start angle of the scan [rad]\n\
        float32 angle_max            # end angle of the scan [rad]\nfloat32 angle_increment\
        \      # angular distance between measurements [rad]\n\nfloat32 time_increment\
        \       # time between measurements [seconds] - if your scanner\n          \
        \                   # is moving, this will be used in interpolating position\n\
        \                             # of 3d points\nfloat32 scan_time            #\
        \ time between scans [seconds]\n\nfloat32 range_min            # minimum range\
        \ value [m]\nfloat32 range_max            # maximum range value [m]\n\nLaserEcho[]\
        \ ranges           # range data [m]\n                             # (Note: NaNs,\
        \ values < range_min or > range_max should be discarded)\n                 \
        \            # +Inf measurements are out of range\n                        \
        \     # -Inf measurements are too close to determine exact distance.\nLaserEcho[]\
        \ intensities      # intensity data [device-specific units].  If your\n    \
        \                         # device does not provide intensities, please leave\n\
        \                             # the array empty.\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: ranges
        type: sensor_msgs/LaserEcho[]
      - name: intensities
        type: sensor_msgs/LaserEcho[]
      name: MultiEchoLaserScan
      package: sensor_msgs
    - constants:
      - name: statu
        type: NavSatStatus
        value: s
      - name: latitud
        type: float64
        value: e
      - name: longitud
        type: float64
        value: e
      - name: altitud
        type: float64
        value: e
      - name: COVARIANCE_TYPE_UNKNOWN
        type: uint8
        value: '0'
      - name: COVARIANCE_TYPE_APPROXIMATED
        type: uint8
        value: '1'
      - name: COVARIANCE_TYPE_DIAGONAL_KNOWN
        type: uint8
        value: '2'
      - name: COVARIANCE_TYPE_KNOWN
        type: uint8
        value: '3'
      - name: position_covariance_typ
        type: uint8
        value: e
      definition: '# Navigation Satellite fix for any Global Navigation Satellite System

        #

        # Specified using the WGS 84 reference ellipsoid


        # header.stamp specifies the ROS time for this measurement (the

        #        corresponding satellite time may be reported using the

        #        sensor_msgs/TimeReference message).

        #

        # header.frame_id is the frame of reference reported by the satellite

        #        receiver, usually the location of the antenna.  This is a

        #        Euclidean frame relative to the vehicle, not a reference

        #        ellipsoid.

        std_msgs/Header header


        # Satellite fix status information.

        NavSatStatus status


        # Latitude [degrees]. Positive is north of equator; negative is south.

        float64 latitude


        # Longitude [degrees]. Positive is east of prime meridian; negative is west.

        float64 longitude


        # Altitude [m]. Positive is above the WGS 84 ellipsoid

        # (quiet NaN if no altitude is available).

        float64 altitude


        # Position covariance [m^2] defined relative to a tangential plane

        # through the reported position. The components are East, North, and

        # Up (ENU), in row-major order.

        #

        # Beware: this coordinate system exhibits singularities at the poles.

        float64[9] position_covariance


        # If the covariance of the fix is known, fill it in completely. If the

        # GPS receiver provides the variance of each measurement, put them

        # along the diagonal. If only Dilution of Precision is available,

        # estimate an approximate covariance from that.


        uint8 COVARIANCE_TYPE_UNKNOWN = 0

        uint8 COVARIANCE_TYPE_APPROXIMATED = 1

        uint8 COVARIANCE_TYPE_DIAGONAL_KNOWN = 2

        uint8 COVARIANCE_TYPE_KNOWN = 3


        uint8 position_covariance_type

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: position_covariance
        type: float64[9]
      name: NavSatFix
      package: sensor_msgs
    - constants:
      - name: STATUS_NO_FIX
        type: int8
        value: '-1'
      - name: STATUS_FIX
        type: int8
        value: '0'
      - name: STATUS_SBAS_FIX
        type: int8
        value: '1'
      - name: STATUS_GBAS_FIX
        type: int8
        value: '2'
      - name: statu
        type: int8
        value: s
      - name: SERVICE_GPS
        type: uint16
        value: '1'
      - name: SERVICE_GLONASS
        type: uint16
        value: '2'
      - name: SERVICE_COMPASS
        type: uint16
        value: '4'
      - name: SERVICE_GALILEO
        type: uint16
        value: '8'
      - name: servic
        type: uint16
        value: e
      definition: '# Navigation Satellite fix status for any Global Navigation Satellite
        System.

        #

        # Whether to output an augmented fix is determined by both the fix

        # type and the last time differential corrections were received.  A

        # fix is valid when status >= STATUS_FIX.


        int8 STATUS_NO_FIX =  -1        # unable to fix position

        int8 STATUS_FIX =      0        # unaugmented fix

        int8 STATUS_SBAS_FIX = 1        # with satellite-based augmentation

        int8 STATUS_GBAS_FIX = 2        # with ground-based augmentation


        int8 status


        # Bits defining which Global Navigation Satellite System signals were

        # used by the receiver.


        uint16 SERVICE_GPS =     1

        uint16 SERVICE_GLONASS = 2

        uint16 SERVICE_COMPASS = 4      # includes BeiDou.

        uint16 SERVICE_GALILEO = 8


        uint16 service

        '
      name: NavSatStatus
      package: sensor_msgs
    - definition: '# This message holds a collection of 3d points, plus optional additional

        # information about each point.


        # Time of sensor data acquisition, coordinate frame ID.

        std_msgs/Header header


        # Array of 3d points. Each Point32 should be interpreted as a 3d point

        # in the frame given in the header.

        geometry_msgs/Point32[] points


        # Each channel should have the same number of elements as points array,

        # and the data in each channel should correspond 1:1 with each point.

        # Channel names in common practice are listed in ChannelFloat32.msg.

        ChannelFloat32[] channels

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: points
        type: geometry_msgs/Point32[]
      - name: channels
        type: sensor_msgs/ChannelFloat32[]
      name: PointCloud
      package: sensor_msgs
    - constants:
      - name: heigh
        type: uint32
        value: t
      - name: widt
        type: uint32
        value: h
      - name: is_bigendian
        type: bool
        value: '#'
      - name: point_step
        type: uint32
        value: '#'
      - name: row_step
        type: uint32
        value: '#'
      - name: is_dense
        type: bool
        value: '#'
      definition: '# This message holds a collection of N-dimensional points, which
        may

        # contain additional information such as normals, intensity, etc. The

        # point data is stored as a binary blob, its layout described by the

        # contents of the "fields" array.

        #

        # The point cloud data may be organized 2d (image-like) or 1d (unordered).

        # Point clouds organized as 2d images may be produced by camera depth sensors

        # such as stereo or time-of-flight.


        # Time of sensor data acquisition, and the coordinate frame ID (for 3d points).

        std_msgs/Header header


        # 2D structure of the point cloud. If the cloud is unordered, height is

        # 1 and width is the length of the point cloud.

        uint32 height

        uint32 width


        # Describes the channels and their layout in the binary data blob.

        PointField[] fields


        bool    is_bigendian # Is this data bigendian?

        uint32  point_step   # Length of a point in bytes

        uint32  row_step     # Length of a row in bytes

        uint8[] data         # Actual point data, size is (row_step*height)


        bool is_dense        # True if there are no invalid points

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: fields
        type: sensor_msgs/PointField[]
      - name: data
        type: uint8[]
      name: PointCloud2
      package: sensor_msgs
    - constants:
      - name: INT8
        type: uint8
        value: '1'
      - name: UINT8
        type: uint8
        value: '2'
      - name: INT16
        type: uint8
        value: '3'
      - name: UINT16
        type: uint8
        value: '4'
      - name: INT32
        type: uint8
        value: '5'
      - name: UINT32
        type: uint8
        value: '6'
      - name: FLOAT32
        type: uint8
        value: '7'
      - name: FLOAT64
        type: uint8
        value: '8'
      - name: name
        type: string
        value: '#'
      - name: offset
        type: uint32
        value: '#'
      - name: datatype
        type: uint8
        value: '#'
      - name: count
        type: uint32
        value: '#'
      definition: '# This message holds the description of one point entry in the

        # PointCloud2 message format.

        uint8 INT8    = 1

        uint8 UINT8   = 2

        uint8 INT16   = 3

        uint8 UINT16  = 4

        uint8 INT32   = 5

        uint8 UINT32  = 6

        uint8 FLOAT32 = 7

        uint8 FLOAT64 = 8


        string name      # Name of field

        uint32 offset    # Offset from start of point struct

        uint8  datatype  # Datatype enumeration, see above

        uint32 count     # How many elements in the field

        '
      name: PointField
      package: sensor_msgs
    - constants:
      - name: ULTRASOUND
        type: uint8
        value: '0'
      - name: INFRARED
        type: uint8
        value: '1'
      - name: radiation_type
        type: uint8
        value: '#'
      - name: field_of_view
        type: float32
        value: '#'
      - name: min_range
        type: float32
        value: '#'
      - name: max_range
        type: float32
        value: '#'
      - name: range
        type: float32
        value: '#'
      definition: "# Single range reading from an active ranger that emits energy and\
        \ reports\n# one range reading that is valid along an arc at the distance measured.\n\
        # This message is  not appropriate for laser scanners. See the LaserScan\n#\
        \ message if you are working with a laser scanner.\n#\n# This message also can\
        \ represent a fixed-distance (binary) ranger.  This\n# sensor will have min_range===max_range===distance\
        \ of detection.\n# These sensors follow REP 117 and will output -Inf if the\
        \ object is detected\n# and +Inf if the object is outside of the detection range.\n\
        \nstd_msgs/Header header # timestamp in the header is the time the ranger\n\
        \                             # returned the distance reading\n\n# Radiation\
        \ type enums\n# If you want a value added to this list, send an email to the\
        \ ros-users list\nuint8 ULTRASOUND=0\nuint8 INFRARED=1\n\nuint8 radiation_type\
        \    # the type of radiation used by the sensor\n                        # (sound,\
        \ IR, etc) [enum]\n\nfloat32 field_of_view   # the size of the arc that the\
        \ distance reading is\n                        # valid for [rad]\n         \
        \               # the object causing the range reading may have\n          \
        \              # been anywhere within -field_of_view/2 and\n               \
        \         # field_of_view/2 at the measured range.\n                       \
        \ # 0 angle corresponds to the x-axis of the sensor.\n\nfloat32 min_range  \
        \     # minimum range value [m]\nfloat32 max_range       # maximum range value\
        \ [m]\n                        # Fixed distance rangers require min_range==max_range\n\
        \nfloat32 range           # range data [m]\n                        # (Note:\
        \ values < range_min or > range_max should be discarded)\n                 \
        \       # Fixed distance rangers only output -Inf or +Inf.\n               \
        \         # -Inf represents a detection within fixed distance.\n           \
        \             # (Detection too close to the sensor to quantify)\n          \
        \              # +Inf represents no detection within the fixed distance.\n \
        \                       # (Object out of range)\n"
      fields:
      - name: header
        type: std_msgs/Header
      name: Range
      package: sensor_msgs
    - constants:
      - name: x_offset
        type: uint32
        value: '#'
      - name: y_offset
        type: uint32
        value: '#'
      - name: height
        type: uint32
        value: '#'
      - name: width
        type: uint32
        value: '#'
      - name: do_rectif
        type: bool
        value: y
      definition: "# This message is used to specify a region of interest within an\
        \ image.\n#\n# When used to specify the ROI setting of the camera when the image\
        \ was\n# taken, the height and width fields should either match the height and\n\
        # width fields for the associated image; or height = width = 0\n# indicates\
        \ that the full resolution image was captured.\n\nuint32 x_offset  # Leftmost\
        \ pixel of the ROI\n                 # (0 if the ROI includes the left edge\
        \ of the image)\nuint32 y_offset  # Topmost pixel of the ROI\n             \
        \    # (0 if the ROI includes the top edge of the image)\nuint32 height    #\
        \ Height of ROI\nuint32 width     # Width of ROI\n\n# True if a distinct rectified\
        \ ROI should be calculated from the \"raw\"\n# ROI in this message. Typically\
        \ this should be False if the full image\n# is captured (ROI not used), and\
        \ True if a subwindow is captured (ROI\n# used).\nbool do_rectify\n"
      name: RegionOfInterest
      package: sensor_msgs
    - constants:
      - name: relative_humidity
        type: float64
        value: '#'
      - name: variance
        type: float64
        value: '#'
      definition: "# Single reading from a relative humidity sensor.\n# Defines the\
        \ ratio of partial pressure of water vapor to the saturated vapor\n# pressure\
        \ at a temperature.\n\nstd_msgs/Header header # timestamp of the measurement\n\
        \                             # frame_id is the location of the humidity sensor\n\
        \nfloat64 relative_humidity    # Expression of the relative humidity\n     \
        \                        # from 0.0 to 1.0.\n                             #\
        \ 0.0 is no partial pressure of water vapor\n                             #\
        \ 1.0 represents partial pressure of saturation\n\nfloat64 variance        \
        \     # 0 is interpreted as variance unknown\n"
      fields:
      - name: header
        type: std_msgs/Header
      name: RelativeHumidity
      package: sensor_msgs
    - constants:
      - name: temperature
        type: float64
        value: '#'
      - name: variance
        type: float64
        value: '#'
      definition: "# Single temperature reading.\n\nstd_msgs/Header header # timestamp\
        \ is the time the temperature was measured\n                             # frame_id\
        \ is the location of the temperature reading\n\nfloat64 temperature        \
        \  # Measurement of the Temperature in Degrees Celsius.\n\nfloat64 variance\
        \             # 0 is interpreted as variance unknown.\n"
      fields:
      - name: header
        type: std_msgs/Header
      name: Temperature
      package: sensor_msgs
    - constants:
      - name: source
        type: string
        value: '#'
      definition: "# Measurement from an external time source not actively synchronized\
        \ with the system clock.\n\nstd_msgs/Header header      # stamp is system time\
        \ for which measurement was valid\n                                  # frame_id\
        \ is not used\n\nbuiltin_interfaces/Time time_ref  # corresponding time from\
        \ this external source\nstring source                     # (optional) name\
        \ of time source\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: time_ref
        type: builtin_interfaces/Time
      name: TimeReference
      package: sensor_msgs
    name: sensor_msgs
    path: /opt/ros/dashing/share/sensor_msgs
    services:
    - definition: '# This service requests that a camera stores the given CameraInfo
        as that

        # camera''s calibration information.

        #

        # The width and height in the camera_info field should match what the

        # camera is currently outputting on its camera_info topic, and the camera

        # will assume that the region of the imager that is being referred to is

        # the region that the camera is currently capturing.


        sensor_msgs/CameraInfo camera_info # The camera_info to store

        ---

        bool success                             # True if the call succeeded

        string status_message                    # Used to give details about success

        '
      name: SetCameraInfo
      package: sensor_msgs
      request:
        definition: '# This service requests that a camera stores the given CameraInfo
          as that

          # camera''s calibration information.

          #

          # The width and height in the camera_info field should match what the

          # camera is currently outputting on its camera_info topic, and the camera

          # will assume that the region of the imager that is being referred to is

          # the region that the camera is currently capturing.


          sensor_msgs/CameraInfo camera_info # The camera_info to store'
        fields:
        - name: camera_info
          type: sensor_msgs/CameraInfo
        name: SetCameraInfoRequest
        package: sensor_msgs
      response:
        constants:
        - name: success
          type: bool
          value: '#'
        - name: status_message
          type: string
          value: '#'
        definition: 'bool success                             # True if the call succeeded

          string status_message                    # Used to give details about success'
        name: SetCameraInfoResponse
        package: sensor_msgs
  - actions: []
    messages:
    - definition: '# Definition of a mesh.


        # List of triangles; the index values refer to positions in vertices[].

        MeshTriangle[] triangles


        # The actual vertices that make up the mesh.

        geometry_msgs/Point[] vertices

        '
      fields:
      - name: triangles
        type: shape_msgs/MeshTriangle[]
      - name: vertices
        type: geometry_msgs/Point[]
      name: Mesh
      package: shape_msgs
    - definition: '# Definition of a triangle''s vertices.


        uint32[3] vertex_indices

        '
      fields:
      - name: vertex_indices
        type: uint32[3]
      name: MeshTriangle
      package: shape_msgs
    - definition: '# Representation of a plane, using the plane equation ax + by + cz
        + d = 0.

        #

        # a := coef[0]

        # b := coef[1]

        # c := coef[2]

        # d := coef[3]

        float64[4] coef

        '
      fields:
      - name: coef
        type: float64[4]
      name: Plane
      package: shape_msgs
    - constants:
      - name: BOX
        type: uint8
        value: '1'
      - name: SPHERE
        type: uint8
        value: '2'
      - name: CYLINDER
        type: uint8
        value: '3'
      - name: CONE
        type: uint8
        value: '4'
      - name: typ
        type: uint8
        value: e
      - name: BOX_X
        type: uint8
        value: '0'
      - name: BOX_Y
        type: uint8
        value: '1'
      - name: BOX_Z
        type: uint8
        value: '2'
      - name: SPHERE_RADIUS
        type: uint8
        value: '0'
      - name: CYLINDER_HEIGHT
        type: uint8
        value: '0'
      - name: CYLINDER_RADIUS
        type: uint8
        value: '1'
      - name: CONE_HEIGHT
        type: uint8
        value: '0'
      - name: CONE_RADIUS
        type: uint8
        value: '1'
      definition: '# Defines box, sphere, cylinder, and cone.

        # All shapes are defined to have their bounding boxes centered around 0,0,0.


        uint8 BOX=1

        uint8 SPHERE=2

        uint8 CYLINDER=3

        uint8 CONE=4


        # The type of the shape

        uint8 type


        # The dimensions of the shape

        float64[<=3] dimensions  # At no point will dimensions have a length > 3.


        # The meaning of the shape dimensions: each constant defines the index in the
        ''dimensions'' array.


        # For type BOX, the X, Y, and Z dimensions are the length of the corresponding
        sides of the box.

        uint8 BOX_X=0

        uint8 BOX_Y=1

        uint8 BOX_Z=2


        # For the SPHERE type, only one component is used, and it gives the radius of
        the sphere.

        uint8 SPHERE_RADIUS=0


        # For the CYLINDER and CONE types, the center line is oriented along the Z axis.

        # Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component of dimensions gives
        the

        # height of the cylinder (cone).

        # The CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the radius
        of

        # the base of the cylinder (cone).

        # Cone and cylinder primitives are defined to be circular. The tip of the cone

        # is pointing up, along +Z axis.


        uint8 CYLINDER_HEIGHT=0

        uint8 CYLINDER_RADIUS=1


        uint8 CONE_HEIGHT=0

        uint8 CONE_RADIUS=1

        '
      fields:
      - name: dimensions
        type: float64[<=3]
      name: SolidPrimitive
      package: shape_msgs
    name: shape_msgs
    path: /opt/ros/dashing/share/shape_msgs
    services: []
  - actions: []
    messages: []
    name: sros2_cmake
    path: /opt/ros/dashing/share/sros2_cmake
    services: []
  - actions: []
    messages:
    - constants:
      - name: dat
        type: bool
        value: a
      definition: 'bool data

        '
      name: Bool
      package: std_msgs
    - constants:
      - name: dat
        type: byte
        value: a
      definition: 'byte data

        '
      name: Byte
      package: std_msgs
    - constants:
      - name: layout
        type: MultiArrayLayout
        value: '#'
      definition: '# Please look at the MultiArrayLayout message definition for

        # documentation on all multiarrays.


        MultiArrayLayout  layout        # specification of data layout

        byte[]            data          # array of data

        '
      fields:
      - name: data
        type: byte[]
      name: ByteMultiArray
      package: std_msgs
    - constants:
      - name: dat
        type: char
        value: a
      definition: 'char data

        '
      name: Char
      package: std_msgs
    - definition: 'float32 r

        float32 g

        float32 b

        float32 a

        '
      fields:
      - name: r
        type: float32
      - name: g
        type: float32
      - name: b
        type: float32
      - name: a
        type: float32
      name: ColorRGBA
      package: std_msgs
    - definition: ''
      name: Empty
      package: std_msgs
    - constants:
      - name: dat
        type: float32
        value: a
      definition: 'float32 data

        '
      name: Float32
      package: std_msgs
    - constants:
      - name: layout
        type: MultiArrayLayout
        value: '#'
      definition: '# Please look at the MultiArrayLayout message definition for

        # documentation on all multiarrays.


        MultiArrayLayout  layout        # specification of data layout

        float32[]         data          # array of data

        '
      fields:
      - name: data
        type: float32[]
      name: Float32MultiArray
      package: std_msgs
    - constants:
      - name: dat
        type: float64
        value: a
      definition: 'float64 data

        '
      name: Float64
      package: std_msgs
    - constants:
      - name: layout
        type: MultiArrayLayout
        value: '#'
      definition: '# Please look at the MultiArrayLayout message definition for

        # documentation on all multiarrays.


        MultiArrayLayout  layout        # specification of data layout

        float64[]         data          # array of data

        '
      fields:
      - name: data
        type: float64[]
      name: Float64MultiArray
      package: std_msgs
    - constants:
      - name: frame_i
        type: string
        value: d
      definition: '# Standard metadata for higher-level stamped data types.

        # This is generally used to communicate timestamped data

        # in a particular coordinate frame.


        # Two-integer timestamp that is expressed as seconds and nanoseconds.

        builtin_interfaces/Time stamp


        # Transform frame with which this data is associated.

        string frame_id

        '
      fields:
      - name: stamp
        type: builtin_interfaces/Time
      name: Header
      package: std_msgs
    - constants:
      - name: dat
        type: int16
        value: a
      definition: 'int16 data

        '
      name: Int16
      package: std_msgs
    - constants:
      - name: layout
        type: MultiArrayLayout
        value: '#'
      definition: '# Please look at the MultiArrayLayout message definition for

        # documentation on all multiarrays.


        MultiArrayLayout  layout        # specification of data layout

        int16[]           data          # array of data

        '
      fields:
      - name: data
        type: int16[]
      name: Int16MultiArray
      package: std_msgs
    - constants:
      - name: dat
        type: int32
        value: a
      definition: 'int32 data

        '
      name: Int32
      package: std_msgs
    - constants:
      - name: layout
        type: MultiArrayLayout
        value: '#'
      definition: '# Please look at the MultiArrayLayout message definition for

        # documentation on all multiarrays.


        MultiArrayLayout  layout        # specification of data layout

        int32[]           data          # array of data

        '
      fields:
      - name: data
        type: int32[]
      name: Int32MultiArray
      package: std_msgs
    - constants:
      - name: dat
        type: int64
        value: a
      definition: 'int64 data

        '
      name: Int64
      package: std_msgs
    - constants:
      - name: layout
        type: MultiArrayLayout
        value: '#'
      definition: '# Please look at the MultiArrayLayout message definition for

        # documentation on all multiarrays.


        MultiArrayLayout  layout        # specification of data layout

        int64[]           data          # array of data

        '
      fields:
      - name: data
        type: int64[]
      name: Int64MultiArray
      package: std_msgs
    - constants:
      - name: dat
        type: int8
        value: a
      definition: 'int8 data

        '
      name: Int8
      package: std_msgs
    - constants:
      - name: layout
        type: MultiArrayLayout
        value: '#'
      definition: '# Please look at the MultiArrayLayout message definition for

        # documentation on all multiarrays.


        MultiArrayLayout  layout        # specification of data layout

        int8[]            data          # array of data

        '
      fields:
      - name: data
        type: int8[]
      name: Int8MultiArray
      package: std_msgs
    - constants:
      - name: label
        type: string
        value: '#'
      - name: size
        type: uint32
        value: '#'
      - name: stride
        type: uint32
        value: '#'
      definition: 'string label   # label of given dimension

        uint32 size    # size of given dimension (in type units)

        uint32 stride  # stride of given dimension

        '
      name: MultiArrayDimension
      package: std_msgs
    - constants:
      - name: data_offset
        type: uint32
        value: '#'
      definition: '# The multiarray declares a generic multi-dimensional array of a

        # particular data type.  Dimensions are ordered from outer most

        # to inner most.

        #

        # Accessors should ALWAYS be written in terms of dimension stride

        # and specified outer-most dimension first.

        #

        # multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j +
        k]

        #

        # A standard, 3-channel 640x480 image with interleaved color channels

        # would be specified as:

        #

        # dim[0].label  = "height"

        # dim[0].size   = 480

        # dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)

        # dim[1].label  = "width"

        # dim[1].size   = 640

        # dim[1].stride = 3*640 = 1920

        # dim[2].label  = "channel"

        # dim[2].size   = 3

        # dim[2].stride = 3

        #

        # multiarray(i,j,k) refers to the ith row, jth column, and kth channel.


        MultiArrayDimension[] dim # Array of dimension properties

        uint32 data_offset        # padding bytes at front of data

        '
      fields:
      - name: dim
        type: std_msgs/MultiArrayDimension[]
      name: MultiArrayLayout
      package: std_msgs
    - constants:
      - name: dat
        type: string
        value: a
      definition: 'string data

        '
      name: String
      package: std_msgs
    - constants:
      - name: dat
        type: uint16
        value: a
      definition: 'uint16 data

        '
      name: UInt16
      package: std_msgs
    - constants:
      - name: layout
        type: MultiArrayLayout
        value: '#'
      definition: '# Please look at the MultiArrayLayout message definition for

        # documentation on all multiarrays.


        MultiArrayLayout  layout        # specification of data layout

        uint16[]            data        # array of data

        '
      fields:
      - name: data
        type: uint16[]
      name: UInt16MultiArray
      package: std_msgs
    - constants:
      - name: dat
        type: uint32
        value: a
      definition: 'uint32 data

        '
      name: UInt32
      package: std_msgs
    - constants:
      - name: layout
        type: MultiArrayLayout
        value: '#'
      definition: '# Please look at the MultiArrayLayout message definition for

        # documentation on all multiarrays.


        MultiArrayLayout  layout        # specification of data layout

        uint32[]          data          # array of data

        '
      fields:
      - name: data
        type: uint32[]
      name: UInt32MultiArray
      package: std_msgs
    - constants:
      - name: dat
        type: uint64
        value: a
      definition: 'uint64 data

        '
      name: UInt64
      package: std_msgs
    - constants:
      - name: layout
        type: MultiArrayLayout
        value: '#'
      definition: '# Please look at the MultiArrayLayout message definition for

        # documentation on all multiarrays.


        MultiArrayLayout  layout        # specification of data layout

        uint64[]          data          # array of data

        '
      fields:
      - name: data
        type: uint64[]
      name: UInt64MultiArray
      package: std_msgs
    - constants:
      - name: dat
        type: uint8
        value: a
      definition: 'uint8 data

        '
      name: UInt8
      package: std_msgs
    - constants:
      - name: layout
        type: MultiArrayLayout
        value: '#'
      definition: '# Please look at the MultiArrayLayout message definition for

        # documentation on all multiarrays.


        MultiArrayLayout  layout        # specification of data layout

        uint8[]           data          # array of data

        '
      fields:
      - name: data
        type: uint8[]
      name: UInt8MultiArray
      package: std_msgs
    name: std_msgs
    path: /opt/ros/dashing/share/std_msgs
    services: []
  - actions: []
    messages: []
    name: std_srvs
    path: /opt/ros/dashing/share/std_srvs
    services:
    - definition: '---

        '
      name: Empty
      package: std_srvs
    - definition: 'bool data # e.g. for hardware enabling / disabling

        ---

        bool success   # indicate successful run of triggered service

        string message # informational, e.g. for error messages

        '
      name: SetBool
      package: std_srvs
      request:
        constants:
        - name: data
          type: bool
          value: '#'
        definition: 'bool data # e.g. for hardware enabling / disabling'
        name: SetBoolRequest
        package: std_srvs
      response:
        constants:
        - name: success
          type: bool
          value: '#'
        - name: message
          type: string
          value: '#'
        definition: 'bool success   # indicate successful run of triggered service

          string message # informational, e.g. for error messages'
        name: SetBoolResponse
        package: std_srvs
    - definition: '---

        bool success   # indicate successful run of triggered service

        string message # informational, e.g. for error messages

        '
      name: Trigger
      package: std_srvs
      response:
        constants:
        - name: success
          type: bool
          value: '#'
        - name: message
          type: string
          value: '#'
        definition: 'bool success   # indicate successful run of triggered service

          string message # informational, e.g. for error messages'
        name: TriggerResponse
        package: std_srvs
  - actions: []
    messages:
    - constants:
      - name: f
        type: float32
        value: '#'
      - name: t
        type: float32
        value: '#'
      - name: min_disparit
        type: float32
        value: y
      - name: max_disparit
        type: float32
        value: y
      - name: delta_
        type: float32
        value: d
      definition: '# Separate header for compatibility with current TimeSynchronizer.

        # Likely to be removed in a later release, use image.header instead.

        std_msgs/Header header


        # Floating point disparity image. The disparities are pre-adjusted for any

        # x-offset between the principal points of the two cameras (in the case

        # that they are verged). That is: d = x_l - x_r - (cx_l - cx_r)

        sensor_msgs/Image image


        # Stereo geometry. For disparity d, the depth from the camera is Z = fT/d.

        float32 f # Focal length, pixels

        float32 t # Baseline, world units


        # Subwindow of (potentially) valid disparity values.

        sensor_msgs/RegionOfInterest valid_window


        # The range of disparities searched.

        # In the disparity image, any disparity less than min_disparity is invalid.

        # The disparity search range defines the horopter, or 3D volume that the

        # stereo algorithm can "see". Points with Z outside of:

        #     Z_min = fT / max_disparity

        #     Z_max = fT / min_disparity

        # could not be found.

        float32 min_disparity

        float32 max_disparity


        # Smallest allowed disparity increment. The smallest achievable depth range

        # resolution is delta_Z = (Z^2/fT)*delta_d.

        float32 delta_d

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: image
        type: sensor_msgs/Image
      - name: valid_window
        type: sensor_msgs/RegionOfInterest
      name: DisparityImage
      package: stereo_msgs
    name: stereo_msgs
    path: /opt/ros/dashing/share/stereo_msgs
    services: []
  - actions: []
    messages: []
    name: tf2
    path: /opt/ros/dashing/share/tf2
    services: []
  - actions: []
    messages: []
    name: tf2_eigen
    path: /opt/ros/dashing/share/tf2_eigen
    services: []
  - actions: []
    messages: []
    name: tf2_geometry_msgs
    path: /opt/ros/dashing/share/tf2_geometry_msgs
    services: []
  - actions: []
    messages: []
    name: tf2_kdl
    path: /opt/ros/dashing/share/tf2_kdl
    services: []
  - actions:
    - definition: '#Simple API

        string target_frame

        string source_frame

        builtin_interfaces/Time source_time

        builtin_interfaces/Duration timeout


        #Advanced API

        builtin_interfaces/Time target_time

        string fixed_frame


        #Whether or not to use the advanced API

        bool advanced


        ---

        geometry_msgs/TransformStamped transform

        tf2_msgs/TF2Error error

        ---

        '
      feedback:
        definition: ''
        name: LookupTransformFeedback
        package: tf2_msgs
      goal:
        constants:
        - name: target_fram
          type: string
          value: e
        - name: source_fram
          type: string
          value: e
        - name: fixed_fram
          type: string
          value: e
        - name: advance
          type: bool
          value: d
        definition: '#Simple API

          string target_frame

          string source_frame

          builtin_interfaces/Time source_time

          builtin_interfaces/Duration timeout


          #Advanced API

          builtin_interfaces/Time target_time

          string fixed_frame


          #Whether or not to use the advanced API

          bool advanced'
        fields:
        - name: source_time
          type: builtin_interfaces/Time
        - name: timeout
          type: builtin_interfaces/Duration
        - name: target_time
          type: builtin_interfaces/Time
        name: LookupTransformGoal
        package: tf2_msgs
      name: LookupTransform
      package: tf2_msgs
      result:
        definition: 'geometry_msgs/TransformStamped transform

          tf2_msgs/TF2Error error'
        fields:
        - name: transform
          type: geometry_msgs/TransformStamped
        - name: error
          type: tf2_msgs/TF2Error
        name: LookupTransformResult
        package: tf2_msgs
    messages:
    - constants:
      - name: NO_ERROR
        type: uint8
        value: '0'
      - name: LOOKUP_ERROR
        type: uint8
        value: '1'
      - name: CONNECTIVITY_ERROR
        type: uint8
        value: '2'
      - name: EXTRAPOLATION_ERROR
        type: uint8
        value: '3'
      - name: INVALID_ARGUMENT_ERROR
        type: uint8
        value: '4'
      - name: TIMEOUT_ERROR
        type: uint8
        value: '5'
      - name: TRANSFORM_ERROR
        type: uint8
        value: '6'
      - name: erro
        type: uint8
        value: r
      - name: error_strin
        type: string
        value: g
      definition: 'uint8 NO_ERROR = 0

        uint8 LOOKUP_ERROR = 1

        uint8 CONNECTIVITY_ERROR = 2

        uint8 EXTRAPOLATION_ERROR = 3

        uint8 INVALID_ARGUMENT_ERROR = 4

        uint8 TIMEOUT_ERROR = 5

        uint8 TRANSFORM_ERROR = 6


        uint8 error

        string error_string

        '
      name: TF2Error
      package: tf2_msgs
    - definition: 'geometry_msgs/TransformStamped[] transforms

        '
      fields:
      - name: transforms
        type: geometry_msgs/TransformStamped[]
      name: TFMessage
      package: tf2_msgs
    name: tf2_msgs
    path: /opt/ros/dashing/share/tf2_msgs
    services:
    - definition: '---

        string frame_yaml

        '
      name: FrameGraph
      package: tf2_msgs
      response:
        constants:
        - name: frame_yam
          type: string
          value: l
        definition: string frame_yaml
        name: FrameGraphResponse
        package: tf2_msgs
  - actions: []
    messages: []
    name: tf2_ros
    path: /opt/ros/dashing/share/tf2_ros
    services: []
  - actions: []
    messages:
    - definition: 'std_msgs/Header header

        string[] joint_names

        JointTrajectoryPoint[] points

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: joint_names
        type: string[]
      - name: points
        type: trajectory_msgs/JointTrajectoryPoint[]
      name: JointTrajectory
      package: trajectory_msgs
    - definition: '# Each trajectory point specifies either positions[, velocities[,
        accelerations]]

        # or positions[, effort] for the trajectory to be executed.

        # All specified values are in the same order as the joint names in JointTrajectory.msg.


        float64[] positions

        float64[] velocities

        float64[] accelerations

        float64[] effort

        builtin_interfaces/Duration time_from_start

        '
      fields:
      - name: positions
        type: float64[]
      - name: velocities
        type: float64[]
      - name: accelerations
        type: float64[]
      - name: effort
        type: float64[]
      - name: time_from_start
        type: builtin_interfaces/Duration
      name: JointTrajectoryPoint
      package: trajectory_msgs
    - definition: "# The header is used to specify the coordinate frame and the reference\
        \ time for the trajectory durations\nstd_msgs/Header header\n\n# A representation\
        \ of a multi-dof joint trajectory (each point is a transformation)\n# Each point\
        \ along the trajectory will include an array of positions/velocities/accelerations\n\
        # that has the same length as the array of joint names, and has the same order\
        \ of joints as \n# the joint names array.\n\nstring[] joint_names\nMultiDOFJointTrajectoryPoint[]\
        \ points\n"
      fields:
      - name: header
        type: std_msgs/Header
      - name: joint_names
        type: string[]
      - name: points
        type: trajectory_msgs/MultiDOFJointTrajectoryPoint[]
      name: MultiDOFJointTrajectory
      package: trajectory_msgs
    - definition: '# Each multi-dof joint can specify a transform (up to 6 DOF).

        geometry_msgs/Transform[] transforms


        # There can be a velocity specified for the origin of the joint.

        geometry_msgs/Twist[] velocities


        # There can be an acceleration specified for the origin of the joint.

        geometry_msgs/Twist[] accelerations


        builtin_interfaces/Duration time_from_start

        '
      fields:
      - name: transforms
        type: geometry_msgs/Transform[]
      - name: velocities
        type: geometry_msgs/Twist[]
      - name: accelerations
        type: geometry_msgs/Twist[]
      - name: time_from_start
        type: builtin_interfaces/Duration
      name: MultiDOFJointTrajectoryPoint
      package: trajectory_msgs
    name: trajectory_msgs
    path: /opt/ros/dashing/share/trajectory_msgs
    services: []
  - actions: []
    messages: []
    name: uncrustify_vendor
    path: /opt/ros/dashing/share/uncrustify_vendor
    services: []
  - actions: []
    messages:
    - definition: '# A universally unique identifier (UUID).

        #

        #  http://en.wikipedia.org/wiki/Universally_unique_identifier

        #  http://tools.ietf.org/html/rfc4122.html


        uint8[16] uuid

        '
      fields:
      - name: uuid
        type: uint8[16]
      name: UUID
      package: unique_identifier_msgs
    name: unique_identifier_msgs
    path: /opt/ros/dashing/share/unique_identifier_msgs
    services: []
  - actions: []
    messages: []
    name: urdf
    path: /opt/ros/dashing/share/urdf
    services: []
  - actions: []
    messages:
    - constants:
      - name: CIRCLE
        type: uint8
        value: '0'
      - name: LINE_STRIP
        type: uint8
        value: '1'
      - name: LINE_LIST
        type: uint8
        value: '2'
      - name: POLYGON
        type: uint8
        value: '3'
      - name: POINTS
        type: uint8
        value: '4'
      - name: ADD
        type: uint8
        value: '0'
      - name: REMOVE
        type: uint8
        value: '1'
      - name: n
        type: string
        value: s
      - name: i
        type: int32
        value: d
      - name: typ
        type: int32
        value: e
      - name: actio
        type: int32
        value: n
      - name: scal
        type: float32
        value: e
      - name: fille
        type: uint8
        value: d
      definition: 'uint8 CIRCLE=0

        uint8 LINE_STRIP=1

        uint8 LINE_LIST=2

        uint8 POLYGON=3

        uint8 POINTS=4


        uint8 ADD=0

        uint8 REMOVE=1


        std_msgs/Header header

        # Namespace which is used with the id to form a unique id.

        string ns

        # Unique id within the namespace.

        int32 id

        # One of the above types, e.g. CIRCLE, LINE_STRIP, etc.

        int32 type

        # Either ADD or REMOVE.

        int32 action

        # Two-dimensional coordinate position, in pixel-coordinates.

        geometry_msgs/Point position

        # The scale of the object, e.g. the diameter for a CIRCLE.

        float32 scale

        # The outline color of the marker.

        std_msgs/ColorRGBA outline_color

        # Whether or not to fill in the shape with color.

        uint8 filled

        # Fill color; in the range: [0.0-1.0]

        std_msgs/ColorRGBA fill_color

        # How long the object should last before being automatically deleted.

        # 0 indicates forever.

        builtin_interfaces/Duration lifetime


        # Coordinates in 2D in pixel coords. Used for LINE_STRIP, LINE_LIST, POINTS,
        etc.

        geometry_msgs/Point[] points

        # The color for each line, point, etc. in the points field.

        std_msgs/ColorRGBA[] outline_colors

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: position
        type: geometry_msgs/Point
      - name: outline_color
        type: std_msgs/ColorRGBA
      - name: fill_color
        type: std_msgs/ColorRGBA
      - name: lifetime
        type: builtin_interfaces/Duration
      - name: points
        type: geometry_msgs/Point[]
      - name: outline_colors
        type: std_msgs/ColorRGBA[]
      name: ImageMarker
      package: visualization_msgs
    - constants:
      - name: nam
        type: string
        value: e
      - name: descriptio
        type: string
        value: n
      - name: scal
        type: float32
        value: e
      definition: '

        # Time/frame info.

        # If header.time is set to 0, the marker will be retransformed into

        # its frame on each timestep. You will receive the pose feedback

        # in the same frame.

        # Otherwise, you might receive feedback in a different frame.

        # For rviz, this will be the current ''fixed frame'' set by the user.

        std_msgs/Header header


        # Initial pose. Also, defines the pivot point for rotations.

        geometry_msgs/Pose pose


        # Identifying string. Must be globally unique in

        # the topic that this message is sent through.

        string name


        # Short description (< 40 characters).

        string description


        # Scale to be used for default controls (default=1).

        float32 scale


        # All menu and submenu entries associated with this marker.

        MenuEntry[] menu_entries


        # List of controls displayed for this marker.

        InteractiveMarkerControl[] controls

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: pose
        type: geometry_msgs/Pose
      - name: menu_entries
        type: visualization_msgs/MenuEntry[]
      - name: controls
        type: visualization_msgs/InteractiveMarkerControl[]
      name: InteractiveMarker
      package: visualization_msgs
    - constants:
      - name: nam
        type: string
        value: e
      - name: INHERIT
        type: uint8
        value: '0'
      - name: FIXED
        type: uint8
        value: '1'
      - name: VIEW_FACING
        type: uint8
        value: '2'
      - name: orientation_mod
        type: uint8
        value: e
      - name: NONE
        type: uint8
        value: '0'
      - name: MENU
        type: uint8
        value: '1'
      - name: BUTTON
        type: uint8
        value: '2'
      - name: MOVE_AXIS
        type: uint8
        value: '3'
      - name: MOVE_PLANE
        type: uint8
        value: '4'
      - name: ROTATE_AXIS
        type: uint8
        value: '5'
      - name: MOVE_ROTATE
        type: uint8
        value: '6'
      - name: MOVE_3D
        type: uint8
        value: '7'
      - name: ROTATE_3D
        type: uint8
        value: '8'
      - name: MOVE_ROTATE_3D
        type: uint8
        value: '9'
      - name: interaction_mod
        type: uint8
        value: e
      - name: always_visibl
        type: bool
        value: e
      - name: independent_marker_orientatio
        type: bool
        value: n
      - name: descriptio
        type: string
        value: n
      definition: '# Represents a control that is to be displayed together with an interactive
        marker


        # Identifying string for this control.

        # You need to assign a unique value to this to receive feedback from the GUI

        # on what actions the user performs on this control (e.g. a button click).

        string name



        # Defines the local coordinate frame (relative to the pose of the parent

        # interactive marker) in which is being rotated and translated.

        # Default: Identity

        geometry_msgs/Quaternion orientation



        # Orientation mode: controls how orientation changes.

        # INHERIT: Follow orientation of interactive marker

        # FIXED: Keep orientation fixed at initial state

        # VIEW_FACING: Align y-z plane with screen (x: forward, y:left, z:up).

        uint8 INHERIT = 0

        uint8 FIXED = 1

        uint8 VIEW_FACING = 2


        uint8 orientation_mode


        # Interaction mode for this control

        #

        # NONE: This control is only meant for visualization; no context menu.

        # MENU: Like NONE, but right-click menu is active.

        # BUTTON: Element can be left-clicked.

        # MOVE_AXIS: Translate along local x-axis.

        # MOVE_PLANE: Translate in local y-z plane.

        # ROTATE_AXIS: Rotate around local x-axis.

        # MOVE_ROTATE: Combines MOVE_PLANE and ROTATE_AXIS.

        uint8 NONE = 0

        uint8 MENU = 1

        uint8 BUTTON = 2

        uint8 MOVE_AXIS = 3

        uint8 MOVE_PLANE = 4

        uint8 ROTATE_AXIS = 5

        uint8 MOVE_ROTATE = 6

        # "3D" interaction modes work with the mouse+SHIFT+CTRL or with 3D cursors.

        # MOVE_3D: Translate freely in 3D space.

        # ROTATE_3D: Rotate freely in 3D space about the origin of parent frame.

        # MOVE_ROTATE_3D: Full 6-DOF freedom of translation and rotation about the cursor
        origin.

        uint8 MOVE_3D = 7

        uint8 ROTATE_3D = 8

        uint8 MOVE_ROTATE_3D = 9


        uint8 interaction_mode



        # If true, the contained markers will also be visible

        # when the gui is not in interactive mode.

        bool always_visible



        # Markers to be displayed as custom visual representation.

        # Leave this empty to use the default control handles.

        #

        # Note:

        # - The markers can be defined in an arbitrary coordinate frame,

        #   but will be transformed into the local frame of the interactive marker.

        # - If the header of a marker is empty, its pose will be interpreted as

        #   relative to the pose of the parent interactive marker.

        Marker[] markers



        # In VIEW_FACING mode, set this to true if you don''t want the markers

        # to be aligned with the camera view point. The markers will show up

        # as in INHERIT mode.

        bool independent_marker_orientation



        # Short description (< 40 characters) of what this control does,

        # e.g. "Move the robot".

        # Default: A generic description based on the interaction mode

        string description

        '
      fields:
      - name: orientation
        type: geometry_msgs/Quaternion
      - name: markers
        type: visualization_msgs/Marker[]
      name: InteractiveMarkerControl
      package: visualization_msgs
    - constants:
      - name: client_i
        type: string
        value: d
      - name: marker_nam
        type: string
        value: e
      - name: control_nam
        type: string
        value: e
      - name: KEEP_ALIVE
        type: uint8
        value: '0'
      - name: POSE_UPDATE
        type: uint8
        value: '1'
      - name: MENU_SELECT
        type: uint8
        value: '2'
      - name: BUTTON_CLICK
        type: uint8
        value: '3'
      - name: MOUSE_DOWN
        type: uint8
        value: '4'
      - name: MOUSE_UP
        type: uint8
        value: '5'
      - name: event_typ
        type: uint8
        value: e
      - name: menu_entry_i
        type: uint32
        value: d
      - name: mouse_point_vali
        type: bool
        value: d
      definition: '

        # Time/frame info.

        std_msgs/Header header


        # Identifying string. Must be unique in the topic namespace.

        string client_id


        # Feedback message sent back from the GUI, e.g.

        # when the status of an interactive marker was modified by the user.


        # Specifies which interactive marker and control this message refers to

        string marker_name

        string control_name


        # Type of the event

        # KEEP_ALIVE: sent while dragging to keep up control of the marker

        # MENU_SELECT: a menu entry has been selected

        # BUTTON_CLICK: a button control has been clicked

        # POSE_UPDATE: the pose has been changed using one of the controls

        uint8 KEEP_ALIVE = 0

        uint8 POSE_UPDATE = 1

        uint8 MENU_SELECT = 2

        uint8 BUTTON_CLICK = 3


        uint8 MOUSE_DOWN = 4

        uint8 MOUSE_UP = 5


        uint8 event_type


        # Current pose of the marker

        # Note: Has to be valid for all feedback types.

        geometry_msgs/Pose pose


        # Contains the ID of the selected menu entry

        # Only valid for MENU_SELECT events.

        uint32 menu_entry_id


        # If event_type is BUTTON_CLICK, MOUSE_DOWN, or MOUSE_UP, mouse_point

        # may contain the 3 dimensional position of the event on the

        # control.  If it does, mouse_point_valid will be true.  mouse_point

        # will be relative to the frame listed in the header.

        geometry_msgs/Point mouse_point

        bool mouse_point_valid

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: pose
        type: geometry_msgs/Pose
      - name: mouse_point
        type: geometry_msgs/Point
      name: InteractiveMarkerFeedback
      package: visualization_msgs
    - constants:
      - name: server_i
        type: string
        value: d
      - name: seq_nu
        type: uint64
        value: m
      definition: '

        # Identifying string. Must be unique in the topic namespace

        # that this server works on.

        string server_id


        # Sequence number.

        # The client will use this to detect if it has missed a subsequent

        # update.  Every update message will have the same sequence number as

        # an init message.  Clients will likely want to unsubscribe from the

        # init topic after a successful initialization to avoid receiving

        # duplicate data.

        uint64 seq_num


        # All markers.

        InteractiveMarker[] markers

        '
      fields:
      - name: markers
        type: visualization_msgs/InteractiveMarker[]
      name: InteractiveMarkerInit
      package: visualization_msgs
    - constants:
      - name: nam
        type: string
        value: e
      definition: '

        # Time/frame info.

        std_msgs/Header header


        # Initial pose. Also, defines the pivot point for rotations.

        geometry_msgs/Pose pose


        # Identifying string. Must be globally unique in

        # the topic that this message is sent through.

        string name

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: pose
        type: geometry_msgs/Pose
      name: InteractiveMarkerPose
      package: visualization_msgs
    - constants:
      - name: server_i
        type: string
        value: d
      - name: seq_nu
        type: uint64
        value: m
      - name: KEEP_ALIVE
        type: uint8
        value: '0'
      - name: UPDATE
        type: uint8
        value: '1'
      - name: typ
        type: uint8
        value: e
      definition: '

        # Identifying string. Must be unique in the topic namespace

        # that this server works on.

        string server_id


        # Sequence number.

        # The client will use this to detect if it has missed an update.

        uint64 seq_num


        # Type holds the purpose of this message.  It must be one of UPDATE or KEEP_ALIVE.

        # UPDATE: Incremental update to previous state.

        #         The sequence number must be 1 higher than for

        #         the previous update.

        # KEEP_ALIVE: Indicates the that the server is still living.

        #             The sequence number does not increase.

        #             No payload data should be filled out (markers, poses, or erases).

        uint8 KEEP_ALIVE = 0

        uint8 UPDATE = 1


        uint8 type


        # Note: No guarantees on the order of processing.

        #       Contents must be kept consistent by sender.


        # Markers to be added or updated

        InteractiveMarker[] markers


        # Poses of markers that should be moved

        InteractiveMarkerPose[] poses


        # Names of markers to be erased

        string[] erases

        '
      fields:
      - name: markers
        type: visualization_msgs/InteractiveMarker[]
      - name: poses
        type: visualization_msgs/InteractiveMarkerPose[]
      - name: erases
        type: string[]
      name: InteractiveMarkerUpdate
      package: visualization_msgs
    - constants:
      - name: ARROW
        type: uint8
        value: '0'
      - name: CUBE
        type: uint8
        value: '1'
      - name: SPHERE
        type: uint8
        value: '2'
      - name: CYLINDER
        type: uint8
        value: '3'
      - name: LINE_STRIP
        type: uint8
        value: '4'
      - name: LINE_LIST
        type: uint8
        value: '5'
      - name: CUBE_LIST
        type: uint8
        value: '6'
      - name: SPHERE_LIST
        type: uint8
        value: '7'
      - name: POINTS
        type: uint8
        value: '8'
      - name: TEXT_VIEW_FACING
        type: uint8
        value: '9'
      - name: MESH_RESOURCE
        type: uint8
        value: '10'
      - name: TRIANGLE_LIST
        type: uint8
        value: '11'
      - name: ADD
        type: uint8
        value: '0'
      - name: MODIFY
        type: uint8
        value: '0'
      - name: DELETE
        type: uint8
        value: '2'
      - name: DELETEALL
        type: uint8
        value: '3'
      - name: n
        type: string
        value: s
      - name: i
        type: int32
        value: d
      - name: typ
        type: int32
        value: e
      - name: actio
        type: int32
        value: n
      - name: frame_locke
        type: bool
        value: d
      - name: tex
        type: string
        value: t
      - name: mesh_resourc
        type: string
        value: e
      - name: mesh_use_embedded_material
        type: bool
        value: s
      definition: '# See:

        #  - http://www.ros.org/wiki/rviz/DisplayTypes/Marker

        #  - http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes

        #

        # for more information on using this message with rviz.


        uint8 ARROW=0

        uint8 CUBE=1

        uint8 SPHERE=2

        uint8 CYLINDER=3

        uint8 LINE_STRIP=4

        uint8 LINE_LIST=5

        uint8 CUBE_LIST=6

        uint8 SPHERE_LIST=7

        uint8 POINTS=8

        uint8 TEXT_VIEW_FACING=9

        uint8 MESH_RESOURCE=10

        uint8 TRIANGLE_LIST=11


        uint8 ADD=0

        uint8 MODIFY=0

        uint8 DELETE=2

        uint8 DELETEALL=3


        # Header for timestamp and frame id.

        std_msgs/Header header

        # Namespace in which to place the object.

        # Used in conjunction with id to create a unique name for the object.

        string ns

        # Object ID used in conjunction with the namespace for manipulating and deleting
        the object later.

        int32 id

        # Type of object.

        int32 type

        # Action to take; one of:

        #  - 0 add/modify an object

        #  - 1 (deprecated)

        #  - 2 deletes an object

        #  - 3 deletes all objects

        int32 action

        # Pose of the object with respect the frame_id specified in the header.

        geometry_msgs/Pose pose

        # Scale of the object; 1,1,1 means default (usually 1 meter square).

        geometry_msgs/Vector3 scale

        # Color of the object; in the range: [0.0-1.0]

        std_msgs/ColorRGBA color

        # How long the object should last before being automatically deleted.

        # 0 indicates forever.

        builtin_interfaces/Duration lifetime

        # If this marker should be frame-locked, i.e. retransformed into its frame every
        timestep.

        bool frame_locked


        # Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP,
        etc.)

        geometry_msgs/Point[] points

        # Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP,
        etc.)

        # The number of colors provided must either be 0 or equal to the number of points
        provided.

        # NOTE: alpha is not yet used

        std_msgs/ColorRGBA[] colors


        # Only used for text markers

        string text


        # Only used for MESH_RESOURCE markers.

        string mesh_resource

        bool mesh_use_embedded_materials

        '
      fields:
      - name: header
        type: std_msgs/Header
      - name: pose
        type: geometry_msgs/Pose
      - name: scale
        type: geometry_msgs/Vector3
      - name: color
        type: std_msgs/ColorRGBA
      - name: lifetime
        type: builtin_interfaces/Duration
      - name: points
        type: geometry_msgs/Point[]
      - name: colors
        type: std_msgs/ColorRGBA[]
      name: Marker
      package: visualization_msgs
    - definition: 'Marker[] markers

        '
      fields:
      - name: markers
        type: visualization_msgs/Marker[]
      name: MarkerArray
      package: visualization_msgs
    - constants:
      - name: i
        type: uint32
        value: d
      - name: parent_i
        type: uint32
        value: d
      - name: titl
        type: string
        value: e
      - name: comman
        type: string
        value: d
      - name: FEEDBACK
        type: uint8
        value: '0'
      - name: ROSRUN
        type: uint8
        value: '1'
      - name: ROSLAUNCH
        type: uint8
        value: '2'
      - name: command_typ
        type: uint8
        value: e
      definition: '# MenuEntry message.

        #

        # Each InteractiveMarker message has an array of MenuEntry messages.

        # A collection of MenuEntries together describe a

        # menu/submenu/subsubmenu/etc tree, though they are stored in a flat

        # array.  The tree structure is represented by giving each menu entry

        # an ID number and a "parent_id" field.  Top-level entries are the

        # ones with parent_id = 0.  Menu entries are ordered within their

        # level the same way they are ordered in the containing array.  Parent

        # entries must appear before their children.

        #

        # Example:

        # - id = 3

        #   parent_id = 0

        #   title = "fun"

        # - id = 2

        #   parent_id = 0

        #   title = "robot"

        # - id = 4

        #   parent_id = 2

        #   title = "pr2"

        # - id = 5

        #   parent_id = 2

        #   title = "turtle"

        #

        # Gives a menu tree like this:

        #  - fun

        #  - robot

        #    - pr2

        #    - turtle


        # ID is a number for each menu entry.  Must be unique within the

        # control, and should never be 0.

        uint32 id


        # ID of the parent of this menu entry, if it is a submenu.  If this

        # menu entry is a top-level entry, set parent_id to 0.

        uint32 parent_id


        # menu / entry title

        string title


        # Arguments to command indicated by command_type (below)

        string command


        # Command_type stores the type of response desired when this menu

        # entry is clicked.

        # FEEDBACK: send an InteractiveMarkerFeedback message with menu_entry_id set
        to this entry''s id.

        # ROSRUN: execute "rosrun" with arguments given in the command field (above).

        # ROSLAUNCH: execute "roslaunch" with arguments given in the command field (above).

        uint8 FEEDBACK=0

        uint8 ROSRUN=1

        uint8 ROSLAUNCH=2

        uint8 command_type

      '  
      name: MenuEntry
      package: visualization_msgs
    name: visualization_msgs
    path: /opt/ros/dashing/share/visualization_msgs
    services: []
  sha256: 7405dfc423a1f6fd23d3afb79b0c50bc182c73c27663fa630f27f568ec06640e
  sources:
  - /opt/ros/dashing/setup.bash
  - /ros_ws/install/setup.bash
